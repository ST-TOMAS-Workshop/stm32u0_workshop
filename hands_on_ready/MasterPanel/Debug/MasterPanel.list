
MasterPanel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002f24  08002f24  00003f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb8  08002fb8  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fb8  08002fb8  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fb8  08002fb8  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fb8  08002fb8  00003fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fbc  08002fbc  00003fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002fc0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000001c  08002fdc  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002fdc  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae87  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd9  00000000  00000000  0000eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097f  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a951  00000000  00000000  00012177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d98f  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad4bd  00000000  00000000  0003a457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b98  00000000  00000000  000e7958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000ea4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f0c 	.word	0x08002f0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08002f0c 	.word	0x08002f0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa9a 	bl	800075e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f84d 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f96b 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f90f 	bl	8000454 <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f88f 	bl	8000358 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Enable LP run mode */
 __HAL_RCC_PWR_CLK_ENABLE();
 800023a:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <main+0x90>)
 800023c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800023e:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <main+0x90>)
 8000240:	2180      	movs	r1, #128	@ 0x80
 8000242:	0549      	lsls	r1, r1, #21
 8000244:	430a      	orrs	r2, r1
 8000246:	659a      	str	r2, [r3, #88]	@ 0x58
 8000248:	4b19      	ldr	r3, [pc, #100]	@ (80002b0 <main+0x90>)
 800024a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	055b      	lsls	r3, r3, #21
 8000250:	4013      	ands	r3, r2
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 HAL_PWREx_EnableLowPowerRunMode(); //we can do it as Sysclock <2MHz and enter in Sleep mode
 8000256:	f000 fff7 	bl	8001248 <HAL_PWREx_EnableLowPowerRunMode>

 /*Drive LED and Generate Pulses*/
 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025a:	4b16      	ldr	r3, [pc, #88]	@ (80002b4 <main+0x94>)
 800025c:	2100      	movs	r1, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f001 ff22 	bl	80020a8 <HAL_TIM_PWM_Start>

 /*Enable DMAMUX*/
 HAL_DMAEx_EnableMuxRequestGenerator(&hdma_dma_generator0);
 8000264:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <main+0x98>)
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fdb6 	bl	8000dd8 <HAL_DMAEx_EnableMuxRequestGenerator>

 /*Link PWM buffer and TIM2 capture/compare register through DMA_Ch1*/
 HAL_DMA_Start(&hdma_dma_generator0, (uint32_t)SRC_Buffer_LED_PWM, (uint32_t)&TIM2->CCR1, 4);
 800026c:	4913      	ldr	r1, [pc, #76]	@ (80002bc <main+0x9c>)
 800026e:	4a14      	ldr	r2, [pc, #80]	@ (80002c0 <main+0xa0>)
 8000270:	4811      	ldr	r0, [pc, #68]	@ (80002b8 <main+0x98>)
 8000272:	2304      	movs	r3, #4
 8000274:	f000 fc6a 	bl	8000b4c <HAL_DMA_Start>

 /* Keep live DMA, SRAM, TIM2 and Ports only during SLEEP mode ~ 10uA/1MHz reduction*/
 WRITE_REG(RCC->AHBSMENR, RCC_AHBSMENR_DMA1SMEN|RCC_AHBSMENR_SRAM1SMEN);      // DMA, SRAM
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <main+0x90>)
 800027a:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <main+0xa4>)
 800027c:	669a      	str	r2, [r3, #104]	@ 0x68
 WRITE_REG(RCC->IOPSMENR, RCC_IOPSMENR_GPIOASMEN|RCC_IOPSMENR_GPIOCSMEN);     // GPIOA, GPIOC
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <main+0x90>)
 8000280:	2205      	movs	r2, #5
 8000282:	66da      	str	r2, [r3, #108]	@ 0x6c
 WRITE_REG(RCC->APBSMENR1, RCC_APBSMENR1_TIM2SMEN);                        // TIM2
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <main+0x90>)
 8000286:	2201      	movs	r2, #1
 8000288:	679a      	str	r2, [r3, #120]	@ 0x78
 CLEAR_REG(RCC->APBSMENR2);
 800028a:	4a09      	ldr	r2, [pc, #36]	@ (80002b0 <main+0x90>)
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	2100      	movs	r1, #0
 8000290:	50d1      	str	r1, [r2, r3]

 /*Enter in LP SLEEP mode*/
 HAL_SuspendTick();
 8000292:	f000 fadf 	bl	8000854 <HAL_SuspendTick>
 HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPSLEEP);
 8000296:	2020      	movs	r0, #32
 8000298:	f001 f820 	bl	80012dc <HAL_PWREx_EnableFlashPowerDown>
 HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	01db      	lsls	r3, r3, #7
 80002a0:	2101      	movs	r1, #1
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 ff2a 	bl	80010fc <HAL_PWR_EnterSLEEPMode>
 HAL_ResumeTick();
 80002a8:	f000 fae2 	bl	8000870 <HAL_ResumeTick>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	e7fd      	b.n	80002ac <main+0x8c>
 80002b0:	40021000 	.word	0x40021000
 80002b4:	20000038 	.word	0x20000038
 80002b8:	20000084 	.word	0x20000084
 80002bc:	20000000 	.word	0x20000000
 80002c0:	40000034 	.word	0x40000034
 80002c4:	00000201 	.word	0x00000201

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b099      	sub	sp, #100	@ 0x64
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2414      	movs	r4, #20
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	234c      	movs	r3, #76	@ 0x4c
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 fdeb 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	2310      	movs	r3, #16
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 fde4 	bl	8002eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80002ec:	2380      	movs	r3, #128	@ 0x80
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 ff3d 	bl	8001170 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f6:	0021      	movs	r1, r4
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2210      	movs	r2, #16
 80002fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2240      	movs	r2, #64	@ 0x40
 800030e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 ffef 	bl	80012fc <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000322:	f000 f92d 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2100      	movs	r1, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fc04 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800034c:	f000 f918 	bl	8000580 <Error_Handler>
  }
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b019      	add	sp, #100	@ 0x64
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08e      	sub	sp, #56	@ 0x38
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	2328      	movs	r3, #40	@ 0x28
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0018      	movs	r0, r3
 8000364:	2310      	movs	r3, #16
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f002 fda3 	bl	8002eb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	231c      	movs	r3, #28
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	0018      	movs	r0, r3
 8000374:	230c      	movs	r3, #12
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f002 fd9b 	bl	8002eb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	231c      	movs	r3, #28
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f002 fd94 	bl	8002eb4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038c:	4b30      	ldr	r3, [pc, #192]	@ (8000450 <MX_TIM2_Init+0xf8>)
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	05d2      	lsls	r2, r2, #23
 8000392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8000394:	4b2e      	ldr	r3, [pc, #184]	@ (8000450 <MX_TIM2_Init+0xf8>)
 8000396:	2231      	movs	r2, #49	@ 0x31
 8000398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <MX_TIM2_Init+0xf8>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003a2:	2263      	movs	r2, #99	@ 0x63
 80003a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b2:	4b27      	ldr	r3, [pc, #156]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fdbf 	bl	8001f38 <HAL_TIM_Base_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003be:	f000 f8df 	bl	8000580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c2:	2128      	movs	r1, #40	@ 0x28
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2280      	movs	r2, #128	@ 0x80
 80003c8:	0152      	lsls	r2, r2, #5
 80003ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003cc:	187a      	adds	r2, r7, r1
 80003ce:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f002 f84a 	bl	800246c <HAL_TIM_ConfigClockSource>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003dc:	f000 f8d0 	bl	8000580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <MX_TIM2_Init+0xf8>)
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fe00 	bl	8001fe8 <HAL_TIM_PWM_Init>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003ec:	f000 f8c8 	bl	8000580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	211c      	movs	r1, #28
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fe:	187a      	adds	r2, r7, r1
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <MX_TIM2_Init+0xf8>)
 8000402:	0011      	movs	r1, r2
 8000404:	0018      	movs	r0, r3
 8000406:	f002 fce7 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800040e:	f000 f8b7 	bl	8000580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000412:	003b      	movs	r3, r7
 8000414:	2260      	movs	r2, #96	@ 0x60
 8000416:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000418:	003b      	movs	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800041e:	003b      	movs	r3, r7
 8000420:	2202      	movs	r2, #2
 8000422:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042a:	0039      	movs	r1, r7
 800042c:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <MX_TIM2_Init+0xf8>)
 800042e:	2200      	movs	r2, #0
 8000430:	0018      	movs	r0, r3
 8000432:	f001 ff1b 	bl	800226c <HAL_TIM_PWM_ConfigChannel>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800043a:	f000 f8a1 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800043e:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <MX_TIM2_Init+0xf8>)
 8000440:	0018      	movs	r0, r3
 8000442:	f000 f8e3 	bl	800060c <HAL_TIM_MspPostInit>

}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b00e      	add	sp, #56	@ 0x38
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	20000038 	.word	0x20000038

08000454 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0

  /* Local variables */
  HAL_DMA_MuxRequestGeneratorConfigTypeDef pRequestGeneratorConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	0018      	movs	r0, r3
 800045e:	230c      	movs	r3, #12
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f002 fd26 	bl	8002eb4 <memset>

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000468:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <MX_DMA_Init+0xa8>)
 800046a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800046c:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <MX_DMA_Init+0xa8>)
 800046e:	2101      	movs	r1, #1
 8000470:	430a      	orrs	r2, r1
 8000472:	649a      	str	r2, [r3, #72]	@ 0x48
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_DMA_Init+0xa8>)
 8000476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000478:	2201      	movs	r2, #1
 800047a:	4013      	ands	r3, r2
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 8000480:	4b1f      	ldr	r3, [pc, #124]	@ (8000500 <MX_DMA_Init+0xac>)
 8000482:	4a20      	ldr	r2, [pc, #128]	@ (8000504 <MX_DMA_Init+0xb0>)
 8000484:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000486:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_DMA_Init+0xac>)
 8000488:	2201      	movs	r2, #1
 800048a:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_DMA_Init+0xac>)
 800048e:	2210      	movs	r2, #16
 8000490:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000492:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_DMA_Init+0xac>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <MX_DMA_Init+0xac>)
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_DMA_Init+0xac>)
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004a6:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_DMA_Init+0xac>)
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	0112      	lsls	r2, r2, #4
 80004ac:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_CIRCULAR;
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_DMA_Init+0xac>)
 80004b0:	2220      	movs	r2, #32
 80004b2:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <MX_DMA_Init+0xac>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_DMA_Init+0xac>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fa99 	bl	80009f4 <HAL_DMA_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_DMA_Init+0x76>
  {
    Error_Handler( );
 80004c6:	f000 f85b 	bl	8000580 <Error_Handler>
  }

  /* Configure the DMAMUX request generator for the selected DMA channel */
  pRequestGeneratorConfig.SignalID = HAL_DMAMUX1_REQ_GEN_EXTI13;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	220d      	movs	r2, #13
 80004ce:	601a      	str	r2, [r3, #0]
  pRequestGeneratorConfig.Polarity = HAL_DMAMUX_REQ_GEN_FALLING;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2280      	movs	r2, #128	@ 0x80
 80004d4:	02d2      	lsls	r2, r2, #11
 80004d6:	605a      	str	r2, [r3, #4]
  pRequestGeneratorConfig.RequestNumber = 1;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2201      	movs	r2, #1
 80004dc:	609a      	str	r2, [r3, #8]
  if (HAL_DMAEx_ConfigMuxRequestGenerator(&hdma_dma_generator0, &pRequestGeneratorConfig) != HAL_OK)
 80004de:	1d3a      	adds	r2, r7, #4
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <MX_DMA_Init+0xac>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fc27 	bl	8000d38 <HAL_DMAEx_ConfigMuxRequestGenerator>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DMA_Init+0x9e>
  {
    Error_Handler( );
 80004ee:	f000 f847 	bl	8000580 <Error_Handler>
  }

}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b004      	add	sp, #16
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000
 8000500:	20000084 	.word	0x20000084
 8000504:	40020008 	.word	0x40020008

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	@ 0x24
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	240c      	movs	r4, #12
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fccb 	bl	8002eb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <MX_GPIO_Init+0x70>)
 8000520:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <MX_GPIO_Init+0x70>)
 8000524:	2104      	movs	r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	64da      	str	r2, [r3, #76]	@ 0x4c
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <MX_GPIO_Init+0x70>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	2204      	movs	r2, #4
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <MX_GPIO_Init+0x70>)
 8000538:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <MX_GPIO_Init+0x70>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000542:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <MX_GPIO_Init+0x70>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	0192      	lsls	r2, r2, #6
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2284      	movs	r2, #132	@ 0x84
 800055a:	0392      	lsls	r2, r2, #14
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2201      	movs	r2, #1
 8000562:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	193b      	adds	r3, r7, r4
 8000566:	4a05      	ldr	r2, [pc, #20]	@ (800057c <MX_GPIO_Init+0x74>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f000 fc52 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b009      	add	sp, #36	@ 0x24
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	50000800 	.word	0x50000800

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	e7fd      	b.n	8000588 <Error_Handler+0x8>

0800058c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_MspInit+0x44>)
 8000594:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_MspInit+0x44>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0549      	lsls	r1, r1, #21
 800059c:	430a      	orrs	r2, r1
 800059e:	659a      	str	r2, [r3, #88]	@ 0x58
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_MspInit+0x44>)
 80005a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	055b      	lsls	r3, r3, #21
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_MspInit+0x44>)
 80005b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <HAL_MspInit+0x44>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d10b      	bne.n	8000600 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <HAL_TIM_Base_MspInit+0x34>)
 80005ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_TIM_Base_MspInit+0x34>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	430a      	orrs	r2, r1
 80005f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <HAL_TIM_Base_MspInit+0x34>)
 80005f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f8:	2201      	movs	r2, #1
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b089      	sub	sp, #36	@ 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	240c      	movs	r4, #12
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f002 fc48 	bl	8002eb4 <memset>
  if(htim->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	429a      	cmp	r2, r3
 800062e:	d122      	bne.n	8000676 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <HAL_TIM_MspPostInit+0x74>)
 8000632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_TIM_MspPostInit+0x74>)
 8000636:	2101      	movs	r1, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <HAL_TIM_MspPostInit+0x74>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000640:	2201      	movs	r2, #1
 8000642:	4013      	ands	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2220      	movs	r2, #32
 800064e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2202      	movs	r2, #2
 8000654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2201      	movs	r2, #1
 8000666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	187a      	adds	r2, r7, r1
 800066a:	23a0      	movs	r3, #160	@ 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fbcf 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b009      	add	sp, #36	@ 0x24
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	e7fd      	b.n	8000688 <NMI_Handler+0x4>

0800068c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	e7fd      	b.n	8000690 <HardFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f8b8 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <SystemInit+0x4c>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	0512      	lsls	r2, r2, #20
 80006c2:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 80006c4:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <SystemInit+0x50>)
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	58d2      	ldr	r2, [r2, r3]
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	025b      	lsls	r3, r3, #9
 80006ce:	401a      	ands	r2, r3
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	025b      	lsls	r3, r3, #9
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d112      	bne.n	80006fe <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <SystemInit+0x50>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	4013      	ands	r3, r2
 80006e0:	2bcc      	cmp	r3, #204	@ 0xcc
 80006e2:	d00c      	beq.n	80006fe <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <SystemInit+0x50>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	22ff      	movs	r2, #255	@ 0xff
 80006ea:	4013      	ands	r3, r2
 80006ec:	2baa      	cmp	r3, #170	@ 0xaa
 80006ee:	d006      	beq.n	80006fe <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <SystemInit+0x50>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <SystemInit+0x50>)
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	02c9      	lsls	r1, r1, #11
 80006fa:	430a      	orrs	r2, r1
 80006fc:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	40022000 	.word	0x40022000

0800070c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000710:	f7ff ffd2 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	@ (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	@ (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073a:	f002 fbc3 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fd6f 	bl	8000220 <main>

08000742 <LoopForever>:

LoopForever:
  b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000750:	08002fc0 	.word	0x08002fc0
  ldr r2, =_sbss
 8000754:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000758:	200000e8 	.word	0x200000e8

0800075c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC_COMP1_2_IRQHandler>

0800075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076a:	2003      	movs	r0, #3
 800076c:	f000 f80e 	bl	800078c <HAL_InitTick>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d003      	beq.n	800077c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e001      	b.n	8000780 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800077c:	f7ff ff06 	bl	800058c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000794:	230f      	movs	r3, #15
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HAL_InitTick+0x88>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d02b      	beq.n	80007fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <HAL_InitTick+0x8c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_InitTick+0x88>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	@ 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fca9 	bl	8000108 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fca4 	bl	8000108 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f909 	bl	80009da <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d112      	bne.n	80007f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d80a      	bhi.n	80007e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2301      	movs	r3, #1
 80007d6:	425b      	negs	r3, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 f8e8 	bl	80009b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <HAL_InitTick+0x90>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	e00d      	b.n	8000804 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007e8:	230f      	movs	r3, #15
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e008      	b.n	8000804 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f2:	230f      	movs	r3, #15
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e003      	b.n	8000804 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000804:	230f      	movs	r3, #15
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	781b      	ldrb	r3, [r3, #0]
}
 800080a:	0018      	movs	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	b005      	add	sp, #20
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000018 	.word	0x20000018
 8000818:	20000010 	.word	0x20000010
 800081c:	20000014 	.word	0x20000014

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <HAL_IncTick+0x18>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <HAL_IncTick+0x1c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	18d2      	adds	r2, r2, r3
 800082e:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <HAL_IncTick+0x18>)
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000e4 	.word	0x200000e4
 800083c:	20000018 	.word	0x20000018

08000840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <HAL_GetTick+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	200000e4 	.word	0x200000e4

08000854 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <HAL_SuspendTick+0x18>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <HAL_SuspendTick+0x18>)
 800085e:	2102      	movs	r1, #2
 8000860:	438a      	bics	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <HAL_ResumeTick+0x18>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <HAL_ResumeTick+0x18>)
 800087a:	2102      	movs	r1, #2
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	e000e010 	.word	0xe000e010

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a0:	d828      	bhi.n	80008f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000960 <__NVIC_SetPriority+0xd4>)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	33c0      	adds	r3, #192	@ 0xc0
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	589b      	ldr	r3, [r3, r2]
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	0011      	movs	r1, r2
 80008b8:	2203      	movs	r2, #3
 80008ba:	400a      	ands	r2, r1
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	21ff      	movs	r1, #255	@ 0xff
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	22ff      	movs	r2, #255	@ 0xff
 80008d0:	401a      	ands	r2, r3
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	2303      	movs	r3, #3
 80008da:	4003      	ands	r3, r0
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	481f      	ldr	r0, [pc, #124]	@ (8000960 <__NVIC_SetPriority+0xd4>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	089b      	lsrs	r3, r3, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	33c0      	adds	r3, #192	@ 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f2:	e031      	b.n	8000958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <__NVIC_SetPriority+0xd8>)
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0019      	movs	r1, r3
 80008fc:	230f      	movs	r3, #15
 80008fe:	400b      	ands	r3, r1
 8000900:	3b08      	subs	r3, #8
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3306      	adds	r3, #6
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1dfa      	adds	r2, r7, #7
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	0011      	movs	r1, r2
 8000914:	2203      	movs	r2, #3
 8000916:	400a      	ands	r2, r1
 8000918:	00d2      	lsls	r2, r2, #3
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	43d2      	mvns	r2, r2
 8000922:	401a      	ands	r2, r3
 8000924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	22ff      	movs	r2, #255	@ 0xff
 800092c:	401a      	ands	r2, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	2303      	movs	r3, #3
 8000936:	4003      	ands	r3, r0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001c      	movs	r4, r3
 8000944:	230f      	movs	r3, #15
 8000946:	4023      	ands	r3, r4
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	3306      	adds	r3, #6
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	18c3      	adds	r3, r0, r3
 8000954:	3304      	adds	r3, #4
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	045b      	lsls	r3, r3, #17
 8000978:	429a      	cmp	r2, r3
 800097a:	d301      	bcc.n	8000980 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097c:	2301      	movs	r3, #1
 800097e:	e010      	b.n	80009a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <SysTick_Config+0x44>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	3a01      	subs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2103      	movs	r1, #3
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ff7c 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <SysTick_Config+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SysTick_Config+0x44>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	210f      	movs	r1, #15
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	1c02      	adds	r2, r0, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffbf 	bl	8000968 <SysTick_Config>
 80009ea:	0003      	movs	r3, r0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e091      	b.n	8000b2a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <HAL_DMA_Init+0x140>)
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d810      	bhi.n	8000a34 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a48      	ldr	r2, [pc, #288]	@ (8000b38 <HAL_DMA_Init+0x144>)
 8000a18:	4694      	mov	ip, r2
 8000a1a:	4463      	add	r3, ip
 8000a1c:	2114      	movs	r1, #20
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fb72 	bl	8000108 <__udivsi3>
 8000a24:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a26:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a43      	ldr	r2, [pc, #268]	@ (8000b3c <HAL_DMA_Init+0x148>)
 8000a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a32:	e00f      	b.n	8000a54 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a41      	ldr	r2, [pc, #260]	@ (8000b40 <HAL_DMA_Init+0x14c>)
 8000a3a:	4694      	mov	ip, r2
 8000a3c:	4463      	add	r3, ip
 8000a3e:	2114      	movs	r1, #20
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fb61 	bl	8000108 <__udivsi3>
 8000a46:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a48:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a3c      	ldr	r2, [pc, #240]	@ (8000b44 <HAL_DMA_Init+0x150>)
 8000a52:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2225      	movs	r2, #37	@ 0x25
 8000a58:	2102      	movs	r1, #2
 8000a5a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4938      	ldr	r1, [pc, #224]	@ (8000b48 <HAL_DMA_Init+0x154>)
 8000a68:	400a      	ands	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6819      	ldr	r1, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 f8d9 	bl	8000c5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	01db      	lsls	r3, r3, #7
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d102      	bne.n	8000abc <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac4:	21ff      	movs	r1, #255	@ 0xff
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ad2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d011      	beq.n	8000b00 <HAL_DMA_Init+0x10c>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d80d      	bhi.n	8000b00 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f902 	bl	8000cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	e008      	b.n	8000b12 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2225      	movs	r2, #37	@ 0x25
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2224      	movs	r2, #36	@ 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40020407 	.word	0x40020407
 8000b38:	bffdfff8 	.word	0xbffdfff8
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	bffdfbf8 	.word	0xbffdfbf8
 8000b44:	40020400 	.word	0x40020400
 8000b48:	ffff800f 	.word	0xffff800f

08000b4c <HAL_DMA_Start>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2317      	movs	r3, #23
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2224      	movs	r2, #36	@ 0x24
 8000b66:	5c9b      	ldrb	r3, [r3, r2]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <HAL_DMA_Start+0x24>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e035      	b.n	8000bdc <HAL_DMA_Start+0x90>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2224      	movs	r2, #36	@ 0x24
 8000b74:	2101      	movs	r1, #1
 8000b76:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2225      	movs	r2, #37	@ 0x25
 8000b7c:	5c9b      	ldrb	r3, [r3, r2]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d11d      	bne.n	8000bc0 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2225      	movs	r2, #37	@ 0x25
 8000b88:	2102      	movs	r1, #2
 8000b8a:	5499      	strb	r1, [r3, r2]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f81b 	bl	8000be4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e00a      	b.n	8000bd6 <HAL_DMA_Start+0x8a>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2224      	movs	r2, #36	@ 0x24
 8000bca:	2100      	movs	r1, #0
 8000bcc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000bce:	2317      	movs	r3, #23
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000bd6:	2317      	movs	r3, #23
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000bfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000c0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	221c      	movs	r2, #28
 8000c14:	401a      	ands	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b10      	cmp	r3, #16
 8000c30:	d108      	bne.n	8000c44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c42:	e007      	b.n	8000c54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d814      	bhi.n	8000c9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8000c7a:	189a      	adds	r2, r3, r2
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	001a      	movs	r2, r3
 8000c86:	23ff      	movs	r3, #255	@ 0xff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	3b08      	subs	r3, #8
 8000c8c:	2114      	movs	r1, #20
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff fa3a 	bl	8000108 <__udivsi3>
 8000c94:	0003      	movs	r3, r0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e014      	b.n	8000cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4a11      	ldr	r2, [pc, #68]	@ (8000ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8000ca4:	189a      	adds	r2, r3, r2
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	001a      	movs	r2, r3
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	2114      	movs	r1, #20
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fa25 	bl	8000108 <__udivsi3>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	3307      	adds	r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8000cc8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	221f      	movs	r2, #31
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020407 	.word	0x40020407
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	4002081c 	.word	0x4002081c
 8000cec:	40020880 	.word	0x40020880

08000cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	22ff      	movs	r2, #255	@ 0xff
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000d06:	4694      	mov	ip, r2
 8000d08:	4463      	add	r3, ip
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000d16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2201      	movs	r2, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	1000823f 	.word	0x1000823f
 8000d34:	40020940 	.word	0x40020940

08000d38 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator(DMA_HandleTypeDef *hdma,
                                                      HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
 8000d42:	230e      	movs	r3, #14
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	2125      	movs	r1, #37	@ 0x25
 8000d4a:	5c52      	ldrb	r2, [r2, r1]
 8000d4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if (hdma->DMAmuxRequestGen == 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <HAL_DMAEx_ConfigMuxRequestGenerator+0x2e>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2240      	movs	r2, #64	@ 0x40
 8000d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* error status */
    status = HAL_ERROR;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e031      	b.n	8000dca <HAL_DMAEx_ConfigMuxRequestGenerator+0x92>
  }
  else if (((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	025b      	lsls	r3, r3, #9
 8000d70:	4013      	ands	r3, r2
 8000d72:	d123      	bne.n	8000dbc <HAL_DMAEx_ConfigMuxRequestGenerator+0x84>
 8000d74:	230e      	movs	r3, #14
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d11e      	bne.n	8000dbc <HAL_DMAEx_ConfigMuxRequestGenerator+0x84>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2224      	movs	r2, #36	@ 0x24
 8000d82:	5c9b      	ldrb	r3, [r3, r2]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_DMAEx_ConfigMuxRequestGenerator+0x54>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e021      	b.n	8000dd0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x98>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2224      	movs	r2, #36	@ 0x24
 8000d90:	2101      	movs	r1, #1
 8000d92:	5499      	strb	r1, [r3, r2]

    /* Set the request generator new parameters*/
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
                                   ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos) | \
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8000da0:	431a      	orrs	r2, r3
 8000da2:	0011      	movs	r1, r2
                                   pRequestGeneratorConfig->Polarity;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                   ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos) | \
 8000dac:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
 8000dae:	601a      	str	r2, [r3, #0]
    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2224      	movs	r2, #36	@ 0x24
 8000db4:	2100      	movs	r1, #0
 8000db6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e009      	b.n	8000dd0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x98>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* error status */
    status = HAL_ERROR;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000dca:	230f      	movs	r3, #15
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if ((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2225      	movs	r2, #37	@ 0x25
 8000de4:	5c9b      	ldrb	r3, [r3, r2]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00e      	beq.n	8000e0a <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00a      	beq.n	8000e0a <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
  {

    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dfe:	2180      	movs	r1, #128	@ 0x80
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_DMAEx_EnableMuxRequestGenerator+0x34>
  }
  else
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
  }
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e153      	b.n	80010cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <HAL_GPIO_Init+0x28>
 8000e3a:	e144      	b.n	80010c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2203      	movs	r2, #3
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x40>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2207      	movs	r2, #7
 8000f10:	4013      	ands	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2107      	movs	r1, #7
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	6939      	ldr	r1, [r7, #16]
 8000f44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	43da      	mvns	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	401a      	ands	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	23c0      	movs	r3, #192	@ 0xc0
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	d100      	bne.n	8000f88 <HAL_GPIO_Init+0x174>
 8000f86:	e09e      	b.n	80010c6 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f88:	4a56      	ldr	r2, [pc, #344]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3318      	adds	r3, #24
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	589b      	ldr	r3, [r3, r2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	23a0      	movs	r3, #160	@ 0xa0
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d01f      	beq.n	8000ff6 <HAL_GPIO_Init+0x1e2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80010e8 <HAL_GPIO_Init+0x2d4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_GPIO_Init+0x1de>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80010ec <HAL_GPIO_Init+0x2d8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x1da>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a49      	ldr	r2, [pc, #292]	@ (80010f0 <HAL_GPIO_Init+0x2dc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x1d6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <HAL_GPIO_Init+0x2e0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x1d2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	@ (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x1ce>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	00d2      	lsls	r2, r2, #3
 8001000:	4093      	lsls	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001008:	4936      	ldr	r1, [pc, #216]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3318      	adds	r3, #24
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	035b      	lsls	r3, r3, #13
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	039b      	lsls	r3, r3, #14
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800106a:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 800106c:	2384      	movs	r3, #132	@ 0x84
 800106e:	58d3      	ldr	r3, [r2, r3]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	029b      	lsls	r3, r3, #10
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001090:	4914      	ldr	r1, [pc, #80]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001092:	2284      	movs	r2, #132	@ 0x84
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001098:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	58d3      	ldr	r3, [r2, r3]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	4013      	ands	r3, r2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010be:	4909      	ldr	r1, [pc, #36]	@ (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010c0:	2280      	movs	r2, #128	@ 0x80
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	40da      	lsrs	r2, r3
 80010d4:	1e13      	subs	r3, r2, #0
 80010d6:	d000      	beq.n	80010da <HAL_GPIO_Init+0x2c6>
 80010d8:	e6a4      	b.n	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021800 	.word	0x40021800
 80010e8:	50000400 	.word	0x50000400
 80010ec:	50000800 	.word	0x50000800
 80010f0:	50000c00 	.word	0x50000c00
 80010f4:	50001000 	.word	0x50001000
 80010f8:	50001400 	.word	0x50001400

080010fc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000a      	movs	r2, r1
 8001106:	1cfb      	adds	r3, r7, #3
 8001108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10d      	bne.n	800112c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_PWR_EnterSLEEPMode+0x6c>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	401a      	ands	r2, r3
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	429a      	cmp	r2, r3
 8001120:	d10f      	bne.n	8001142 <HAL_PWR_EnterSLEEPMode+0x46>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001122:	f000 f89f 	bl	8001264 <HAL_PWREx_DisableLowPowerRunMode>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d00b      	beq.n	8001142 <HAL_PWR_EnterSLEEPMode+0x46>
      {
        return ;
 800112a:	e019      	b.n	8001160 <HAL_PWR_EnterSLEEPMode+0x64>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_PWR_EnterSLEEPMode+0x6c>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	401a      	ands	r2, r3
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	429a      	cmp	r2, r3
 800113c:	d001      	beq.n	8001142 <HAL_PWR_EnterSLEEPMode+0x46>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800113e:	f000 f883 	bl	8001248 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_PWR_EnterSLEEPMode+0x70>)
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_PWR_EnterSLEEPMode+0x70>)
 8001148:	2104      	movs	r1, #4
 800114a:	438a      	bics	r2, r1
 800114c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800114e:	1cfb      	adds	r3, r7, #3
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_PWR_EnterSLEEPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001156:	bf30      	wfi
 8001158:	e002      	b.n	8001160 <HAL_PWR_EnterSLEEPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800115a:	bf40      	sev
    __WFE();
 800115c:	bf20      	wfe
    __WFE();
 800115e:	bf20      	wfe
  }
}
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40007000 	.word	0x40007000
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	429a      	cmp	r2, r3
 8001180:	d137      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	23c0      	movs	r3, #192	@ 0xc0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	401a      	ands	r2, r3
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	429a      	cmp	r2, r3
 8001192:	d040      	beq.n	8001216 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800119a:	401a      	ands	r2, r3
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0089      	lsls	r1, r1, #2
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2232      	movs	r2, #50	@ 0x32
 80011ac:	4353      	muls	r3, r2
 80011ae:	491f      	ldr	r1, [pc, #124]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7fe ffa9 	bl	8000108 <__udivsi3>
 80011b6:	0003      	movs	r3, r0
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011bc:	e002      	b.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	401a      	ands	r2, r3
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d102      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x6c>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011dc:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	401a      	ands	r2, r3
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d113      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e012      	b.n	8001218 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	23c0      	movs	r3, #192	@ 0xc0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	401a      	ands	r2, r3
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	429a      	cmp	r2, r3
 8001202:	d008      	beq.n	8001216 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800120a:	401a      	ands	r2, r3
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800120e:	2180      	movs	r1, #128	@ 0x80
 8001210:	00c9      	lsls	r1, r1, #3
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40007000 	.word	0x40007000
 8001224:	fffff9ff 	.word	0xfffff9ff
 8001228:	20000010 	.word	0x20000010
 800122c:	000f4240 	.word	0x000f4240

08001230 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_PWREx_GetVoltageRange+0x14>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4013      	ands	r3, r2
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40007000 	.word	0x40007000

08001248 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	01c9      	lsls	r1, r1, #7
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001270:	4917      	ldr	r1, [pc, #92]	@ (80012d0 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2232      	movs	r2, #50	@ 0x32
 800127c:	4353      	muls	r3, r2
 800127e:	4916      	ldr	r1, [pc, #88]	@ (80012d8 <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 8001280:	0018      	movs	r0, r3
 8001282:	f7fe ff41 	bl	8000108 <__udivsi3>
 8001286:	0003      	movs	r3, r0
 8001288:	3301      	adds	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800128c:	e002      	b.n	8001294 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3b01      	subs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	401a      	ands	r2, r3
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d102      	bne.n	80012ac <HAL_PWREx_DisableLowPowerRunMode+0x48>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	401a      	ands	r2, r3
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d101      	bne.n	80012c2 <HAL_PWREx_DisableLowPowerRunMode+0x5e>
  {
    return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e000      	b.n	80012c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40007000 	.word	0x40007000
 80012d0:	ffffbfff 	.word	0xffffbfff
 80012d4:	20000010 	.word	0x20000010
 80012d8:	000f4240 	.word	0x000f4240

080012dc <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  *           @arg @ref PWR_FLASHPD_STOP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_FLASH_POWERDOWN(PowerMode));

  PWR->CR1 |= PowerMode;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001304:	4bc9      	ldr	r3, [pc, #804]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2238      	movs	r2, #56	@ 0x38
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130e:	4bc7      	ldr	r3, [pc, #796]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2203      	movs	r2, #3
 8001314:	4013      	ands	r3, r2
 8001316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_RCC_OscConfig+0x28>
 8001322:	e0ef      	b.n	8001504 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_RCC_OscConfig+0x3e>
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b18      	cmp	r3, #24
 800132e:	d000      	beq.n	8001332 <HAL_RCC_OscConfig+0x36>
 8001330:	e093      	b.n	800145a <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d000      	beq.n	800133a <HAL_RCC_OscConfig+0x3e>
 8001338:	e08f      	b.n	800145a <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133a:	4bbc      	ldr	r3, [pc, #752]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d006      	beq.n	8001352 <HAL_RCC_OscConfig+0x56>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f000 fbf2 	bl	8001b36 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001356:	4bb5      	ldr	r3, [pc, #724]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2108      	movs	r1, #8
 800135c:	400b      	ands	r3, r1
 800135e:	d004      	beq.n	800136a <HAL_RCC_OscConfig+0x6e>
 8001360:	4bb2      	ldr	r3, [pc, #712]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	21f0      	movs	r1, #240	@ 0xf0
 8001366:	400b      	ands	r3, r1
 8001368:	e005      	b.n	8001376 <HAL_RCC_OscConfig+0x7a>
 800136a:	49b0      	ldr	r1, [pc, #704]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800136c:	2394      	movs	r3, #148	@ 0x94
 800136e:	58cb      	ldr	r3, [r1, r3]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	21f0      	movs	r1, #240	@ 0xf0
 8001374:	400b      	ands	r3, r1
 8001376:	4293      	cmp	r3, r2
 8001378:	d225      	bcs.n	80013c6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	0018      	movs	r0, r3
 8001380:	f000 fd6e 	bl	8001e60 <RCC_SetFlashLatencyFromMSIRange>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d002      	beq.n	800138e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	f000 fbd4 	bl	8001b36 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138e:	4ba7      	ldr	r3, [pc, #668]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4ba6      	ldr	r3, [pc, #664]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001394:	2108      	movs	r1, #8
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4ba4      	ldr	r3, [pc, #656]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	22f0      	movs	r2, #240	@ 0xf0
 80013a0:	4393      	bics	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a8:	4ba0      	ldr	r3, [pc, #640]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ae:	4b9f      	ldr	r3, [pc, #636]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a9f      	ldr	r2, [pc, #636]	@ (8001630 <HAL_RCC_OscConfig+0x334>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	4b9b      	ldr	r3, [pc, #620]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	e027      	b.n	8001416 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c6:	4b99      	ldr	r3, [pc, #612]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b98      	ldr	r3, [pc, #608]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013cc:	2108      	movs	r1, #8
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	4b96      	ldr	r3, [pc, #600]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	22f0      	movs	r2, #240	@ 0xf0
 80013d8:	4393      	bics	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e0:	4b92      	ldr	r3, [pc, #584]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e6:	4b91      	ldr	r3, [pc, #580]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a91      	ldr	r2, [pc, #580]	@ (8001630 <HAL_RCC_OscConfig+0x334>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	021a      	lsls	r2, r3, #8
 80013f6:	4b8d      	ldr	r3, [pc, #564]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fd2a 	bl	8001e60 <RCC_SetFlashLatencyFromMSIRange>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d002      	beq.n	8001416 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f000 fb90 	bl	8001b36 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001416:	f000 fc87 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 800141a:	0001      	movs	r1, r0
 800141c:	4b83      	ldr	r3, [pc, #524]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800141e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	220f      	movs	r2, #15
 8001424:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001426:	4a83      	ldr	r2, [pc, #524]	@ (8001634 <HAL_RCC_OscConfig+0x338>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800142a:	001a      	movs	r2, r3
 800142c:	231f      	movs	r3, #31
 800142e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001430:	000a      	movs	r2, r1
 8001432:	40da      	lsrs	r2, r3
 8001434:	4b80      	ldr	r3, [pc, #512]	@ (8001638 <HAL_RCC_OscConfig+0x33c>)
 8001436:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001438:	4b80      	ldr	r3, [pc, #512]	@ (800163c <HAL_RCC_OscConfig+0x340>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	250f      	movs	r5, #15
 800143e:	197c      	adds	r4, r7, r5
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff f9a3 	bl	800078c <HAL_InitTick>
 8001446:	0003      	movs	r3, r0
 8001448:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800144a:	197b      	adds	r3, r7, r5
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d057      	beq.n	8001502 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001452:	197b      	adds	r3, r7, r5
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f000 fb6e 	bl	8001b36 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d035      	beq.n	80014ce <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001462:	4b72      	ldr	r3, [pc, #456]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b71      	ldr	r3, [pc, #452]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146e:	f7ff f9e7 	bl	8000840 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001476:	e009      	b.n	800148c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001478:	f7ff f9e2 	bl	8000840 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d902      	bls.n	800148c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	f000 fb55 	bl	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148c:	4b67      	ldr	r3, [pc, #412]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001496:	4b65      	ldr	r3, [pc, #404]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b64      	ldr	r3, [pc, #400]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800149c:	2108      	movs	r1, #8
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	4b62      	ldr	r3, [pc, #392]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	22f0      	movs	r2, #240	@ 0xf0
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b0:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b6:	4b5d      	ldr	r3, [pc, #372]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001630 <HAL_RCC_OscConfig+0x334>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	021a      	lsls	r2, r3, #8
 80014c6:	4b59      	ldr	r3, [pc, #356]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	e01a      	b.n	8001504 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ce:	4b57      	ldr	r3, [pc, #348]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b56      	ldr	r3, [pc, #344]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	438a      	bics	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014da:	f7ff f9b1 	bl	8000840 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80014e4:	f7ff f9ac 	bl	8000840 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e31f      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f6:	4b4d      	ldr	r3, [pc, #308]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d1f1      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1e8>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001502:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x214>
 800150e:	e065      	b.n	80015dc <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x226>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b18      	cmp	r3, #24
 800151a:	d10e      	bne.n	800153a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d10b      	bne.n	800153a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	4b42      	ldr	r3, [pc, #264]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d055      	beq.n	80015da <HAL_RCC_OscConfig+0x2de>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d151      	bne.n	80015da <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e2fd      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	025b      	lsls	r3, r3, #9
 8001542:	429a      	cmp	r2, r3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_OscConfig+0x25a>
 8001546:	4b39      	ldr	r3, [pc, #228]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b38      	ldr	r3, [pc, #224]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	0249      	lsls	r1, r1, #9
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e013      	b.n	800157e <HAL_RCC_OscConfig+0x282>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	23a0      	movs	r3, #160	@ 0xa0
 800155c:	02db      	lsls	r3, r3, #11
 800155e:	429a      	cmp	r2, r3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_OscConfig+0x276>
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001568:	21a0      	movs	r1, #160	@ 0xa0
 800156a:	02c9      	lsls	r1, r1, #11
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e005      	b.n	800157e <HAL_RCC_OscConfig+0x282>
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001578:	4931      	ldr	r1, [pc, #196]	@ (8001640 <HAL_RCC_OscConfig+0x344>)
 800157a:	400a      	ands	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d014      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff f95b 	bl	8000840 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001590:	f7ff f956 	bl	8000840 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e2c9      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x294>
 80015ae:	e015      	b.n	80015dc <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff f946 	bl	8000840 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80015ba:	f7ff f941 	bl	8000840 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	@ 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e2b4      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x2be>
 80015d8:	e000      	b.n	80015dc <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d100      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2ec>
 80015e6:	e074      	b.n	80016d2 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x2fe>
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b18      	cmp	r3, #24
 80015f2:	d129      	bne.n	8001648 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d126      	bne.n	8001648 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4013      	ands	r3, r2
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x316>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e291      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <HAL_RCC_OscConfig+0x348>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061a      	lsls	r2, r3, #24
 8001622:	4b02      	ldr	r3, [pc, #8]	@ (800162c <HAL_RCC_OscConfig+0x330>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e053      	b.n	80016d2 <HAL_RCC_OscConfig+0x3d6>
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	ffff00ff 	.word	0xffff00ff
 8001634:	08002f24 	.word	0x08002f24
 8001638:	20000010 	.word	0x20000010
 800163c:	20000014 	.word	0x20000014
 8001640:	fffaffff 	.word	0xfffaffff
 8001644:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d026      	beq.n	800169e <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4bc7      	ldr	r3, [pc, #796]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4bc6      	ldr	r3, [pc, #792]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	0049      	lsls	r1, r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff f8ef 	bl	8000840 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001668:	f7ff f8ea 	bl	8000840 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e25d      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	4bbd      	ldr	r3, [pc, #756]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4013      	ands	r3, r2
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4bba      	ldr	r3, [pc, #744]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4aba      	ldr	r2, [pc, #744]	@ (8001974 <HAL_RCC_OscConfig+0x678>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061a      	lsls	r2, r3, #24
 8001696:	4bb6      	ldr	r3, [pc, #728]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	e019      	b.n	80016d2 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4bb4      	ldr	r3, [pc, #720]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4bb3      	ldr	r3, [pc, #716]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80016a4:	49b4      	ldr	r1, [pc, #720]	@ (8001978 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f8c9 	bl	8000840 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016b4:	f7ff f8c4 	bl	8000840 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e237      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c6:	4baa      	ldr	r3, [pc, #680]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2208      	movs	r2, #8
 80016d8:	4013      	ands	r3, r2
 80016da:	d051      	beq.n	8001780 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d031      	beq.n	8001748 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d108      	bne.n	80016fe <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80016ec:	4aa0      	ldr	r2, [pc, #640]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80016ee:	2394      	movs	r3, #148	@ 0x94
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	499f      	ldr	r1, [pc, #636]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80016f4:	2204      	movs	r2, #4
 80016f6:	4393      	bics	r3, r2
 80016f8:	2294      	movs	r2, #148	@ 0x94
 80016fa:	508b      	str	r3, [r1, r2]
 80016fc:	e007      	b.n	800170e <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80016fe:	4a9c      	ldr	r2, [pc, #624]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001700:	2394      	movs	r3, #148	@ 0x94
 8001702:	58d3      	ldr	r3, [r2, r3]
 8001704:	499a      	ldr	r1, [pc, #616]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001706:	2204      	movs	r2, #4
 8001708:	4313      	orrs	r3, r2
 800170a:	2294      	movs	r2, #148	@ 0x94
 800170c:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4a98      	ldr	r2, [pc, #608]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001710:	2394      	movs	r3, #148	@ 0x94
 8001712:	58d3      	ldr	r3, [r2, r3]
 8001714:	4996      	ldr	r1, [pc, #600]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001716:	2201      	movs	r2, #1
 8001718:	4313      	orrs	r3, r2
 800171a:	2294      	movs	r2, #148	@ 0x94
 800171c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff f88f 	bl	8000840 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff f88a 	bl	8000840 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b11      	cmp	r3, #17
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1fd      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800173a:	4a8d      	ldr	r2, [pc, #564]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800173c:	2394      	movs	r3, #148	@ 0x94
 800173e:	58d3      	ldr	r3, [r2, r3]
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x42c>
 8001746:	e01b      	b.n	8001780 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001748:	4a89      	ldr	r2, [pc, #548]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800174a:	2394      	movs	r3, #148	@ 0x94
 800174c:	58d3      	ldr	r3, [r2, r3]
 800174e:	4988      	ldr	r1, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001750:	2201      	movs	r2, #1
 8001752:	4393      	bics	r3, r2
 8001754:	2294      	movs	r2, #148	@ 0x94
 8001756:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff f872 	bl	8000840 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff f86d 	bl	8000840 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b11      	cmp	r3, #17
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1e0      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001774:	4a7e      	ldr	r2, [pc, #504]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001776:	2394      	movs	r3, #148	@ 0x94
 8001778:	58d3      	ldr	r3, [r2, r3]
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x490>
 800178a:	e10d      	b.n	80019a8 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178c:	201f      	movs	r0, #31
 800178e:	183b      	adds	r3, r7, r0
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001794:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001796:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	4013      	ands	r3, r2
 800179e:	d110      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80017a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017a4:	4b72      	ldr	r3, [pc, #456]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	0549      	lsls	r1, r1, #21
 80017aa:	430a      	orrs	r2, r1
 80017ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ae:	4b70      	ldr	r3, [pc, #448]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80017b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	055b      	lsls	r3, r3, #21
 80017b6:	4013      	ands	r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4b6e      	ldr	r3, [pc, #440]	@ (800197c <HAL_RCC_OscConfig+0x680>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ce:	4b6b      	ldr	r3, [pc, #428]	@ (800197c <HAL_RCC_OscConfig+0x680>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_OscConfig+0x680>)
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	0049      	lsls	r1, r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f830 	bl	8000840 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff f82b 	bl	8000840 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e19e      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b60      	ldr	r3, [pc, #384]	@ (800197c <HAL_RCC_OscConfig+0x680>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	d01e      	beq.n	800184c <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d010      	beq.n	800183a <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001818:	4a55      	ldr	r2, [pc, #340]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800181a:	2390      	movs	r3, #144	@ 0x90
 800181c:	58d3      	ldr	r3, [r2, r3]
 800181e:	4954      	ldr	r1, [pc, #336]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001820:	2204      	movs	r2, #4
 8001822:	4313      	orrs	r3, r2
 8001824:	2290      	movs	r2, #144	@ 0x90
 8001826:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001828:	4a51      	ldr	r2, [pc, #324]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800182a:	2390      	movs	r3, #144	@ 0x90
 800182c:	58d3      	ldr	r3, [r2, r3]
 800182e:	4950      	ldr	r1, [pc, #320]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001830:	2201      	movs	r2, #1
 8001832:	4313      	orrs	r3, r2
 8001834:	2290      	movs	r2, #144	@ 0x90
 8001836:	508b      	str	r3, [r1, r2]
 8001838:	e018      	b.n	800186c <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800183a:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800183c:	2390      	movs	r3, #144	@ 0x90
 800183e:	58d3      	ldr	r3, [r2, r3]
 8001840:	494b      	ldr	r1, [pc, #300]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001842:	2201      	movs	r2, #1
 8001844:	4313      	orrs	r3, r2
 8001846:	2290      	movs	r2, #144	@ 0x90
 8001848:	508b      	str	r3, [r1, r2]
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800184c:	4a48      	ldr	r2, [pc, #288]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800184e:	2390      	movs	r3, #144	@ 0x90
 8001850:	58d3      	ldr	r3, [r2, r3]
 8001852:	4947      	ldr	r1, [pc, #284]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001854:	2201      	movs	r2, #1
 8001856:	4393      	bics	r3, r2
 8001858:	2290      	movs	r2, #144	@ 0x90
 800185a:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800185c:	4a44      	ldr	r2, [pc, #272]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800185e:	2390      	movs	r3, #144	@ 0x90
 8001860:	58d3      	ldr	r3, [r2, r3]
 8001862:	4943      	ldr	r1, [pc, #268]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001864:	2204      	movs	r2, #4
 8001866:	4393      	bics	r3, r2
 8001868:	2290      	movs	r2, #144	@ 0x90
 800186a:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d04f      	beq.n	8001914 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7fe ffe4 	bl	8000840 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7fe ffdf 	bl	8000840 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a3d      	ldr	r2, [pc, #244]	@ (8001980 <HAL_RCC_OscConfig+0x684>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e151      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001892:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001894:	2390      	movs	r3, #144	@ 0x90
 8001896:	58d3      	ldr	r3, [r2, r3]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d0ef      	beq.n	800187e <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	4013      	ands	r3, r2
 80018a6:	d01a      	beq.n	80018de <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018a8:	4a31      	ldr	r2, [pc, #196]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80018aa:	2390      	movs	r3, #144	@ 0x90
 80018ac:	58d3      	ldr	r3, [r2, r3]
 80018ae:	4930      	ldr	r1, [pc, #192]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	4313      	orrs	r3, r2
 80018b4:	2290      	movs	r2, #144	@ 0x90
 80018b6:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018b8:	e009      	b.n	80018ce <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7fe ffc1 	bl	8000840 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001980 <HAL_RCC_OscConfig+0x684>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e133      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018ce:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80018d0:	2390      	movs	r3, #144	@ 0x90
 80018d2:	58d2      	ldr	r2, [r2, r3]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4013      	ands	r3, r2
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x5be>
 80018dc:	e059      	b.n	8001992 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018de:	4a24      	ldr	r2, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80018e0:	2390      	movs	r3, #144	@ 0x90
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	4922      	ldr	r1, [pc, #136]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	4393      	bics	r3, r2
 80018ea:	2290      	movs	r2, #144	@ 0x90
 80018ec:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018ee:	e009      	b.n	8001904 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7fe ffa6 	bl	8000840 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4a21      	ldr	r2, [pc, #132]	@ (8001980 <HAL_RCC_OscConfig+0x684>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e118      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001904:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001906:	2390      	movs	r3, #144	@ 0x90
 8001908:	58d2      	ldr	r2, [r2, r3]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	4013      	ands	r3, r2
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5f4>
 8001912:	e03e      	b.n	8001992 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7fe ff94 	bl	8000840 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7fe ff8f 	bl	8000840 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a15      	ldr	r2, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x684>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e101      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001934:	2390      	movs	r3, #144	@ 0x90
 8001936:	58d3      	ldr	r3, [r2, r3]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d1ef      	bne.n	800191e <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800193e:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001940:	2390      	movs	r3, #144	@ 0x90
 8001942:	58d3      	ldr	r3, [r2, r3]
 8001944:	2280      	movs	r2, #128	@ 0x80
 8001946:	4013      	ands	r3, r2
 8001948:	d023      	beq.n	8001992 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 800194c:	2390      	movs	r3, #144	@ 0x90
 800194e:	58d3      	ldr	r3, [r2, r3]
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <HAL_RCC_OscConfig+0x674>)
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	4393      	bics	r3, r2
 8001956:	2290      	movs	r2, #144	@ 0x90
 8001958:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800195a:	e013      	b.n	8001984 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7fe ff70 	bl	8000840 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_RCC_OscConfig+0x684>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d90b      	bls.n	8001984 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0e2      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
 8001970:	40021000 	.word	0x40021000
 8001974:	80ffffff 	.word	0x80ffffff
 8001978:	fffffeff 	.word	0xfffffeff
 800197c:	40007000 	.word	0x40007000
 8001980:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001984:	4a6e      	ldr	r2, [pc, #440]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001986:	2390      	movs	r3, #144	@ 0x90
 8001988:	58d2      	ldr	r2, [r2, r3]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d1e4      	bne.n	800195c <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001992:	231f      	movs	r3, #31
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 800199e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019a0:	4b67      	ldr	r3, [pc, #412]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019a2:	4968      	ldr	r1, [pc, #416]	@ (8001b44 <HAL_RCC_OscConfig+0x848>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	4013      	ands	r3, r2
 80019b0:	d03c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ba:	4a61      	ldr	r2, [pc, #388]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019bc:	2398      	movs	r3, #152	@ 0x98
 80019be:	58d3      	ldr	r3, [r2, r3]
 80019c0:	495f      	ldr	r1, [pc, #380]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	4313      	orrs	r3, r2
 80019c6:	2298      	movs	r2, #152	@ 0x98
 80019c8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7fe ff39 	bl	8000840 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d4:	f7fe ff34 	bl	8000840 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0a7      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e6:	4a56      	ldr	r2, [pc, #344]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019e8:	2398      	movs	r3, #152	@ 0x98
 80019ea:	58d3      	ldr	r3, [r2, r3]
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x6d8>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019f4:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019f6:	2398      	movs	r3, #152	@ 0x98
 80019f8:	58d3      	ldr	r3, [r2, r3]
 80019fa:	4951      	ldr	r1, [pc, #324]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	4393      	bics	r3, r2
 8001a00:	2298      	movs	r2, #152	@ 0x98
 8001a02:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7fe ff1c 	bl	8000840 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0e:	f7fe ff17 	bl	8000840 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e08a      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8001a20:	4a47      	ldr	r2, [pc, #284]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a22:	2398      	movs	r3, #152	@ 0x98
 8001a24:	58d3      	ldr	r3, [r2, r3]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x73a>
 8001a34:	e07e      	b.n	8001b34 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a36:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	@ 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b18      	cmp	r3, #24
 8001a40:	d100      	bne.n	8001a44 <HAL_RCC_OscConfig+0x748>
 8001a42:	e075      	b.n	8001b30 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d156      	bne.n	8001afa <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a52:	493d      	ldr	r1, [pc, #244]	@ (8001b48 <HAL_RCC_OscConfig+0x84c>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7fe fef2 	bl	8000840 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe feed 	bl	8000840 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e060      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	049b      	lsls	r3, r3, #18
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a31      	ldr	r2, [pc, #196]	@ (8001b4c <HAL_RCC_OscConfig+0x850>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aac:	431a      	orrs	r2, r3
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0549      	lsls	r1, r1, #21
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	0449      	lsls	r1, r1, #17
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7fe feb6 	bl	8000840 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe feb1 	bl	8000840 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e024      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x7de>
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001b00:	4911      	ldr	r1, [pc, #68]	@ (8001b48 <HAL_RCC_OscConfig+0x84c>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe fe9b 	bl	8000840 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe fe96 	bl	8000840 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <HAL_RCC_OscConfig+0x844>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x814>
 8001b2e:	e001      	b.n	8001b34 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b008      	add	sp, #32
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	40021000 	.word	0x40021000
 8001b44:	efffffff 	.word	0xefffffff
 8001b48:	feffffff 	.word	0xfeffffff
 8001b4c:	11c1808c 	.word	0x11c1808c

08001b50 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2207      	movs	r2, #7
 8001b60:	4013      	ands	r3, r2
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d911      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b68:	4b68      	ldr	r3, [pc, #416]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	4b66      	ldr	r3, [pc, #408]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b64      	ldr	r3, [pc, #400]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0bb      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x48>
 8001b96:	e064      	b.n	8001c62 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	049b      	lsls	r3, r3, #18
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d138      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0a9      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d12c      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e09d      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d121      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e092      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e086      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4a44      	ldr	r2, [pc, #272]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	2394      	movs	r3, #148	@ 0x94
 8001c02:	58d3      	ldr	r3, [r2, r3]
 8001c04:	2202      	movs	r2, #2
 8001c06:	4013      	ands	r3, r2
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4a40      	ldr	r2, [pc, #256]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	2390      	movs	r3, #144	@ 0x90
 8001c12:	58d3      	ldr	r3, [r2, r3]
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e072      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2207      	movs	r2, #7
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c32:	f7fe fe05 	bl	8000840 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e009      	b.n	8001c50 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7fe fe00 	bl	8000840 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	4a33      	ldr	r2, [pc, #204]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e059      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c50:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2238      	movs	r2, #56	@ 0x38
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d1ec      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a29      	ldr	r2, [pc, #164]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d211      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e028      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a16      	ldr	r2, [pc, #88]	@ (8001d1c <HAL_RCC_ClockConfig+0x1cc>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001cd0:	f000 f82a 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001cd4:	0001      	movs	r1, r0
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	220f      	movs	r2, #15
 8001cde:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001cea:	000a      	movs	r2, r1
 8001cec:	40da      	lsrs	r2, r3
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_RCC_ClockConfig+0x1d4>)
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	250b      	movs	r5, #11
 8001cf4:	197c      	adds	r4, r7, r5
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f7fe fd48 	bl	800078c <HAL_InitTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001d00:	197b      	adds	r3, r7, r5
 8001d02:	781b      	ldrb	r3, [r3, #0]
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	00001388 	.word	0x00001388
 8001d18:	fffff0ff 	.word	0xfffff0ff
 8001d1c:	ffff8fff 	.word	0xffff8fff
 8001d20:	08002f24 	.word	0x08002f24
 8001d24:	20000010 	.word	0x20000010

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2238      	movs	r2, #56	@ 0x38
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d40:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2203      	movs	r2, #3
 8001d46:	4013      	ands	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b18      	cmp	r3, #24
 8001d54:	d125      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d122      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	4013      	ands	r3, r2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8001d66:	4a3a      	ldr	r2, [pc, #232]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d68:	2394      	movs	r3, #148	@ 0x94
 8001d6a:	58d3      	ldr	r3, [r2, r3]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	220f      	movs	r2, #15
 8001d70:	4013      	ands	r3, r2
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d74:	e005      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d76:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	4013      	ands	r3, r2
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	2b0b      	cmp	r3, #11
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8001d8c:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	58d3      	ldr	r3, [r2, r3]
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da0:	e018      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x130>)
 8001daa:	623b      	str	r3, [r7, #32]
 8001dac:	e012      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db4:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x134>)
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d103      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dc0:	23fa      	movs	r3, #250	@ 0xfa
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b28      	cmp	r3, #40	@ 0x28
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b18      	cmp	r3, #24
 8001dd8:	d135      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2203      	movs	r2, #3
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	2207      	movs	r2, #7
 8001dec:	4013      	ands	r3, r2
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d003      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xd8>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0xde>
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x130>)
 8001e02:	61fb      	str	r3, [r7, #28]
        break;
 8001e04:	e005      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x134>)
 8001e08:	61fb      	str	r3, [r7, #28]
        break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	61fb      	str	r3, [r7, #28]
        break;
 8001e10:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	227f      	movs	r2, #127	@ 0x7f
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4353      	muls	r3, r2
 8001e20:	68f9      	ldr	r1, [r7, #12]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7fe f970 	bl	8000108 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x128>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0f5b      	lsrs	r3, r3, #29
 8001e32:	2207      	movs	r2, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	3301      	adds	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	f7fe f963 	bl	8000108 <__udivsi3>
 8001e42:	0003      	movs	r3, r0
 8001e44:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b00a      	add	sp, #40	@ 0x28
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08002f34 	.word	0x08002f34
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	055b      	lsls	r3, r3, #21
 8001e74:	4013      	ands	r3, r2
 8001e76:	d004      	beq.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e78:	f7ff f9da 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e017      	b.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0549      	lsls	r1, r1, #21
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	055b      	lsls	r3, r3, #21
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e9e:	f7ff f9c7 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001eac:	4920      	ldr	r1, [pc, #128]	@ (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d111      	bne.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b80      	cmp	r3, #128	@ 0x80
 8001ec0:	d91c      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001ec6:	d902      	bls.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e016      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b90      	cmp	r3, #144	@ 0x90
 8001ed2:	d902      	bls.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e010      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e00d      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ee4:	d902      	bls.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e007      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b70      	cmp	r3, #112	@ 0x70
 8001ef0:	d102      	bne.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e001      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2207      	movs	r2, #7
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2207      	movs	r2, #7
 8001f14:	4013      	ands	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b006      	add	sp, #24
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e04a      	b.n	8001fe0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	@ 0x3d
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	223c      	movs	r2, #60	@ 0x3c
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe fb37 	bl	80005d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	@ 0x3d
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	0019      	movs	r1, r3
 8001f78:	0010      	movs	r0, r2
 8001f7a:	f000 fb53 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2248      	movs	r2, #72	@ 0x48
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223e      	movs	r2, #62	@ 0x3e
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223f      	movs	r2, #63	@ 0x3f
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2240      	movs	r2, #64	@ 0x40
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2241      	movs	r2, #65	@ 0x41
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2242      	movs	r2, #66	@ 0x42
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2243      	movs	r2, #67	@ 0x43
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2244      	movs	r2, #68	@ 0x44
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2245      	movs	r2, #69	@ 0x45
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2246      	movs	r2, #70	@ 0x46
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2247      	movs	r2, #71	@ 0x47
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223d      	movs	r2, #61	@ 0x3d
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e04a      	b.n	8002090 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223d      	movs	r2, #61	@ 0x3d
 8001ffe:	5c9b      	ldrb	r3, [r3, r2]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223c      	movs	r2, #60	@ 0x3c
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f841 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223d      	movs	r2, #61	@ 0x3d
 800201a:	2102      	movs	r1, #2
 800201c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	0019      	movs	r1, r3
 8002028:	0010      	movs	r0, r2
 800202a:	f000 fafb 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2248      	movs	r2, #72	@ 0x48
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	223e      	movs	r2, #62	@ 0x3e
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223f      	movs	r2, #63	@ 0x3f
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2241      	movs	r2, #65	@ 0x41
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2242      	movs	r2, #66	@ 0x42
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2243      	movs	r2, #67	@ 0x43
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2244      	movs	r2, #68	@ 0x44
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2245      	movs	r2, #69	@ 0x45
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2246      	movs	r2, #70	@ 0x46
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2247      	movs	r2, #71	@ 0x47
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223d      	movs	r2, #61	@ 0x3d
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <HAL_TIM_PWM_Start+0x22>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	223e      	movs	r2, #62	@ 0x3e
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	4193      	sbcs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e037      	b.n	800213a <HAL_TIM_PWM_Start+0x92>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d108      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x3a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	223f      	movs	r2, #63	@ 0x3f
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	4193      	sbcs	r3, r2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e02b      	b.n	800213a <HAL_TIM_PWM_Start+0x92>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d108      	bne.n	80020fa <HAL_TIM_PWM_Start+0x52>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	5c9b      	ldrb	r3, [r3, r2]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	4193      	sbcs	r3, r2
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e01f      	b.n	800213a <HAL_TIM_PWM_Start+0x92>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d108      	bne.n	8002112 <HAL_TIM_PWM_Start+0x6a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2241      	movs	r2, #65	@ 0x41
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	1e5a      	subs	r2, r3, #1
 800210c:	4193      	sbcs	r3, r2
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e013      	b.n	800213a <HAL_TIM_PWM_Start+0x92>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b10      	cmp	r3, #16
 8002116:	d108      	bne.n	800212a <HAL_TIM_PWM_Start+0x82>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2242      	movs	r2, #66	@ 0x42
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	4193      	sbcs	r3, r2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e007      	b.n	800213a <HAL_TIM_PWM_Start+0x92>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2243      	movs	r2, #67	@ 0x43
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	4193      	sbcs	r3, r2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e086      	b.n	8002250 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Start+0xaa>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	223e      	movs	r2, #62	@ 0x3e
 800214c:	2102      	movs	r1, #2
 800214e:	5499      	strb	r1, [r3, r2]
 8002150:	e023      	b.n	800219a <HAL_TIM_PWM_Start+0xf2>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Start+0xba>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	223f      	movs	r2, #63	@ 0x3f
 800215c:	2102      	movs	r1, #2
 800215e:	5499      	strb	r1, [r3, r2]
 8002160:	e01b      	b.n	800219a <HAL_TIM_PWM_Start+0xf2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Start+0xca>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	2102      	movs	r1, #2
 800216e:	5499      	strb	r1, [r3, r2]
 8002170:	e013      	b.n	800219a <HAL_TIM_PWM_Start+0xf2>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d104      	bne.n	8002182 <HAL_TIM_PWM_Start+0xda>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2241      	movs	r2, #65	@ 0x41
 800217c:	2102      	movs	r1, #2
 800217e:	5499      	strb	r1, [r3, r2]
 8002180:	e00b      	b.n	800219a <HAL_TIM_PWM_Start+0xf2>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b10      	cmp	r3, #16
 8002186:	d104      	bne.n	8002192 <HAL_TIM_PWM_Start+0xea>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2242      	movs	r2, #66	@ 0x42
 800218c:	2102      	movs	r1, #2
 800218e:	5499      	strb	r1, [r3, r2]
 8002190:	e003      	b.n	800219a <HAL_TIM_PWM_Start+0xf2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2243      	movs	r2, #67	@ 0x43
 8002196:	2102      	movs	r1, #2
 8002198:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fdf4 	bl	8002d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002258 <HAL_TIM_PWM_Start+0x1b0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x11e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a29      	ldr	r2, [pc, #164]	@ (800225c <HAL_TIM_PWM_Start+0x1b4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x11e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <HAL_TIM_PWM_Start+0x1b8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_Start+0x122>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_TIM_PWM_Start+0x124>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	0209      	lsls	r1, r1, #8
 80021de:	430a      	orrs	r2, r1
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_TIM_PWM_Start+0x1b0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00f      	beq.n	800220c <HAL_TIM_PWM_Start+0x164>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	05db      	lsls	r3, r3, #23
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d009      	beq.n	800220c <HAL_TIM_PWM_Start+0x164>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_TIM_PWM_Start+0x1bc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_TIM_PWM_Start+0x164>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a15      	ldr	r2, [pc, #84]	@ (800225c <HAL_TIM_PWM_Start+0x1b4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d116      	bne.n	800223a <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <HAL_TIM_PWM_Start+0x1c0>)
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b06      	cmp	r3, #6
 800221c:	d016      	beq.n	800224c <HAL_TIM_PWM_Start+0x1a4>
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	429a      	cmp	r2, r3
 8002226:	d011      	beq.n	800224c <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002238:	e008      	b.n	800224c <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e000      	b.n	800224e <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40000400 	.word	0x40000400
 8002268:	00010007 	.word	0x00010007

0800226c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2317      	movs	r3, #23
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	223c      	movs	r2, #60	@ 0x3c
 8002284:	5c9b      	ldrb	r3, [r3, r2]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_TIM_PWM_ConfigChannel+0x22>
 800228a:	2302      	movs	r3, #2
 800228c:	e0e5      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	223c      	movs	r2, #60	@ 0x3c
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b14      	cmp	r3, #20
 800229a:	d900      	bls.n	800229e <HAL_TIM_PWM_ConfigChannel+0x32>
 800229c:	e0d1      	b.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	009a      	lsls	r2, r3, #2
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80022a4:	18d3      	adds	r3, r2, r3
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fa34 	bl	8002720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2108      	movs	r1, #8
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2104      	movs	r1, #4
 80022d4:	438a      	bics	r2, r1
 80022d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6999      	ldr	r1, [r3, #24]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	619a      	str	r2, [r3, #24]
      break;
 80022ea:	e0af      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fa93 	bl	8002820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0109      	lsls	r1, r1, #4
 8002308:	430a      	orrs	r2, r1
 800230a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4954      	ldr	r1, [pc, #336]	@ (8002468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002318:	400a      	ands	r2, r1
 800231a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	619a      	str	r2, [r3, #24]
      break;
 8002330:	e08c      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f000 faee 	bl	800291c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2108      	movs	r1, #8
 800234c:	430a      	orrs	r2, r1
 800234e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2104      	movs	r1, #4
 800235c:	438a      	bics	r2, r1
 800235e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69d9      	ldr	r1, [r3, #28]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	61da      	str	r2, [r3, #28]
      break;
 8002372:	e06b      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fb4f 	bl	8002a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2180      	movs	r1, #128	@ 0x80
 800238e:	0109      	lsls	r1, r1, #4
 8002390:	430a      	orrs	r2, r1
 8002392:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4932      	ldr	r1, [pc, #200]	@ (8002468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69d9      	ldr	r1, [r3, #28]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	021a      	lsls	r2, r3, #8
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	61da      	str	r2, [r3, #28]
      break;
 80023b8:	e048      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	0011      	movs	r1, r2
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 fb90 	bl	8002ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2108      	movs	r1, #8
 80023d4:	430a      	orrs	r2, r1
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2104      	movs	r1, #4
 80023e4:	438a      	bics	r2, r1
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80023fa:	e027      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fbc9 	bl	8002b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2180      	movs	r1, #128	@ 0x80
 8002416:	0109      	lsls	r1, r1, #4
 8002418:	430a      	orrs	r2, r1
 800241a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4910      	ldr	r1, [pc, #64]	@ (8002468 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002428:	400a      	ands	r2, r1
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	021a      	lsls	r2, r3, #8
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002440:	e004      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002442:	2317      	movs	r3, #23
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
      break;
 800244a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	223c      	movs	r2, #60	@ 0x3c
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

  return status;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	08002f64 	.word	0x08002f64
 8002468:	fffffbff 	.word	0xfffffbff

0800246c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	230f      	movs	r3, #15
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	223c      	movs	r2, #60	@ 0x3c
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_TIM_ConfigClockSource+0x20>
 8002488:	2302      	movs	r3, #2
 800248a:	e0c0      	b.n	800260e <HAL_TIM_ConfigClockSource+0x1a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	223c      	movs	r2, #60	@ 0x3c
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	223d      	movs	r2, #61	@ 0x3d
 8002498:	2102      	movs	r1, #2
 800249a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002618 <HAL_TIM_ConfigClockSource+0x1ac>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4a5b      	ldr	r2, [pc, #364]	@ (800261c <HAL_TIM_ConfigClockSource+0x1b0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a57      	ldr	r2, [pc, #348]	@ (8002620 <HAL_TIM_ConfigClockSource+0x1b4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d100      	bne.n	80024c8 <HAL_TIM_ConfigClockSource+0x5c>
 80024c6:	e088      	b.n	80025da <HAL_TIM_ConfigClockSource+0x16e>
 80024c8:	4a55      	ldr	r2, [pc, #340]	@ (8002620 <HAL_TIM_ConfigClockSource+0x1b4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d900      	bls.n	80024d0 <HAL_TIM_ConfigClockSource+0x64>
 80024ce:	e08d      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 80024d0:	2280      	movs	r2, #128	@ 0x80
 80024d2:	0192      	lsls	r2, r2, #6
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d03c      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xe6>
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	0192      	lsls	r2, r2, #6
 80024dc:	4293      	cmp	r3, r2
 80024de:	d900      	bls.n	80024e2 <HAL_TIM_ConfigClockSource+0x76>
 80024e0:	e084      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	0152      	lsls	r2, r2, #5
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_TIM_ConfigClockSource+0x80>
 80024ea:	e084      	b.n	80025f6 <HAL_TIM_ConfigClockSource+0x18a>
 80024ec:	2280      	movs	r2, #128	@ 0x80
 80024ee:	0152      	lsls	r2, r2, #5
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d900      	bls.n	80024f6 <HAL_TIM_ConfigClockSource+0x8a>
 80024f4:	e07a      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 80024f6:	2b70      	cmp	r3, #112	@ 0x70
 80024f8:	d014      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xb8>
 80024fa:	d900      	bls.n	80024fe <HAL_TIM_ConfigClockSource+0x92>
 80024fc:	e076      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 80024fe:	2b60      	cmp	r3, #96	@ 0x60
 8002500:	d04b      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x12e>
 8002502:	d900      	bls.n	8002506 <HAL_TIM_ConfigClockSource+0x9a>
 8002504:	e072      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 8002506:	2b50      	cmp	r3, #80	@ 0x50
 8002508:	d037      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x10e>
 800250a:	d900      	bls.n	800250e <HAL_TIM_ConfigClockSource+0xa2>
 800250c:	e06e      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d053      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x14e>
 8002512:	d86b      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 8002514:	2b20      	cmp	r3, #32
 8002516:	d060      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x16e>
 8002518:	d868      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d05d      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x16e>
 800251e:	2b10      	cmp	r3, #16
 8002520:	d05b      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x16e>
 8002522:	e063      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002534:	f000 fc0c 	bl	8002d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2277      	movs	r2, #119	@ 0x77
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e052      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002562:	f000 fbf5 	bl	8002d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	01c9      	lsls	r1, r1, #7
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
      break;
 8002578:	e03e      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002586:	001a      	movs	r2, r3
 8002588:	f000 fb66 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2150      	movs	r1, #80	@ 0x50
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fbc0 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 8002598:	e02e      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a6:	001a      	movs	r2, r3
 80025a8:	f000 fb84 	bl	8002cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2160      	movs	r1, #96	@ 0x60
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fbb0 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e01e      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c6:	001a      	movs	r2, r3
 80025c8:	f000 fb46 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2140      	movs	r1, #64	@ 0x40
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 fba0 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 80025d8:	e00e      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f000 fb97 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 80025ea:	e005      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 80025ec:	230f      	movs	r3, #15
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e000      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80025f6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223d      	movs	r2, #61	@ 0x3d
 80025fc:	2101      	movs	r1, #1
 80025fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	223c      	movs	r2, #60	@ 0x3c
 8002604:	2100      	movs	r1, #0
 8002606:	5499      	strb	r1, [r3, r2]

  return status;
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	ffceff88 	.word	0xffceff88
 800261c:	ffff00ff 	.word	0xffff00ff
 8002620:	00100030 	.word	0x00100030

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a35      	ldr	r2, [pc, #212]	@ (800270c <TIM_Base_SetConfig+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d008      	beq.n	800264e <TIM_Base_SetConfig+0x2a>
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	429a      	cmp	r2, r3
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0x2a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a31      	ldr	r2, [pc, #196]	@ (8002710 <TIM_Base_SetConfig+0xec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d108      	bne.n	8002660 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2270      	movs	r2, #112	@ 0x70
 8002652:	4393      	bics	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a2a      	ldr	r2, [pc, #168]	@ (800270c <TIM_Base_SetConfig+0xe8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d010      	beq.n	800268a <TIM_Base_SetConfig+0x66>
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	2380      	movs	r3, #128	@ 0x80
 800266c:	05db      	lsls	r3, r3, #23
 800266e:	429a      	cmp	r2, r3
 8002670:	d00b      	beq.n	800268a <TIM_Base_SetConfig+0x66>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a26      	ldr	r2, [pc, #152]	@ (8002710 <TIM_Base_SetConfig+0xec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x66>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a25      	ldr	r2, [pc, #148]	@ (8002714 <TIM_Base_SetConfig+0xf0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x66>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <TIM_Base_SetConfig+0xf4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a23      	ldr	r2, [pc, #140]	@ (800271c <TIM_Base_SetConfig+0xf8>)
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	4393      	bics	r3, r2
 80026a2:	001a      	movs	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a11      	ldr	r2, [pc, #68]	@ (800270c <TIM_Base_SetConfig+0xe8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <TIM_Base_SetConfig+0xb6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <TIM_Base_SetConfig+0xf0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d003      	beq.n	80026da <TIM_Base_SetConfig+0xb6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <TIM_Base_SetConfig+0xf4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d103      	bne.n	80026e2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4393      	bics	r3, r2
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]
  }
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	fffffcff 	.word	0xfffffcff

08002720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	2201      	movs	r2, #1
 8002736:	4393      	bics	r3, r2
 8002738:	001a      	movs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a2e      	ldr	r2, [pc, #184]	@ (8002808 <TIM_OC1_SetConfig+0xe8>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2203      	movs	r2, #3
 8002756:	4393      	bics	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2202      	movs	r2, #2
 8002768:	4393      	bics	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a24      	ldr	r2, [pc, #144]	@ (800280c <TIM_OC1_SetConfig+0xec>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_OC1_SetConfig+0x6e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <TIM_OC1_SetConfig+0xf0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_OC1_SetConfig+0x6e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a22      	ldr	r2, [pc, #136]	@ (8002814 <TIM_OC1_SetConfig+0xf4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10c      	bne.n	80027a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2208      	movs	r2, #8
 8002792:	4393      	bics	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2204      	movs	r2, #4
 80027a4:	4393      	bics	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a18      	ldr	r2, [pc, #96]	@ (800280c <TIM_OC1_SetConfig+0xec>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_OC1_SetConfig+0xa0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <TIM_OC1_SetConfig+0xf0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_OC1_SetConfig+0xa0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a16      	ldr	r2, [pc, #88]	@ (8002814 <TIM_OC1_SetConfig+0xf4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4a15      	ldr	r2, [pc, #84]	@ (8002818 <TIM_OC1_SetConfig+0xf8>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <TIM_OC1_SetConfig+0xfc>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	fffeff8f 	.word	0xfffeff8f
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400
 8002818:	fffffeff 	.word	0xfffffeff
 800281c:	fffffdff 	.word	0xfffffdff

08002820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	2210      	movs	r2, #16
 8002836:	4393      	bics	r3, r2
 8002838:	001a      	movs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a2c      	ldr	r2, [pc, #176]	@ (8002900 <TIM_OC2_SetConfig+0xe0>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a2b      	ldr	r2, [pc, #172]	@ (8002904 <TIM_OC2_SetConfig+0xe4>)
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2220      	movs	r2, #32
 800286a:	4393      	bics	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a22      	ldr	r2, [pc, #136]	@ (8002908 <TIM_OC2_SetConfig+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10d      	bne.n	800289e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2280      	movs	r2, #128	@ 0x80
 8002886:	4393      	bics	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2240      	movs	r2, #64	@ 0x40
 800289a:	4393      	bics	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a19      	ldr	r2, [pc, #100]	@ (8002908 <TIM_OC2_SetConfig+0xe8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_OC2_SetConfig+0x96>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a18      	ldr	r2, [pc, #96]	@ (800290c <TIM_OC2_SetConfig+0xec>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_OC2_SetConfig+0x96>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <TIM_OC2_SetConfig+0xf0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d113      	bne.n	80028de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4a16      	ldr	r2, [pc, #88]	@ (8002914 <TIM_OC2_SetConfig+0xf4>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <TIM_OC2_SetConfig+0xf8>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b006      	add	sp, #24
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	feff8fff 	.word	0xfeff8fff
 8002904:	fffffcff 	.word	0xfffffcff
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40014000 	.word	0x40014000
 8002910:	40014400 	.word	0x40014400
 8002914:	fffffbff 	.word	0xfffffbff
 8002918:	fffff7ff 	.word	0xfffff7ff

0800291c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a31      	ldr	r2, [pc, #196]	@ (80029f8 <TIM_OC3_SetConfig+0xdc>)
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a2d      	ldr	r2, [pc, #180]	@ (80029fc <TIM_OC3_SetConfig+0xe0>)
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2203      	movs	r2, #3
 8002950:	4393      	bics	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4a27      	ldr	r2, [pc, #156]	@ (8002a00 <TIM_OC3_SetConfig+0xe4>)
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <TIM_OC3_SetConfig+0xe8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10d      	bne.n	8002996 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <TIM_OC3_SetConfig+0xec>)
 800297e:	4013      	ands	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4a1e      	ldr	r2, [pc, #120]	@ (8002a0c <TIM_OC3_SetConfig+0xf0>)
 8002992:	4013      	ands	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <TIM_OC3_SetConfig+0xe8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <TIM_OC3_SetConfig+0x92>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <TIM_OC3_SetConfig+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_OC3_SetConfig+0x92>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <TIM_OC3_SetConfig+0xf8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d113      	bne.n	80029d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <TIM_OC3_SetConfig+0xfc>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <TIM_OC3_SetConfig+0x100>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	621a      	str	r2, [r3, #32]
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b006      	add	sp, #24
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	fffffeff 	.word	0xfffffeff
 80029fc:	fffeff8f 	.word	0xfffeff8f
 8002a00:	fffffdff 	.word	0xfffffdff
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	fffff7ff 	.word	0xfffff7ff
 8002a0c:	fffffbff 	.word	0xfffffbff
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	ffffefff 	.word	0xffffefff
 8002a1c:	ffffdfff 	.word	0xffffdfff

08002a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a24      	ldr	r2, [pc, #144]	@ (8002ac8 <TIM_OC4_SetConfig+0xa8>)
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	@ (8002acc <TIM_OC4_SetConfig+0xac>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad0 <TIM_OC4_SetConfig+0xb0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <TIM_OC4_SetConfig+0xb4>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	031b      	lsls	r3, r3, #12
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	@ (8002ad8 <TIM_OC4_SetConfig+0xb8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_OC4_SetConfig+0x70>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <TIM_OC4_SetConfig+0xbc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_OC4_SetConfig+0x70>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <TIM_OC4_SetConfig+0xc0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <TIM_OC4_SetConfig+0xc4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	ffffefff 	.word	0xffffefff
 8002acc:	feff8fff 	.word	0xfeff8fff
 8002ad0:	fffffcff 	.word	0xfffffcff
 8002ad4:	ffffdfff 	.word	0xffffdfff
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40014400 	.word	0x40014400
 8002ae4:	ffffbfff 	.word	0xffffbfff

08002ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <TIM_OC5_SetConfig+0x9c>)
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <TIM_OC5_SetConfig+0xa0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <TIM_OC5_SetConfig+0xa4>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	041b      	lsls	r3, r3, #16
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <TIM_OC5_SetConfig+0xa8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_OC5_SetConfig+0x66>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <TIM_OC5_SetConfig+0xac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_OC5_SetConfig+0x66>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <TIM_OC5_SetConfig+0xb0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d109      	bne.n	8002b62 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <TIM_OC5_SetConfig+0x9c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b006      	add	sp, #24
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fffeffff 	.word	0xfffeffff
 8002b88:	fffeff8f 	.word	0xfffeff8f
 8002b8c:	fffdffff 	.word	0xfffdffff
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400

08002b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	@ (8002c3c <TIM_OC6_SetConfig+0xa0>)
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <TIM_OC6_SetConfig+0xa4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4a1a      	ldr	r2, [pc, #104]	@ (8002c44 <TIM_OC6_SetConfig+0xa8>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <TIM_OC6_SetConfig+0xac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_OC6_SetConfig+0x68>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <TIM_OC6_SetConfig+0xb0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_OC6_SetConfig+0x68>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <TIM_OC6_SetConfig+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d109      	bne.n	8002c18 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	4a13      	ldr	r2, [pc, #76]	@ (8002c54 <TIM_OC6_SetConfig+0xb8>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b006      	add	sp, #24
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	ffefffff 	.word	0xffefffff
 8002c40:	feff8fff 	.word	0xfeff8fff
 8002c44:	ffdfffff 	.word	0xffdfffff
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40014400 	.word	0x40014400
 8002c54:	fffbffff 	.word	0xfffbffff

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4393      	bics	r3, r2
 8002c72:	001a      	movs	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	22f0      	movs	r2, #240	@ 0xf0
 8002c82:	4393      	bics	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	220a      	movs	r2, #10
 8002c94:	4393      	bics	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b006      	add	sp, #24
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	4393      	bics	r3, r2
 8002cce:	001a      	movs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <TIM_TI2_ConfigInputStage+0x60>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	22a0      	movs	r2, #160	@ 0xa0
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	ffff0fff 	.word	0xffff0fff

08002d18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <TIM_ITRx_SetConfig+0x34>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	2207      	movs	r2, #7
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	ffcfff8f 	.word	0xffcfff8f

08002d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a09      	ldr	r2, [pc, #36]	@ (8002d8c <TIM_ETR_SetConfig+0x3c>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	ffff00ff 	.word	0xffff00ff

08002d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	221f      	movs	r2, #31
 8002da0:	4013      	ands	r3, r2
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	0013      	movs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	43d2      	mvns	r2, r2
 8002db2:	401a      	ands	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	211f      	movs	r1, #31
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4099      	lsls	r1, r3
 8002dc6:	000b      	movs	r3, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b006      	add	sp, #24
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223c      	movs	r2, #60	@ 0x3c
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e055      	b.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	@ 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223d      	movs	r2, #61	@ 0x3d
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d108      	bne.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2270      	movs	r2, #112	@ 0x70
 8002e30:	4393      	bics	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00f      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10c      	bne.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	4393      	bics	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223d      	movs	r2, #61	@ 0x3d
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223c      	movs	r2, #60	@ 0x3c
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	ff0fffff 	.word	0xff0fffff
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40014000 	.word	0x40014000

08002eb4 <memset>:
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	1882      	adds	r2, r0, r2
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	7019      	strb	r1, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	4c0c      	ldr	r4, [pc, #48]	@ (8002efc <__libc_init_array+0x38>)
 8002eca:	4d0d      	ldr	r5, [pc, #52]	@ (8002f00 <__libc_init_array+0x3c>)
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	f000 f819 	bl	8002f0c <_init>
 8002eda:	4c0a      	ldr	r4, [pc, #40]	@ (8002f04 <__libc_init_array+0x40>)
 8002edc:	4d0a      	ldr	r5, [pc, #40]	@ (8002f08 <__libc_init_array+0x44>)
 8002ede:	1b64      	subs	r4, r4, r5
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	00b3      	lsls	r3, r6, #2
 8002eea:	58eb      	ldr	r3, [r5, r3]
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	00b3      	lsls	r3, r6, #2
 8002ef4:	58eb      	ldr	r3, [r5, r3]
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002fb8 	.word	0x08002fb8
 8002f00:	08002fb8 	.word	0x08002fb8
 8002f04:	08002fbc 	.word	0x08002fbc
 8002f08:	08002fb8 	.word	0x08002fb8

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr


EndDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c4  080030c4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c4  080030c4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c4  080030c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c4  080030c4  000040c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000010  080030d8  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080030d8  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e37  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f59  00000000  00000000  00016e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000071db  00000000  00000000  00019dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00020fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100b  00000000  00000000  00021c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d437  00000000  00000000  00022c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150ed  00000000  00000000  000400ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb8fd  00000000  00000000  000551b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110ab4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002108  00000000  00000000  00110af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b3  00000000  00000000  00112c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e98 	.word	0x08002e98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002e98 	.word	0x08002e98

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b500      	push	{lr}
 8000406:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000408:	224c      	movs	r2, #76	@ 0x4c
 800040a:	2100      	movs	r1, #0
 800040c:	a805      	add	r0, sp, #20
 800040e:	f002 fd17 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	4668      	mov	r0, sp
 8000418:	f002 fd12 	bl	8002e40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 800041c:	2080      	movs	r0, #128	@ 0x80
 800041e:	00c0      	lsls	r0, r0, #3
 8000420:	f001 fd98 	bl	8001f54 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000424:	f001 fd8c 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000428:	2290      	movs	r2, #144	@ 0x90
 800042a:	2018      	movs	r0, #24
 800042c:	4913      	ldr	r1, [pc, #76]	@ (800047c <SystemClock_Config+0x78>)
 800042e:	588b      	ldr	r3, [r1, r2]
 8000430:	4383      	bics	r3, r0
 8000432:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000434:	2314      	movs	r3, #20
 8000436:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000438:	336d      	adds	r3, #109	@ 0x6d
 800043a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800043c:	3b80      	subs	r3, #128	@ 0x80
 800043e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000440:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000442:	3a40      	subs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000446:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000448:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044a:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f001 fea0 	bl	8002190 <HAL_RCC_OscConfig>
 8000450:	2800      	cmp	r0, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000456:	e7fe      	b.n	8000456 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	2207      	movs	r2, #7
 800045a:	2300      	movs	r3, #0
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000464:	2100      	movs	r1, #0
 8000466:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	9202      	str	r2, [sp, #8]
 800046a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800046c:	f002 f9bc 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000470:	2800      	cmp	r0, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x74>
 8000474:	b672      	cpsid	i
  while (1)
 8000476:	e7fe      	b.n	8000476 <SystemClock_Config+0x72>
}
 8000478:	b019      	add	sp, #100	@ 0x64
 800047a:	bd00      	pop	{pc}
 800047c:	40021000 	.word	0x40021000

08000480 <main>:
{
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46c6      	mov	lr, r8
 8000484:	b500      	push	{lr}
 8000486:	b088      	sub	sp, #32
  HAL_Init();
 8000488:	f000 ff7e 	bl	8001388 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	4c6e      	ldr	r4, [pc, #440]	@ (8000648 <main+0x1c8>)
 8000490:	0552      	lsls	r2, r2, #21
 8000492:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000494:	4313      	orrs	r3, r2
 8000496:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000498:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800049a:	4013      	ands	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 80004a0:	f001 fd4e 	bl	8001f40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BACKUPRESET_FORCE();
 80004a4:	2290      	movs	r2, #144	@ 0x90
 80004a6:	2380      	movs	r3, #128	@ 0x80
 80004a8:	58a1      	ldr	r1, [r4, r2]
 80004aa:	025b      	lsls	r3, r3, #9
 80004ac:	430b      	orrs	r3, r1
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY));
 80004ae:	2190      	movs	r1, #144	@ 0x90
  __HAL_RCC_BACKUPRESET_FORCE();
 80004b0:	50a3      	str	r3, [r4, r2]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY));
 80004b2:	3a8e      	subs	r2, #142	@ 0x8e
 80004b4:	0015      	movs	r5, r2
 80004b6:	5863      	ldr	r3, [r4, r1]
 80004b8:	401d      	ands	r5, r3
 80004ba:	421a      	tst	r2, r3
 80004bc:	d1fa      	bne.n	80004b4 <main+0x34>
  __HAL_RCC_BACKUPRESET_RELEASE();
 80004be:	5863      	ldr	r3, [r4, r1]
 80004c0:	4a62      	ldr	r2, [pc, #392]	@ (800064c <main+0x1cc>)
 80004c2:	4013      	ands	r3, r2
 80004c4:	5063      	str	r3, [r4, r1]
  SystemClock_Config();
 80004c6:	f7ff ff9d 	bl	8000404 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	2204      	movs	r2, #4
 80004cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80004ce:	4690      	mov	r8, r2
 80004d0:	4313      	orrs	r3, r2
 80004d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80004d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  hcomp1.Instance = COMP1;
 80004d6:	4e5e      	ldr	r6, [pc, #376]	@ (8000650 <main+0x1d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4013      	ands	r3, r2
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	2301      	movs	r3, #1
 80004e0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004e2:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	431a      	orrs	r2, r3
 80004e6:	64e2      	str	r2, [r4, #76]	@ 0x4c
 80004e8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80004ea:	61f5      	str	r5, [r6, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4013      	ands	r3, r2
 80004ee:	9303      	str	r3, [sp, #12]
 80004f0:	9b03      	ldr	r3, [sp, #12]
  hcomp1.Instance = COMP1;
 80004f2:	4b58      	ldr	r3, [pc, #352]	@ (8000654 <main+0x1d4>)
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80004f4:	60b5      	str	r5, [r6, #8]
  hcomp1.Instance = COMP1;
 80004f6:	6033      	str	r3, [r6, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	6133      	str	r3, [r6, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80004fe:	3bd1      	subs	r3, #209	@ 0xd1
 8000500:	3bff      	subs	r3, #255	@ 0xff
 8000502:	6173      	str	r3, [r6, #20]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8000504:	23c0      	movs	r3, #192	@ 0xc0
 8000506:	031b      	lsls	r3, r3, #12
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000508:	61b5      	str	r5, [r6, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800050a:	6235      	str	r5, [r6, #32]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800050c:	6075      	str	r5, [r6, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800050e:	6275      	str	r5, [r6, #36]	@ 0x24
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8000510:	60f3      	str	r3, [r6, #12]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000512:	f000 ff69 	bl	80013e8 <HAL_COMP_Init>
 8000516:	1e05      	subs	r5, r0, #0
 8000518:	d001      	beq.n	800051e <main+0x9e>
 800051a:	b672      	cpsid	i
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x9c>
  LPTIM_IC_ConfigTypeDef sConfig = {0};
 800051e:	2210      	movs	r2, #16
 8000520:	2100      	movs	r1, #0
 8000522:	a804      	add	r0, sp, #16
 8000524:	f002 fc8c 	bl	8002e40 <memset>
  hlptim1.Instance = LPTIM1;
 8000528:	4f4b      	ldr	r7, [pc, #300]	@ (8000658 <main+0x1d8>)
 800052a:	4b4c      	ldr	r3, [pc, #304]	@ (800065c <main+0x1dc>)
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800052c:	2200      	movs	r2, #0
  hlptim1.Instance = LPTIM1;
 800052e:	603b      	str	r3, [r7, #0]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000530:	4b4b      	ldr	r3, [pc, #300]	@ (8000660 <main+0x1e0>)
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000532:	0038      	movs	r0, r7
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000534:	617b      	str	r3, [r7, #20]
  hlptim1.Init.Period = 65535;
 8000536:	623b      	str	r3, [r7, #32]
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000538:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800053a:	607d      	str	r5, [r7, #4]
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800053c:	633a      	str	r2, [r7, #48]	@ 0x30
 800053e:	637b      	str	r3, [r7, #52]	@ 0x34
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000540:	60bd      	str	r5, [r7, #8]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000542:	627d      	str	r5, [r7, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000544:	62bd      	str	r5, [r7, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000546:	62fd      	str	r5, [r7, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000548:	f001 fb26 	bl	8001b98 <HAL_LPTIM_Init>
 800054c:	1e02      	subs	r2, r0, #0
 800054e:	d001      	beq.n	8000554 <main+0xd4>
 8000550:	b672      	cpsid	i
  while (1)
 8000552:	e7fe      	b.n	8000552 <main+0xd2>
  sConfig.ICInputSource = LPTIM_IC1SOURCE_COMP1;
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	025b      	lsls	r3, r3, #9
 8000558:	9304      	str	r3, [sp, #16]
  sConfig.ICPolarity = LPTIM_ICPOLARITY_FALLING;
 800055a:	4643      	mov	r3, r8
  sConfig.ICPrescaler = LPTIM_ICPSC_DIV1;
 800055c:	9005      	str	r0, [sp, #20]
  sConfig.ICFilter = LPTIM_ICFLT_CLOCK_DIV1;
 800055e:	9007      	str	r0, [sp, #28]
  if (HAL_LPTIM_IC_ConfigChannel(&hlptim1, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 8000560:	a904      	add	r1, sp, #16
 8000562:	0038      	movs	r0, r7
  sConfig.ICPolarity = LPTIM_ICPOLARITY_FALLING;
 8000564:	9306      	str	r3, [sp, #24]
  if (HAL_LPTIM_IC_ConfigChannel(&hlptim1, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 8000566:	f001 fc7b 	bl	8001e60 <HAL_LPTIM_IC_ConfigChannel>
 800056a:	2800      	cmp	r0, #0
 800056c:	d001      	beq.n	8000572 <main+0xf2>
 800056e:	b672      	cpsid	i
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0xf0>
  sConfig.ICInputSource = LPTIM_IC3SOURCE_COMP1;
 8000572:	2380      	movs	r3, #128	@ 0x80
  sConfig.ICPolarity = LPTIM_ICPOLARITY_RISING;
 8000574:	9006      	str	r0, [sp, #24]
  sConfig.ICInputSource = LPTIM_IC3SOURCE_COMP1;
 8000576:	045b      	lsls	r3, r3, #17
  if (HAL_LPTIM_IC_ConfigChannel(&hlptim1, &sConfig, LPTIM_CHANNEL_3) != HAL_OK)
 8000578:	2202      	movs	r2, #2
 800057a:	0038      	movs	r0, r7
 800057c:	a904      	add	r1, sp, #16
  sConfig.ICInputSource = LPTIM_IC3SOURCE_COMP1;
 800057e:	9304      	str	r3, [sp, #16]
  if (HAL_LPTIM_IC_ConfigChannel(&hlptim1, &sConfig, LPTIM_CHANNEL_3) != HAL_OK)
 8000580:	f001 fc6e 	bl	8001e60 <HAL_LPTIM_IC_ConfigChannel>
 8000584:	2800      	cmp	r0, #0
 8000586:	d116      	bne.n	80005b6 <main+0x136>
  hrtc.Instance = RTC;
 8000588:	4d36      	ldr	r5, [pc, #216]	@ (8000664 <main+0x1e4>)
 800058a:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <main+0x1e8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800058c:	6068      	str	r0, [r5, #4]
  hrtc.Instance = RTC;
 800058e:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000590:	237f      	movs	r3, #127	@ 0x7f
 8000592:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8000594:	3380      	adds	r3, #128	@ 0x80
 8000596:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000598:	2380      	movs	r3, #128	@ 0x80
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800059a:	6128      	str	r0, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800059c:	6168      	str	r0, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800059e:	61a8      	str	r0, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005a0:	05db      	lsls	r3, r3, #23
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80005a2:	6228      	str	r0, [r5, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80005a4:	6268      	str	r0, [r5, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005a6:	0028      	movs	r0, r5
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005a8:	61eb      	str	r3, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005aa:	f002 fb29 	bl	8002c00 <HAL_RTC_Init>
 80005ae:	1e01      	subs	r1, r0, #0
 80005b0:	d003      	beq.n	80005ba <main+0x13a>
 80005b2:	b672      	cpsid	i
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x134>
 80005b6:	b672      	cpsid	i
 80005b8:	e7fe      	b.n	80005b8 <main+0x138>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 80005ba:	0003      	movs	r3, r0
 80005bc:	2204      	movs	r2, #4
 80005be:	0028      	movs	r0, r5
 80005c0:	f002 fba6 	bl	8002d10 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005c4:	4680      	mov	r8, r0
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d001      	beq.n	80005ce <main+0x14e>
 80005ca:	b672      	cpsid	i
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x14c>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005ce:	0028      	movs	r0, r5
 80005d0:	f002 fc1c 	bl	8002e0c <HAL_RTCEx_DeactivateWakeUpTimer>
  BSP_LCD_GLASS_Init();
 80005d4:	f000 fbc2 	bl	8000d5c <BSP_LCD_GLASS_Init>
  BSP_LCD_GLASS_Clear();
 80005d8:	f000 fccc 	bl	8000f74 <BSP_LCD_GLASS_Clear>
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80005e0:	0552      	lsls	r2, r2, #21
 80005e2:	4313      	orrs	r3, r2
 80005e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80005e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80005e8:	4013      	ands	r3, r2
 80005ea:	9304      	str	r3, [sp, #16]
 80005ec:	9b04      	ldr	r3, [sp, #16]
  HAL_PWREx_EnableLowPowerRunMode();
 80005ee:	f001 fcfd 	bl	8001fec <HAL_PWREx_EnableLowPowerRunMode>
  HAL_COMP_Start(&hcomp1);
 80005f2:	0030      	movs	r0, r6
 80005f4:	f000 fffa 	bl	80015ec <HAL_COMP_Start>
  HAL_LPTIM_IC_Start_IT(&hlptim1, LPTIM_CHANNEL_1);
 80005f8:	4641      	mov	r1, r8
 80005fa:	0038      	movs	r0, r7
 80005fc:	f001 fb94 	bl	8001d28 <HAL_LPTIM_IC_Start_IT>
  HAL_LPTIM_IC_Start_IT(&hlptim1, LPTIM_CHANNEL_3);
 8000600:	2102      	movs	r1, #2
 8000602:	0038      	movs	r0, r7
 8000604:	f001 fb90 	bl	8001d28 <HAL_LPTIM_IC_Start_IT>
  BSP_LCD_GLASS_ScrollSentence((uint8_t *)"       waiting for signal and go to STOP mode ", 1 , 149);
 8000608:	2295      	movs	r2, #149	@ 0x95
 800060a:	2101      	movs	r1, #1
 800060c:	4817      	ldr	r0, [pc, #92]	@ (800066c <main+0x1ec>)
 800060e:	f000 fcb9 	bl	8000f84 <BSP_LCD_GLASS_ScrollSentence>
  BSP_LCD_GLASS_Clear();
 8000612:	f000 fcaf 	bl	8000f74 <BSP_LCD_GLASS_Clear>
  MODIFY_REG(LCD->FCR, (LCD_FCR_PON | LCD_FCR_CC | LCD_FCR_HD), ( LCD_PULSEONDURATION_1 | LCD_CONTRASTLEVEL_2 | LCD_HIGHDRIVE_DISABLE));
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <main+0x1f0>)
 8000618:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <main+0x1f4>)
 800061a:	6859      	ldr	r1, [r3, #4]
 800061c:	4011      	ands	r1, r2
 800061e:	2281      	movs	r2, #129	@ 0x81
 8000620:	0112      	lsls	r2, r2, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	605a      	str	r2, [r3, #4]
  while (READ_BIT(LCD->SR, LCD_SR_FCRSR) == 0);
 8000626:	2220      	movs	r2, #32
 8000628:	6899      	ldr	r1, [r3, #8]
 800062a:	4211      	tst	r1, r2
 800062c:	d0fc      	beq.n	8000628 <main+0x1a8>
  BSP_LCD_GLASS_DisplayString((uint8_t *)"IDLE");
 800062e:	4812      	ldr	r0, [pc, #72]	@ (8000678 <main+0x1f8>)
 8000630:	f000 fc54 	bl	8000edc <BSP_LCD_GLASS_DisplayString>
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000634:	2302      	movs	r3, #2
 8000636:	4a11      	ldr	r2, [pc, #68]	@ (800067c <main+0x1fc>)
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000638:	2001      	movs	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800063a:	6911      	ldr	r1, [r2, #16]
 800063c:	430b      	orrs	r3, r1
 800063e:	6113      	str	r3, [r2, #16]
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000640:	f001 fcde 	bl	8002000 <HAL_PWREx_EnterSTOP1Mode>
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x1c4>
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	40021000 	.word	0x40021000
 800064c:	fffeffff 	.word	0xfffeffff
 8000650:	200000d0 	.word	0x200000d0
 8000654:	40010200 	.word	0x40010200
 8000658:	20000078 	.word	0x20000078
 800065c:	40007c00 	.word	0x40007c00
 8000660:	0000ffff 	.word	0x0000ffff
 8000664:	20000048 	.word	0x20000048
 8000668:	40002800 	.word	0x40002800
 800066c:	08002eb0 	.word	0x08002eb0
 8000670:	40002400 	.word	0x40002400
 8000674:	ffffe38e 	.word	0xffffe38e
 8000678:	08002ee0 	.word	0x08002ee0
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <CaptureFalling_Callback>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_LPTIM_IC_GetCaptureCH1(const LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(READ_BIT(LPTIMx->CCR1, LPTIM_CCR1_CCR1));
 8000680:	4910      	ldr	r1, [pc, #64]	@ (80006c4 <CaptureFalling_Callback+0x44>)
    oldValueFall = newValueFall;
 8000682:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <CaptureFalling_Callback+0x48>)
 8000684:	6949      	ldr	r1, [r1, #20]
 8000686:	6813      	ldr	r3, [r2, #0]
 8000688:	0409      	lsls	r1, r1, #16
 800068a:	0c09      	lsrs	r1, r1, #16
{
 800068c:	b510      	push	{r4, lr}
    newValueFall = LL_LPTIM_IC_GetCaptureCH1(LPTIM1);
 800068e:	6011      	str	r1, [r2, #0]
    if (newValueFall > oldValueFall && newValueRise > oldValueFall )
 8000690:	428b      	cmp	r3, r1
 8000692:	d216      	bcs.n	80006c2 <CaptureFalling_Callback+0x42>
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <CaptureFalling_Callback+0x4c>)
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	4293      	cmp	r3, r2
 800069a:	d212      	bcs.n	80006c2 <CaptureFalling_Callback+0x42>
        negDutyCycle = (newValueRise - oldValueFall) * 100 / DiffValueFall;
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	1ad2      	subs	r2, r2, r3
        DiffValueFall = (newValueFall - oldValueFall);
 80006a0:	1ac9      	subs	r1, r1, r3
        negDutyCycle = (newValueRise - oldValueFall) * 100 / DiffValueFall;
 80006a2:	4350      	muls	r0, r2
 80006a4:	f7ff fd38 	bl	8000118 <__udivsi3>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	4c09      	ldr	r4, [pc, #36]	@ (80006d0 <CaptureFalling_Callback+0x50>)
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <CaptureFalling_Callback+0x54>)
 80006ae:	6020      	str	r0, [r4, #0]
 80006b0:	6999      	ldr	r1, [r3, #24]
 80006b2:	01d2      	lsls	r2, r2, #7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	619a      	str	r2, [r3, #24]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	6999      	ldr	r1, [r3, #24]
 80006bc:	00d2      	lsls	r2, r2, #3
 80006be:	430a      	orrs	r2, r1
 80006c0:	619a      	str	r2, [r3, #24]
}
 80006c2:	bd10      	pop	{r4, pc}
 80006c4:	40007c00 	.word	0x40007c00
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	20000044 	.word	0x20000044
 80006d0:	20000040 	.word	0x20000040
 80006d4:	40002800 	.word	0x40002800

080006d8 <CaptureRising_Callback>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_LPTIM_IC_GetCaptureCH3(const LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(READ_BIT(LPTIMx->CCR3, LPTIM_CCR3_CCR3));
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <CaptureRising_Callback+0x10>)
    newValueRise = LL_LPTIM_IC_GetCaptureCH3(LPTIM1);
 80006da:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <CaptureRising_Callback+0x14>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	40007c00 	.word	0x40007c00
 80006ec:	20000044 	.word	0x20000044

080006f0 <WakeUp_Callback>:
 80006f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <WakeUp_Callback+0x78>)
    preValueRise = actValueRise;
 80006f2:	4a1e      	ldr	r2, [pc, #120]	@ (800076c <WakeUp_Callback+0x7c>)
 80006f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f6:	6811      	ldr	r1, [r2, #0]
 80006f8:	041b      	lsls	r3, r3, #16
 80006fa:	0c1b      	lsrs	r3, r3, #16
{
 80006fc:	b570      	push	{r4, r5, r6, lr}
    actValueRise = LL_LPTIM_IC_GetCaptureCH3(LPTIM1);
 80006fe:	6013      	str	r3, [r2, #0]
    if(preValueRise != actValueRise)
 8000700:	4299      	cmp	r1, r3
 8000702:	d01c      	beq.n	800073e <WakeUp_Callback+0x4e>
        Convert_IntegerIntoChar(negDutyCycle, (uint16_t *)tab);
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <WakeUp_Callback+0x80>)
  units = number1%10;
 8000706:	210a      	movs	r1, #10
        Convert_IntegerIntoChar(negDutyCycle, (uint16_t *)tab);
 8000708:	681d      	ldr	r5, [r3, #0]
  units = number1%10;
 800070a:	0028      	movs	r0, r5
 800070c:	f7ff fd8a 	bl	8000224 <__aeabi_uidivmod>
  *(p_tab+5) = units + 0x30;
 8000710:	000b      	movs	r3, r1
 8000712:	4c18      	ldr	r4, [pc, #96]	@ (8000774 <WakeUp_Callback+0x84>)
 8000714:	3330      	adds	r3, #48	@ 0x30
 8000716:	8163      	strh	r3, [r4, #10]
  tens = ((number1-units)/10)%10;
 8000718:	1a68      	subs	r0, r5, r1
 800071a:	210a      	movs	r1, #10
 800071c:	f7ff fcfc 	bl	8000118 <__udivsi3>
 8000720:	210a      	movs	r1, #10
 8000722:	f7ff fd7f 	bl	8000224 <__aeabi_uidivmod>
        tab[0] = 0x44; //"D"
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <WakeUp_Callback+0x88>)
  *(p_tab+4) = tens + 0x30;
 8000728:	3130      	adds	r1, #48	@ 0x30
        tab[0] = 0x44; //"D"
 800072a:	6023      	str	r3, [r4, #0]
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <WakeUp_Callback+0x8c>)
  *(p_tab+4) = tens + 0x30;
 800072e:	8121      	strh	r1, [r4, #8]
        tab[0] = 0x44; //"D"
 8000730:	6063      	str	r3, [r4, #4]
    BSP_LCD_GLASS_Clear();
 8000732:	f000 fc1f 	bl	8000f74 <BSP_LCD_GLASS_Clear>
    BSP_LCD_GLASS_DisplayStrDeci(tab);
 8000736:	0020      	movs	r0, r4
 8000738:	f000 fbe8 	bl	8000f0c <BSP_LCD_GLASS_DisplayStrDeci>
}
 800073c:	bd70      	pop	{r4, r5, r6, pc}
        negDutyCycle = 0;
 800073e:	2200      	movs	r2, #0
        tab[0] = 0x49; //"I"
 8000740:	4c0c      	ldr	r4, [pc, #48]	@ (8000774 <WakeUp_Callback+0x84>)
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <WakeUp_Callback+0x90>)
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_WUT(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000744:	490f      	ldr	r1, [pc, #60]	@ (8000784 <WakeUp_Callback+0x94>)
 8000746:	6023      	str	r3, [r4, #0]
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <WakeUp_Callback+0x98>)
 800074a:	6063      	str	r3, [r4, #4]
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <WakeUp_Callback+0x9c>)
 800074e:	60a3      	str	r3, [r4, #8]
        negDutyCycle = 0;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <WakeUp_Callback+0x80>)
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <WakeUp_Callback+0xa0>)
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	400a      	ands	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	490d      	ldr	r1, [pc, #52]	@ (8000794 <WakeUp_Callback+0xa4>)
 8000760:	400a      	ands	r2, r1
 8000762:	619a      	str	r2, [r3, #24]
}
 8000764:	e7e5      	b.n	8000732 <WakeUp_Callback+0x42>
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40007c00 	.word	0x40007c00
 800076c:	20000038 	.word	0x20000038
 8000770:	20000040 	.word	0x20000040
 8000774:	2000002c 	.word	0x2000002c
 8000778:	00750044 	.word	0x00750044
 800077c:	00304043 	.word	0x00304043
 8000780:	00440049 	.word	0x00440049
 8000784:	ffffbfff 	.word	0xffffbfff
 8000788:	0045004c 	.word	0x0045004c
 800078c:	00200020 	.word	0x00200020
 8000790:	40002800 	.word	0x40002800
 8000794:	fffffbff 	.word	0xfffffbff

08000798 <Error_Handler>:
 8000798:	b672      	cpsid	i
  while (1)
 800079a:	e7fe      	b.n	800079a <Error_Handler+0x2>

0800079c <WriteChar.isra.0>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	46ce      	mov	lr, r9
 80007a0:	4647      	mov	r7, r8
 80007a2:	b580      	push	{r7, lr}
  switch (*Char)
 80007a4:	286e      	cmp	r0, #110	@ 0x6e
 80007a6:	d900      	bls.n	80007aa <WriteChar.isra.0+0xe>
 80007a8:	e093      	b.n	80008d2 <WriteChar.isra.0+0x136>
 80007aa:	281f      	cmp	r0, #31
 80007ac:	d909      	bls.n	80007c2 <WriteChar.isra.0+0x26>
 80007ae:	0004      	movs	r4, r0
 80007b0:	3c20      	subs	r4, #32
 80007b2:	b2e4      	uxtb	r4, r4
 80007b4:	2c4e      	cmp	r4, #78	@ 0x4e
 80007b6:	d900      	bls.n	80007ba <WriteChar.isra.0+0x1e>
 80007b8:	e29e      	b.n	8000cf8 <WriteChar.isra.0+0x55c>
 80007ba:	4dce      	ldr	r5, [pc, #824]	@ (8000af4 <WriteChar.isra.0+0x358>)
 80007bc:	00a4      	lsls	r4, r4, #2
 80007be:	592c      	ldr	r4, [r5, r4]
 80007c0:	46a7      	mov	pc, r4
      ch = 0x00;
 80007c2:	2500      	movs	r5, #0
  if (Point == POINT_ON)
 80007c4:	2901      	cmp	r1, #1
 80007c6:	d101      	bne.n	80007cc <WriteChar.isra.0+0x30>
    ch |= 0x0002;
 80007c8:	3101      	adds	r1, #1
 80007ca:	430d      	orrs	r5, r1
  if (Colon == DOUBLEPOINT_ON)
 80007cc:	2a01      	cmp	r2, #1
 80007ce:	d101      	bne.n	80007d4 <WriteChar.isra.0+0x38>
    ch |= 0x0020;
 80007d0:	321f      	adds	r2, #31
 80007d2:	4315      	orrs	r5, r2
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80007d4:	210f      	movs	r1, #15
 80007d6:	4cc8      	ldr	r4, [pc, #800]	@ (8000af8 <WriteChar.isra.0+0x35c>)
 80007d8:	1228      	asrs	r0, r5, #8
 80007da:	4008      	ands	r0, r1
 80007dc:	6060      	str	r0, [r4, #4]
 80007de:	1128      	asrs	r0, r5, #4
 80007e0:	4008      	ands	r0, r1
 80007e2:	132a      	asrs	r2, r5, #12
 80007e4:	4029      	ands	r1, r5
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	60a0      	str	r0, [r4, #8]
 80007ea:	60e1      	str	r1, [r4, #12]
{
  uint32_t data = 0x00;
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);

  switch (Position)
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d86c      	bhi.n	80008ca <WriteChar.isra.0+0x12e>
 80007f0:	49c2      	ldr	r1, [pc, #776]	@ (8000afc <WriteChar.isra.0+0x360>)
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	58cb      	ldr	r3, [r1, r3]
 80007f6:	469f      	mov	pc, r3

      break;

    /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80007f8:	2780      	movs	r7, #128	@ 0x80
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80007fa:	4dc1      	ldr	r5, [pc, #772]	@ (8000b00 <WriteChar.isra.0+0x364>)
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80007fc:	05bf      	lsls	r7, r7, #22
 80007fe:	0753      	lsls	r3, r2, #29
 8000800:	08d2      	lsrs	r2, r2, #3
 8000802:	0612      	lsls	r2, r2, #24
 8000804:	403b      	ands	r3, r7
 8000806:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000808:	2100      	movs	r1, #0
 800080a:	4abe      	ldr	r2, [pc, #760]	@ (8000b04 <WriteChar.isra.0+0x368>)
 800080c:	0028      	movs	r0, r5
 800080e:	f001 f8fd 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT);
 8000812:	2601      	movs	r6, #1
 8000814:	2102      	movs	r1, #2
 8000816:	6822      	ldr	r2, [r4, #0]
 8000818:	4688      	mov	r8, r1
 800081a:	0853      	lsrs	r3, r2, #1
 800081c:	0852      	lsrs	r2, r2, #1
 800081e:	4032      	ands	r2, r6
 8000820:	400b      	ands	r3, r1
 8000822:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0_1, LCD_DIGIT6_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000824:	2204      	movs	r2, #4
 8000826:	3901      	subs	r1, #1
 8000828:	4252      	negs	r2, r2
 800082a:	0028      	movs	r0, r5
 800082c:	f001 f8ee 	bl	8001a0c <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT)  | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	6862      	ldr	r2, [r4, #4]
 8000834:	0449      	lsls	r1, r1, #17
 8000836:	0553      	lsls	r3, r2, #21
 8000838:	0752      	lsls	r2, r2, #29
 800083a:	400b      	ands	r3, r1
 800083c:	403a      	ands	r2, r7
 800083e:	4689      	mov	r9, r1
 8000840:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data); /* 1F 1A 1C 1D  */
 8000842:	2102      	movs	r1, #2
 8000844:	4aaf      	ldr	r2, [pc, #700]	@ (8000b04 <WriteChar.isra.0+0x368>)
 8000846:	0028      	movs	r0, r5
 8000848:	f001 f8e0 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 800084c:	4641      	mov	r1, r8
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800084e:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1_1, LCD_DIGIT6_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000850:	0028      	movs	r0, r5
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 8000852:	0853      	lsrs	r3, r2, #1
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000854:	0852      	lsrs	r2, r2, #1
 8000856:	4032      	ands	r2, r6
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 8000858:	400b      	ands	r3, r1
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800085a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1_1, LCD_DIGIT6_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800085c:	2204      	movs	r2, #4
 800085e:	3101      	adds	r1, #1
 8000860:	4252      	negs	r2, r2
 8000862:	f001 f8d3 	bl	8001a0c <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000866:	4649      	mov	r1, r9
 8000868:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 800086a:	0028      	movs	r0, r5
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800086c:	0553      	lsls	r3, r2, #21
 800086e:	0752      	lsls	r2, r2, #29
 8000870:	400b      	ands	r3, r1
 8000872:	403a      	ands	r2, r7
 8000874:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000876:	2104      	movs	r1, #4
 8000878:	4aa2      	ldr	r2, [pc, #648]	@ (8000b04 <WriteChar.isra.0+0x368>)
 800087a:	f001 f8c7 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 800087e:	4641      	mov	r1, r8
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000880:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2_1, LCD_DIGIT6_COM2_1_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000882:	0028      	movs	r0, r5
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 8000884:	0853      	lsrs	r3, r2, #1
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000886:	0852      	lsrs	r2, r2, #1
 8000888:	4032      	ands	r2, r6
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 800088a:	400b      	ands	r3, r1
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800088c:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2_1, LCD_DIGIT6_COM2_1_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 800088e:	2204      	movs	r2, #4
 8000890:	3103      	adds	r1, #3
 8000892:	4252      	negs	r2, r2
 8000894:	f001 f8ba 	bl	8001a0c <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT)  | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000898:	4649      	mov	r1, r9
 800089a:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 800089c:	0028      	movs	r0, r5
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT)  | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800089e:	0553      	lsls	r3, r2, #21
 80008a0:	0752      	lsls	r2, r2, #29
 80008a2:	400b      	ands	r3, r1
 80008a4:	403a      	ands	r2, r7
 80008a6:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 80008a8:	2106      	movs	r1, #6
 80008aa:	4a96      	ldr	r2, [pc, #600]	@ (8000b04 <WriteChar.isra.0+0x368>)
 80008ac:	f001 f8ae 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80008b0:	68e2      	ldr	r2, [r4, #12]
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 80008b2:	4641      	mov	r1, r8
 80008b4:	0853      	lsrs	r3, r2, #1
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80008b6:	0852      	lsrs	r2, r2, #1
 80008b8:	4016      	ands	r6, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3_1, LCD_DIGIT6_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 80008ba:	2204      	movs	r2, #4
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) ;
 80008bc:	400b      	ands	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3_1, LCD_DIGIT6_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 80008be:	0028      	movs	r0, r5
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80008c0:	4333      	orrs	r3, r6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3_1, LCD_DIGIT6_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 80008c2:	4252      	negs	r2, r2
 80008c4:	3105      	adds	r1, #5
 80008c6:	f001 f8a1 	bl	8001a0c <HAL_LCD_Write>
      break;

    default:
      break;
  }
}
 80008ca:	bcc0      	pop	{r6, r7}
 80008cc:	46b9      	mov	r9, r7
 80008ce:	46b0      	mov	r8, r6
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (*Char)
 80008d2:	28b5      	cmp	r0, #181	@ 0xb5
 80008d4:	d100      	bne.n	80008d8 <WriteChar.isra.0+0x13c>
 80008d6:	e1f7      	b.n	8000cc8 <WriteChar.isra.0+0x52c>
 80008d8:	28ff      	cmp	r0, #255	@ 0xff
 80008da:	d000      	beq.n	80008de <WriteChar.isra.0+0x142>
 80008dc:	e222      	b.n	8000d24 <WriteChar.isra.0+0x588>
      ch = C_FULL;
 80008de:	4d8a      	ldr	r5, [pc, #552]	@ (8000b08 <WriteChar.isra.0+0x36c>)
 80008e0:	e770      	b.n	80007c4 <WriteChar.isra.0+0x28>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	2780      	movs	r7, #128	@ 0x80
 80008e6:	0549      	lsls	r1, r1, #21
 80008e8:	4688      	mov	r8, r1
 80008ea:	06d3      	lsls	r3, r2, #27
 80008ec:	04ff      	lsls	r7, r7, #19
 80008ee:	400b      	ands	r3, r1
 80008f0:	0611      	lsls	r1, r2, #24
 80008f2:	4039      	ands	r1, r7
 80008f4:	430b      	orrs	r3, r1
             | ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80008f6:	07d1      	lsls	r1, r2, #31
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80008f8:	4d81      	ldr	r5, [pc, #516]	@ (8000b00 <WriteChar.isra.0+0x364>)
             | ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80008fa:	0c09      	lsrs	r1, r1, #16
 80008fc:	08d2      	lsrs	r2, r2, #3
 80008fe:	430b      	orrs	r3, r1
 8000900:	06d2      	lsls	r2, r2, #27
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000902:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000904:	2100      	movs	r1, #0
 8000906:	0028      	movs	r0, r5
 8000908:	4a80      	ldr	r2, [pc, #512]	@ (8000b0c <WriteChar.isra.0+0x370>)
 800090a:	f001 f87f 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 800090e:	4641      	mov	r1, r8
             | ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT) ;
 8000910:	2680      	movs	r6, #128	@ 0x80
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000912:	6862      	ldr	r2, [r4, #4]
             | ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT) ;
 8000914:	0536      	lsls	r6, r6, #20
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000916:	06d3      	lsls	r3, r2, #27
 8000918:	400b      	ands	r3, r1
 800091a:	0611      	lsls	r1, r2, #24
 800091c:	4039      	ands	r1, r7
 800091e:	430b      	orrs	r3, r1
             | ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT) ;
 8000920:	07d1      	lsls	r1, r2, #31
 8000922:	0c09      	lsrs	r1, r1, #16
 8000924:	0612      	lsls	r2, r2, #24
 8000926:	4032      	ands	r2, r6
 8000928:	430b      	orrs	r3, r1
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 800092a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data); /* 1F 1A 1C 1D  */
 800092c:	2102      	movs	r1, #2
 800092e:	0028      	movs	r0, r5
 8000930:	4a76      	ldr	r2, [pc, #472]	@ (8000b0c <WriteChar.isra.0+0x370>)
 8000932:	f001 f86b 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000936:	4641      	mov	r1, r8
 8000938:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 800093a:	0028      	movs	r0, r5
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 800093c:	06d3      	lsls	r3, r2, #27
 800093e:	400b      	ands	r3, r1
 8000940:	0611      	lsls	r1, r2, #24
 8000942:	4039      	ands	r1, r7
 8000944:	430b      	orrs	r3, r1
             | ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000946:	07d1      	lsls	r1, r2, #31
 8000948:	0c09      	lsrs	r1, r1, #16
 800094a:	0612      	lsls	r2, r2, #24
 800094c:	4032      	ands	r2, r6
 800094e:	430b      	orrs	r3, r1
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000950:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000952:	2104      	movs	r1, #4
 8000954:	4a6d      	ldr	r2, [pc, #436]	@ (8000b0c <WriteChar.isra.0+0x370>)
 8000956:	f001 f859 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 800095a:	4641      	mov	r1, r8
 800095c:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 800095e:	0028      	movs	r0, r5
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000960:	06d3      	lsls	r3, r2, #27
 8000962:	400b      	ands	r3, r1
 8000964:	0611      	lsls	r1, r2, #24
 8000966:	4039      	ands	r1, r7
 8000968:	430b      	orrs	r3, r1
             | ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT) ;
 800096a:	07d1      	lsls	r1, r2, #31
 800096c:	0c09      	lsrs	r1, r1, #16
 800096e:	0612      	lsls	r2, r2, #24
 8000970:	4032      	ands	r2, r6
 8000972:	430b      	orrs	r3, r1
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT)
 8000974:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 8000976:	2106      	movs	r1, #6
 8000978:	4a64      	ldr	r2, [pc, #400]	@ (8000b0c <WriteChar.isra.0+0x370>)
 800097a:	f001 f847 	bl	8001a0c <HAL_LCD_Write>
      break;
 800097e:	e7a4      	b.n	80008ca <WriteChar.isra.0+0x12e>
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0353      	lsls	r3, r2, #13
 8000984:	01c9      	lsls	r1, r1, #7
 8000986:	4689      	mov	r9, r1
 8000988:	400b      	ands	r3, r1
 800098a:	2180      	movs	r1, #128	@ 0x80
      data = (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800098c:	2680      	movs	r6, #128	@ 0x80
 800098e:	2704      	movs	r7, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000990:	4d5b      	ldr	r5, [pc, #364]	@ (8000b00 <WriteChar.isra.0+0x364>)
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 8000992:	0109      	lsls	r1, r1, #4
 8000994:	02d2      	lsls	r2, r2, #11
 8000996:	400a      	ands	r2, r1
 8000998:	4688      	mov	r8, r1
 800099a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800099c:	2100      	movs	r1, #0
 800099e:	0028      	movs	r0, r5
 80009a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000b10 <WriteChar.isra.0+0x374>)
 80009a2:	f001 f833 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80009a6:	6822      	ldr	r2, [r4, #0]
 80009a8:	0276      	lsls	r6, r6, #9
 80009aa:	0853      	lsrs	r3, r2, #1
 80009ac:	0392      	lsls	r2, r2, #14
 80009ae:	4032      	ands	r2, r6
 80009b0:	403b      	ands	r3, r7
 80009b2:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 80009b4:	2101      	movs	r1, #1
 80009b6:	0028      	movs	r0, r5
 80009b8:	4a56      	ldr	r2, [pc, #344]	@ (8000b14 <WriteChar.isra.0+0x378>)
 80009ba:	f001 f827 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) ;
 80009be:	4649      	mov	r1, r9
 80009c0:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009c2:	0028      	movs	r0, r5
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) ;
 80009c4:	0353      	lsls	r3, r2, #13
 80009c6:	400b      	ands	r3, r1
 80009c8:	4641      	mov	r1, r8
 80009ca:	02d2      	lsls	r2, r2, #11
 80009cc:	400a      	ands	r2, r1
 80009ce:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009d0:	2102      	movs	r1, #2
 80009d2:	4a4f      	ldr	r2, [pc, #316]	@ (8000b10 <WriteChar.isra.0+0x374>)
 80009d4:	f001 f81a 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80009d8:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009da:	2103      	movs	r1, #3
      data = (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80009dc:	0853      	lsrs	r3, r2, #1
 80009de:	0392      	lsls	r2, r2, #14
 80009e0:	4032      	ands	r2, r6
 80009e2:	403b      	ands	r3, r7
 80009e4:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009e6:	0028      	movs	r0, r5
 80009e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000b14 <WriteChar.isra.0+0x378>)
 80009ea:	f001 f80f 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 80009ee:	4649      	mov	r1, r9
 80009f0:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80009f2:	0028      	movs	r0, r5
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 80009f4:	0353      	lsls	r3, r2, #13
 80009f6:	400b      	ands	r3, r1
 80009f8:	4641      	mov	r1, r8
 80009fa:	02d2      	lsls	r2, r2, #11
 80009fc:	400a      	ands	r2, r1
 80009fe:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a00:	2104      	movs	r1, #4
 8000a02:	4a43      	ldr	r2, [pc, #268]	@ (8000b10 <WriteChar.isra.0+0x374>)
 8000a04:	f001 f802 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000a08:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a0a:	2105      	movs	r1, #5
      data = (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000a0c:	0853      	lsrs	r3, r2, #1
 8000a0e:	0392      	lsls	r2, r2, #14
 8000a10:	4032      	ands	r2, r6
 8000a12:	403b      	ands	r3, r7
 8000a14:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a16:	0028      	movs	r0, r5
 8000a18:	4a3e      	ldr	r2, [pc, #248]	@ (8000b14 <WriteChar.isra.0+0x378>)
 8000a1a:	f000 fff7 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 8000a1e:	4649      	mov	r1, r9
 8000a20:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a22:	0028      	movs	r0, r5
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT)  ;
 8000a24:	0353      	lsls	r3, r2, #13
 8000a26:	400b      	ands	r3, r1
 8000a28:	4641      	mov	r1, r8
 8000a2a:	02d2      	lsls	r2, r2, #11
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a30:	2106      	movs	r1, #6
 8000a32:	4a37      	ldr	r2, [pc, #220]	@ (8000b10 <WriteChar.isra.0+0x374>)
 8000a34:	f000 ffea 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000a38:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a3a:	2107      	movs	r1, #7
      data = (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8000a3c:	0853      	lsrs	r3, r2, #1
 8000a3e:	0392      	lsls	r2, r2, #14
 8000a40:	4032      	ands	r2, r6
 8000a42:	403b      	ands	r3, r7
 8000a44:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a46:	0028      	movs	r0, r5
 8000a48:	4a32      	ldr	r2, [pc, #200]	@ (8000b14 <WriteChar.isra.0+0x378>)
 8000a4a:	f000 ffdf 	bl	8001a0c <HAL_LCD_Write>
      break;
 8000a4e:	e73c      	b.n	80008ca <WriteChar.isra.0+0x12e>
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a50:	2008      	movs	r0, #8
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a52:	2680      	movs	r6, #128	@ 0x80
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a54:	4680      	mov	r8, r0
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a56:	0853      	lsrs	r3, r2, #1
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a58:	0051      	lsls	r1, r2, #1
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a5a:	07db      	lsls	r3, r3, #31
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a5c:	4001      	ands	r1, r0
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	01f6      	lsls	r6, r6, #7
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a62:	430b      	orrs	r3, r1
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a64:	0391      	lsls	r1, r2, #14
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0_1, LCD_DIGIT3_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000a66:	4d26      	ldr	r5, [pc, #152]	@ (8000b00 <WriteChar.isra.0+0x364>)
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a68:	4031      	ands	r1, r6
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a6a:	08d2      	lsrs	r2, r2, #3
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	0112      	lsls	r2, r2, #4
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a70:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0_1, LCD_DIGIT3_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000a72:	2101      	movs	r1, #1
 8000a74:	0028      	movs	r0, r5
 8000a76:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <WriteChar.isra.0+0x37c>)
 8000a78:	f000 ffc8 	bl	8001a0c <HAL_LCD_Write>
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	2710      	movs	r7, #16
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a80:	6862      	ldr	r2, [r4, #4]
 8000a82:	0853      	lsrs	r3, r2, #1
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a84:	0051      	lsls	r1, r2, #1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a86:	07db      	lsls	r3, r3, #31
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a88:	4001      	ands	r1, r0
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a8a:	0c1b      	lsrs	r3, r3, #16
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a8c:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a8e:	0391      	lsls	r1, r2, #14
 8000a90:	4031      	ands	r1, r6
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000a92:	0052      	lsls	r2, r2, #1
 8000a94:	403a      	ands	r2, r7
 8000a96:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000a98:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1_1, LCD_DIGIT3_COM1_1_SEG_MASK, data); /* 1F 1A 1C 1D  */
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	0028      	movs	r0, r5
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b18 <WriteChar.isra.0+0x37c>)
 8000aa0:	f000 ffb4 	bl	8001a0c <HAL_LCD_Write>
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000aa4:	4640      	mov	r0, r8
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000aa6:	68a2      	ldr	r2, [r4, #8]
 8000aa8:	0853      	lsrs	r3, r2, #1
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000aaa:	0051      	lsls	r1, r2, #1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000aac:	07db      	lsls	r3, r3, #31
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000aae:	4001      	ands	r1, r0
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ab0:	0c1b      	lsrs	r3, r3, #16
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ab2:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ab4:	0391      	lsls	r1, r2, #14
 8000ab6:	4031      	ands	r1, r6
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	403a      	ands	r2, r7
 8000abc:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000abe:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2_1, LCD_DIGIT3_COM2_1_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <WriteChar.isra.0+0x37c>)
 8000ac6:	f000 ffa1 	bl	8001a0c <HAL_LCD_Write>
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000aca:	4640      	mov	r0, r8
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000acc:	68e2      	ldr	r2, [r4, #12]
 8000ace:	0853      	lsrs	r3, r2, #1
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ad0:	0051      	lsls	r1, r2, #1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ad2:	07db      	lsls	r3, r3, #31
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ad4:	4001      	ands	r1, r0
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ad6:	0c1b      	lsrs	r3, r3, #16
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ad8:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ada:	0391      	lsls	r1, r2, #14
 8000adc:	4031      	ands	r1, r6
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	403a      	ands	r2, r7
 8000ae2:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000ae4:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3_1, LCD_DIGIT3_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 8000ae6:	2107      	movs	r1, #7
 8000ae8:	0028      	movs	r0, r5
 8000aea:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <WriteChar.isra.0+0x37c>)
 8000aec:	f000 ff8e 	bl	8001a0c <HAL_LCD_Write>
      break;
 8000af0:	e6eb      	b.n	80008ca <WriteChar.isra.0+0x12e>
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	08002ee8 	.word	0x08002ee8
 8000af8:	20000100 	.word	0x20000100
 8000afc:	08003024 	.word	0x08003024
 8000b00:	20000110 	.word	0x20000110
 8000b04:	deffffff 	.word	0xdeffffff
 8000b08:	0000ffdd 	.word	0x0000ffdd
 8000b0c:	e3ff7fff 	.word	0xe3ff7fff
 8000b10:	ffffb7ff 	.word	0xffffb7ff
 8000b14:	fffefffb 	.word	0xfffefffb
 8000b18:	ffff3fe7 	.word	0xffff3fe7
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b1c:	2640      	movs	r6, #64	@ 0x40
 8000b1e:	0193      	lsls	r3, r2, #6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000b20:	2241      	movs	r2, #65	@ 0x41
 8000b22:	4d83      	ldr	r5, [pc, #524]	@ (8000d30 <WriteChar.isra.0+0x594>)
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b24:	4033      	ands	r3, r6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000b26:	2100      	movs	r1, #0
 8000b28:	0028      	movs	r0, r5
 8000b2a:	4252      	negs	r2, r2
 8000b2c:	f000 ff6e 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b30:	2180      	movs	r1, #128	@ 0x80
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000b32:	2720      	movs	r7, #32
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	0189      	lsls	r1, r1, #6
 8000b38:	0313      	lsls	r3, r2, #12
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	400b      	ands	r3, r1
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000b3e:	00d1      	lsls	r1, r2, #3
 8000b40:	4039      	ands	r1, r7
 8000b42:	00d2      	lsls	r2, r2, #3
 8000b44:	4032      	ands	r2, r6
 8000b46:	430b      	orrs	r3, r1
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b48:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0_1, LCD_DIGIT2_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	0028      	movs	r0, r5
 8000b4e:	4a79      	ldr	r2, [pc, #484]	@ (8000d34 <WriteChar.isra.0+0x598>)
 8000b50:	f000 ff5c 	bl	8001a0c <HAL_LCD_Write>
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000b54:	2241      	movs	r2, #65	@ 0x41
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b56:	6863      	ldr	r3, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000b58:	2102      	movs	r1, #2
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b5a:	019b      	lsls	r3, r3, #6
 8000b5c:	4033      	ands	r3, r6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000b5e:	0028      	movs	r0, r5
 8000b60:	4252      	negs	r2, r2
 8000b62:	f000 ff53 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b66:	4641      	mov	r1, r8
 8000b68:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1_1, LCD_DIGIT2_COM1_1_SEG_MASK, data); /* 1F 1A 1C 1D  */
 8000b6a:	0028      	movs	r0, r5
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b6c:	0313      	lsls	r3, r2, #12
 8000b6e:	400b      	ands	r3, r1
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000b70:	00d1      	lsls	r1, r2, #3
 8000b72:	4039      	ands	r1, r7
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	4032      	ands	r2, r6
 8000b78:	430b      	orrs	r3, r1
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b7a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1_1, LCD_DIGIT2_COM1_1_SEG_MASK, data); /* 1F 1A 1C 1D  */
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8000d34 <WriteChar.isra.0+0x598>)
 8000b80:	f000 ff44 	bl	8001a0c <HAL_LCD_Write>
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000b84:	2241      	movs	r2, #65	@ 0x41
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b86:	68a3      	ldr	r3, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000b88:	2104      	movs	r1, #4
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) ;
 8000b8a:	019b      	lsls	r3, r3, #6
 8000b8c:	4033      	ands	r3, r6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000b8e:	0028      	movs	r0, r5
 8000b90:	4252      	negs	r2, r2
 8000b92:	f000 ff3b 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b96:	4641      	mov	r1, r8
 8000b98:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2_1, LCD_DIGIT2_COM2_1_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000b9a:	0028      	movs	r0, r5
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000b9c:	0313      	lsls	r3, r2, #12
 8000b9e:	400b      	ands	r3, r1
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000ba0:	00d1      	lsls	r1, r2, #3
 8000ba2:	4039      	ands	r1, r7
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	4032      	ands	r2, r6
 8000ba8:	430b      	orrs	r3, r1
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000baa:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2_1, LCD_DIGIT2_COM2_1_SEG_MASK, data); /* 1Q 1K 1Col 1P  */
 8000bac:	2105      	movs	r1, #5
 8000bae:	4a61      	ldr	r2, [pc, #388]	@ (8000d34 <WriteChar.isra.0+0x598>)
 8000bb0:	f000 ff2c 	bl	8001a0c <HAL_LCD_Write>
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000bb4:	2241      	movs	r2, #65	@ 0x41
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) ;
 8000bb6:	68e3      	ldr	r3, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000bb8:	2106      	movs	r1, #6
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) ;
 8000bba:	019b      	lsls	r3, r3, #6
 8000bbc:	4033      	ands	r3, r6
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000bbe:	0028      	movs	r0, r5
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	f000 ff23 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3_1, LCD_DIGIT2_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 8000bca:	0028      	movs	r0, r5
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000bcc:	0313      	lsls	r3, r2, #12
 8000bce:	400b      	ands	r3, r1
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000bd0:	00d1      	lsls	r1, r2, #3
 8000bd2:	4039      	ands	r1, r7
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	4032      	ands	r2, r6
 8000bd8:	430b      	orrs	r3, r1
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000bda:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3_1, LCD_DIGIT2_COM3_1_SEG_MASK, data); /* 1H 1J 1DP 1N  */
 8000bdc:	2107      	movs	r1, #7
 8000bde:	4a55      	ldr	r2, [pc, #340]	@ (8000d34 <WriteChar.isra.0+0x598>)
 8000be0:	f000 ff14 	bl	8001a0c <HAL_LCD_Write>
      break;
 8000be4:	e671      	b.n	80008ca <WriteChar.isra.0+0x12e>
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	0593      	lsls	r3, r2, #22
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4688      	mov	r8, r1
 8000bee:	400b      	ands	r3, r1
 8000bf0:	2180      	movs	r1, #128	@ 0x80
      data = (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT) ;
 8000bf2:	2780      	movs	r7, #128	@ 0x80
 8000bf4:	26ff      	movs	r6, #255	@ 0xff
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000bf6:	4d4e      	ldr	r5, [pc, #312]	@ (8000d30 <WriteChar.isra.0+0x594>)
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000bf8:	03c9      	lsls	r1, r1, #15
 8000bfa:	0592      	lsls	r2, r2, #22
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	4689      	mov	r9, r1
 8000c00:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000c02:	2100      	movs	r1, #0
 8000c04:	0028      	movs	r0, r5
 8000c06:	4a4c      	ldr	r2, [pc, #304]	@ (8000d38 <WriteChar.isra.0+0x59c>)
 8000c08:	f000 ff00 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT) ;
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	02bf      	lsls	r7, r7, #10
 8000c10:	0893      	lsrs	r3, r2, #2
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	0392      	lsls	r2, r2, #14
 8000c16:	403a      	ands	r2, r7
 8000c18:	4033      	ands	r3, r6
 8000c1a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0_1, LCD_DIGIT1_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	0028      	movs	r0, r5
 8000c20:	4a46      	ldr	r2, [pc, #280]	@ (8000d3c <WriteChar.isra.0+0x5a0>)
 8000c22:	f000 fef3 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c26:	4641      	mov	r1, r8
 8000c28:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000c2a:	0028      	movs	r0, r5
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c2c:	0593      	lsls	r3, r2, #22
 8000c2e:	400b      	ands	r3, r1
 8000c30:	4649      	mov	r1, r9
 8000c32:	0592      	lsls	r2, r2, #22
 8000c34:	400a      	ands	r2, r1
 8000c36:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d38 <WriteChar.isra.0+0x59c>)
 8000c3c:	f000 fee6 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000c40:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1_1, LCD_DIGIT1_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000c42:	2103      	movs	r1, #3
      data = (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000c44:	0893      	lsrs	r3, r2, #2
 8000c46:	01db      	lsls	r3, r3, #7
 8000c48:	0392      	lsls	r2, r2, #14
 8000c4a:	403a      	ands	r2, r7
 8000c4c:	4033      	ands	r3, r6
 8000c4e:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1_1, LCD_DIGIT1_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000c50:	0028      	movs	r0, r5
 8000c52:	4a3a      	ldr	r2, [pc, #232]	@ (8000d3c <WriteChar.isra.0+0x5a0>)
 8000c54:	f000 feda 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c58:	4641      	mov	r1, r8
 8000c5a:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000c5c:	0028      	movs	r0, r5
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c5e:	0593      	lsls	r3, r2, #22
 8000c60:	400b      	ands	r3, r1
 8000c62:	4649      	mov	r1, r9
 8000c64:	0592      	lsls	r2, r2, #22
 8000c66:	400a      	ands	r2, r1
 8000c68:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4a32      	ldr	r2, [pc, #200]	@ (8000d38 <WriteChar.isra.0+0x59c>)
 8000c6e:	f000 fecd 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT) ;
 8000c72:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2_1, LCD_DIGIT1_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000c74:	2105      	movs	r1, #5
      data = (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT) ;
 8000c76:	0893      	lsrs	r3, r2, #2
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	0392      	lsls	r2, r2, #14
 8000c7c:	403a      	ands	r2, r7
 8000c7e:	4033      	ands	r3, r6
 8000c80:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2_1, LCD_DIGIT1_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000c82:	0028      	movs	r0, r5
 8000c84:	4a2d      	ldr	r2, [pc, #180]	@ (8000d3c <WriteChar.isra.0+0x5a0>)
 8000c86:	f000 fec1 	bl	8001a0c <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000c8e:	0028      	movs	r0, r5
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT);
 8000c90:	0593      	lsls	r3, r2, #22
 8000c92:	400b      	ands	r3, r1
 8000c94:	4649      	mov	r1, r9
 8000c96:	0592      	lsls	r2, r2, #22
 8000c98:	400a      	ands	r2, r1
 8000c9a:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000c9c:	2106      	movs	r1, #6
 8000c9e:	4a26      	ldr	r2, [pc, #152]	@ (8000d38 <WriteChar.isra.0+0x59c>)
 8000ca0:	f000 feb4 	bl	8001a0c <HAL_LCD_Write>
      data = (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT)  | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000ca4:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3_1, LCD_DIGIT1_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000ca6:	2107      	movs	r1, #7
      data = (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT)  | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000ca8:	0893      	lsrs	r3, r2, #2
 8000caa:	01db      	lsls	r3, r3, #7
 8000cac:	0392      	lsls	r2, r2, #14
 8000cae:	403a      	ands	r2, r7
 8000cb0:	4033      	ands	r3, r6
 8000cb2:	4313      	orrs	r3, r2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3_1, LCD_DIGIT1_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000cb4:	0028      	movs	r0, r5
 8000cb6:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <WriteChar.isra.0+0x5a0>)
 8000cb8:	f000 fea8 	bl	8001a0c <HAL_LCD_Write>
      break;
 8000cbc:	e605      	b.n	80008ca <WriteChar.isra.0+0x12e>
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8000cbe:	4c20      	ldr	r4, [pc, #128]	@ (8000d40 <WriteChar.isra.0+0x5a4>)
 8000cc0:	3830      	subs	r0, #48	@ 0x30
 8000cc2:	0040      	lsls	r0, r0, #1
 8000cc4:	5b05      	ldrh	r5, [r0, r4]
      break;
 8000cc6:	e57d      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_UMAP;
 8000cc8:	4d1e      	ldr	r5, [pc, #120]	@ (8000d44 <WriteChar.isra.0+0x5a8>)
 8000cca:	e57b      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_NMAP;
 8000ccc:	4d1e      	ldr	r5, [pc, #120]	@ (8000d48 <WriteChar.isra.0+0x5ac>)
      break;
 8000cce:	e579      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_PERCENT_2;
 8000cd0:	25b3      	movs	r5, #179	@ 0xb3
 8000cd2:	022d      	lsls	r5, r5, #8
      break;
 8000cd4:	e576      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_CLOSEPARMAP;
 8000cd6:	2511      	movs	r5, #17
      break;
 8000cd8:	e574      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_PLUS;
 8000cda:	4d1c      	ldr	r5, [pc, #112]	@ (8000d4c <WriteChar.isra.0+0x5b0>)
      break;
 8000cdc:	e572      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_MINUS;
 8000cde:	25a0      	movs	r5, #160	@ 0xa0
 8000ce0:	022d      	lsls	r5, r5, #8
      break;
 8000ce2:	e56f      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_SLATCH;
 8000ce4:	25c0      	movs	r5, #192	@ 0xc0
      break;
 8000ce6:	e56d      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_MMAP;
 8000ce8:	4d19      	ldr	r5, [pc, #100]	@ (8000d50 <WriteChar.isra.0+0x5b4>)
      break;
 8000cea:	e56b      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_BMAP;
 8000cec:	25bb      	movs	r5, #187	@ 0xbb
 8000cee:	022d      	lsls	r5, r5, #8
      break;
 8000cf0:	e568      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_DMAP;
 8000cf2:	25f3      	movs	r5, #243	@ 0xf3
 8000cf4:	022d      	lsls	r5, r5, #8
      break;
 8000cf6:	e565      	b.n	80007c4 <WriteChar.isra.0+0x28>
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8000cf8:	0004      	movs	r4, r0
 8000cfa:	3c41      	subs	r4, #65	@ 0x41
 8000cfc:	b2e5      	uxtb	r5, r4
 8000cfe:	2d19      	cmp	r5, #25
 8000d00:	d90c      	bls.n	8000d1c <WriteChar.isra.0+0x580>
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8000d02:	3861      	subs	r0, #97	@ 0x61
 8000d04:	b2c4      	uxtb	r4, r0
 8000d06:	2c19      	cmp	r4, #25
 8000d08:	d900      	bls.n	8000d0c <WriteChar.isra.0+0x570>
 8000d0a:	e55a      	b.n	80007c2 <WriteChar.isra.0+0x26>
        ch = CapLetterMap[*Char - 'a'];
 8000d0c:	4c11      	ldr	r4, [pc, #68]	@ (8000d54 <WriteChar.isra.0+0x5b8>)
 8000d0e:	0040      	lsls	r0, r0, #1
 8000d10:	5b05      	ldrh	r5, [r0, r4]
 8000d12:	e557      	b.n	80007c4 <WriteChar.isra.0+0x28>
  switch (*Char)
 8000d14:	4d10      	ldr	r5, [pc, #64]	@ (8000d58 <WriteChar.isra.0+0x5bc>)
 8000d16:	e555      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_OPENPARMAP;
 8000d18:	2528      	movs	r5, #40	@ 0x28
 8000d1a:	e553      	b.n	80007c4 <WriteChar.isra.0+0x28>
        ch = CapLetterMap[*Char - 'A'];
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <WriteChar.isra.0+0x5b8>)
 8000d1e:	0064      	lsls	r4, r4, #1
 8000d20:	5a25      	ldrh	r5, [r4, r0]
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8000d22:	e54f      	b.n	80007c4 <WriteChar.isra.0+0x28>
      ch = C_PERCENT_1;
 8000d24:	25ec      	movs	r5, #236	@ 0xec
 8000d26:	022d      	lsls	r5, r5, #8
  switch (*Char)
 8000d28:	28b0      	cmp	r0, #176	@ 0xb0
 8000d2a:	d100      	bne.n	8000d2e <WriteChar.isra.0+0x592>
 8000d2c:	e54a      	b.n	80007c4 <WriteChar.isra.0+0x28>
 8000d2e:	e7e8      	b.n	8000d02 <WriteChar.isra.0+0x566>
 8000d30:	20000110 	.word	0x20000110
 8000d34:	ffffdf9f 	.word	0xffffdf9f
 8000d38:	ff3fffff 	.word	0xff3fffff
 8000d3c:	fffdff7f 	.word	0xfffdff7f
 8000d40:	0800303c 	.word	0x0800303c
 8000d44:	00006084 	.word	0x00006084
 8000d48:	00002210 	.word	0x00002210
 8000d4c:	0000a014 	.word	0x0000a014
 8000d50:	0000b210 	.word	0x0000b210
 8000d54:	08003050 	.word	0x08003050
 8000d58:	0000a0dd 	.word	0x0000a0dd

08000d5c <BSP_LCD_GLASS_Init>:
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCDHandle.Instance              = LCD;
 8000d5e:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <BSP_LCD_GLASS_Init+0x158>)
 8000d60:	4c55      	ldr	r4, [pc, #340]	@ (8000eb8 <BSP_LCD_GLASS_Init+0x15c>)
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8000d62:	2240      	movs	r2, #64	@ 0x40
  LCDHandle.Instance              = LCD;
 8000d64:	6023      	str	r3, [r4, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_2;
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	03db      	lsls	r3, r3, #15
 8000d6a:	6063      	str	r3, [r4, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8000d6c:	23f0      	movs	r3, #240	@ 0xf0
 8000d6e:	039b      	lsls	r3, r3, #14
 8000d70:	60a3      	str	r3, [r4, #8]
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8000d72:	230c      	movs	r3, #12
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8000d74:	6122      	str	r2, [r4, #16]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8000d76:	6222      	str	r2, [r4, #32]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_7;
 8000d78:	21e0      	movs	r1, #224	@ 0xe0
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8000d7a:	2280      	movs	r2, #128	@ 0x80
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8000d7c:	60e3      	str	r3, [r4, #12]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_ENABLE;
 8000d7e:	2601      	movs	r6, #1
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8000d80:	2300      	movs	r3, #0
{
 8000d82:	b0b3      	sub	sp, #204	@ 0xcc
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_7;
 8000d84:	0149      	lsls	r1, r1, #5
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8000d86:	01d2      	lsls	r2, r2, #7
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_7;
 8000d88:	61a1      	str	r1, [r4, #24]
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8000d8a:	62e2      	str	r2, [r4, #44]	@ 0x2c
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2214      	movs	r2, #20
 8000d90:	a808      	add	r0, sp, #32
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8000d92:	6163      	str	r3, [r4, #20]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8000d94:	61e3      	str	r3, [r4, #28]
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8000d96:	62a3      	str	r3, [r4, #40]	@ 0x28
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8000d98:	6323      	str	r3, [r4, #48]	@ 0x30
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_ENABLE;
 8000d9a:	6266      	str	r6, [r4, #36]	@ 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000d9c:	f002 f850 	bl	8002e40 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000da0:	2248      	movs	r2, #72	@ 0x48
 8000da2:	2100      	movs	r1, #0
 8000da4:	a820      	add	r0, sp, #128	@ 0x80
 8000da6:	f002 f84b 	bl	8002e40 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8000daa:	2244      	movs	r2, #68	@ 0x44
 8000dac:	2100      	movs	r1, #0
 8000dae:	a80e      	add	r0, sp, #56	@ 0x38
 8000db0:	f002 f846 	bl	8002e40 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	4d41      	ldr	r5, [pc, #260]	@ (8000ebc <BSP_LCD_GLASS_Init+0x160>)
 8000db8:	0552      	lsls	r2, r2, #21
 8000dba:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8000dbc:	2704      	movs	r7, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	65ab      	str	r3, [r5, #88]	@ 0x58
 8000dc2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000dc4:	a81f      	add	r0, sp, #124	@ 0x7c
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	9b01      	ldr	r3, [sp, #4]
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8000dcc:	2381      	movs	r3, #129	@ 0x81
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8000dce:	971f      	str	r7, [sp, #124]	@ 0x7c
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8000dd0:	9321      	str	r3, [sp, #132]	@ 0x84
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000dd2:	f001 f9dd 	bl	8002190 <HAL_RCC_OscConfig>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d000      	beq.n	8000ddc <BSP_LCD_GLASS_Init+0x80>
    while (1);
 8000dda:	e7fe      	b.n	8000dda <BSP_LCD_GLASS_Init+0x7e>
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	930e      	str	r3, [sp, #56]	@ 0x38
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de2:	2380      	movs	r3, #128	@ 0x80
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000de4:	a80e      	add	r0, sp, #56	@ 0x38
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	931e      	str	r3, [sp, #120]	@ 0x78
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000dea:	f001 fd9f 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000df0:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4333      	orrs	r3, r6
 8000df4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000df6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000df8:	a908      	add	r1, sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	401e      	ands	r6, r3
 8000dfc:	9602      	str	r6, [sp, #8]
 8000dfe:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	2302      	movs	r3, #2
 8000e02:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000e04:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	431a      	orrs	r2, r3
 8000e08:	64ea      	str	r2, [r5, #76]	@ 0x4c
 8000e0a:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e14:	433b      	orrs	r3, r7
 8000e16:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000e18:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e1a:	401f      	ands	r7, r3
 8000e1c:	9704      	str	r7, [sp, #16]
 8000e1e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	2308      	movs	r3, #8
 8000e22:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8000e24:	431a      	orrs	r2, r3
 8000e26:	64ea      	str	r2, [r5, #76]	@ 0x4c
 8000e28:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	9305      	str	r3, [sp, #20]
 8000e2e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e30:	2310      	movs	r3, #16
 8000e32:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8000e34:	431a      	orrs	r2, r3
 8000e36:	64ea      	str	r2, [r5, #76]	@ 0x4c
 8000e38:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8000e3e:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e40:	9b06      	ldr	r3, [sp, #24]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8000e42:	2302      	movs	r3, #2
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	9208      	str	r2, [sp, #32]
 8000e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	920a      	str	r2, [sp, #40]	@ 0x28
 8000e50:	930b      	str	r3, [sp, #44]	@ 0x2c
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8000e52:	230b      	movs	r3, #11
 8000e54:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000e56:	f000 fc49 	bl	80016ec <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <BSP_LCD_GLASS_Init+0x164>)
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8000e5c:	a908      	add	r1, sp, #32
 8000e5e:	4819      	ldr	r0, [pc, #100]	@ (8000ec4 <BSP_LCD_GLASS_Init+0x168>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8000e60:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8000e62:	f000 fc43 	bl	80016ec <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <BSP_LCD_GLASS_Init+0x16c>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000e68:	a908      	add	r1, sp, #32
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <BSP_LCD_GLASS_Init+0x170>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8000e6c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000e6e:	f000 fc3d 	bl	80016ec <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <BSP_LCD_GLASS_Init+0x174>)
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000e74:	a908      	add	r1, sp, #32
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <BSP_LCD_GLASS_Init+0x178>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8000e78:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000e7a:	f000 fc37 	bl	80016ec <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKE_PINS;
 8000e7e:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOE, &gpioinitstruct);
 8000e80:	a908      	add	r1, sp, #32
  gpioinitstruct.Pin        = LCD_GPIO_BANKE_PINS;
 8000e82:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOE, &gpioinitstruct);
 8000e84:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <BSP_LCD_GLASS_Init+0x17c>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKE_PINS;
 8000e86:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpioinitstruct);
 8000e88:	f000 fc30 	bl	80016ec <HAL_GPIO_Init>
  HAL_Delay(2);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fa99 	bl	80013c4 <HAL_Delay>
  __HAL_RCC_LCD_CLK_ENABLE();
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8000e9c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  HAL_LCD_Init(&LCDHandle);
 8000e9e:	0020      	movs	r0, r4
  __HAL_RCC_LCD_CLK_ENABLE();
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	9307      	str	r3, [sp, #28]
 8000ea4:	9b07      	ldr	r3, [sp, #28]
  HAL_LCD_Init(&LCDHandle);
 8000ea6:	f000 fd29 	bl	80018fc <HAL_LCD_Init>
  HAL_LCD_Clear(&LCDHandle);
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f000 fdf2 	bl	8001a94 <HAL_LCD_Clear>
}
 8000eb0:	b033      	add	sp, #204	@ 0xcc
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	40002400 	.word	0x40002400
 8000eb8:	20000110 	.word	0x20000110
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	0000ca02 	.word	0x0000ca02
 8000ec4:	50000400 	.word	0x50000400
 8000ec8:	00000f78 	.word	0x00000f78
 8000ecc:	50000800 	.word	0x50000800
 8000ed0:	0000337b 	.word	0x0000337b
 8000ed4:	50000c00 	.word	0x50000c00
 8000ed8:	50001000 	.word	0x50001000

08000edc <BSP_LCD_GLASS_DisplayString>:
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	0005      	movs	r5, r0
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8000ee0:	7800      	ldrb	r0, [r0, #0]
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d00c      	beq.n	8000f00 <BSP_LCD_GLASS_DisplayString+0x24>
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	3501      	adds	r5, #1
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	b2e3      	uxtb	r3, r4
 8000ef0:	f7ff fc54 	bl	800079c <WriteChar.isra.0>
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8000ef4:	5d28      	ldrb	r0, [r5, r4]
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d002      	beq.n	8000f00 <BSP_LCD_GLASS_DisplayString+0x24>
 8000efa:	3401      	adds	r4, #1
 8000efc:	2c06      	cmp	r4, #6
 8000efe:	d1f4      	bne.n	8000eea <BSP_LCD_GLASS_DisplayString+0xe>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000f00:	4801      	ldr	r0, [pc, #4]	@ (8000f08 <BSP_LCD_GLASS_DisplayString+0x2c>)
 8000f02:	f000 fe23 	bl	8001b4c <HAL_LCD_UpdateDisplayRequest>
}
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	20000110 	.word	0x20000110

08000f0c <BSP_LCD_GLASS_DisplayStrDeci>:
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f0c:	8802      	ldrh	r2, [r0, #0]
{
 8000f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f10:	0005      	movs	r5, r0
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d023      	beq.n	8000f5e <BSP_LCD_GLASS_DisplayStrDeci+0x52>
    switch ((*ptr) & 0xF000)
 8000f16:	2780      	movs	r7, #128	@ 0x80
 8000f18:	2680      	movs	r6, #128	@ 0x80
  DigitPosition_Typedef index = LCD_DIGIT_POSITION_1;
 8000f1a:	2400      	movs	r4, #0
    switch ((*ptr) & 0xF000)
 8000f1c:	01ff      	lsls	r7, r7, #7
 8000f1e:	0236      	lsls	r6, r6, #8
 8000f20:	e00b      	b.n	8000f3a <BSP_LCD_GLASS_DisplayStrDeci+0x2e>
        WriteChar(&tmpchar, POINT_ON, DOUBLEPOINT_OFF, index);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2101      	movs	r1, #1
 8000f26:	f7ff fc39 	bl	800079c <WriteChar.isra.0>
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f2a:	886a      	ldrh	r2, [r5, #2]
    index++;
 8000f2c:	3401      	adds	r4, #1
    ptr++;
 8000f2e:	3502      	adds	r5, #2
    index++;
 8000f30:	b2e4      	uxtb	r4, r4
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d013      	beq.n	8000f5e <BSP_LCD_GLASS_DisplayStrDeci+0x52>
 8000f36:	2c06      	cmp	r4, #6
 8000f38:	d011      	beq.n	8000f5e <BSP_LCD_GLASS_DisplayStrDeci+0x52>
    tmpchar = (*ptr) & 0x00FF;
 8000f3a:	b2d0      	uxtb	r0, r2
    switch ((*ptr) & 0xF000)
 8000f3c:	0b12      	lsrs	r2, r2, #12
        WriteChar(&tmpchar, POINT_OFF, DOUBLEPOINT_OFF, index);
 8000f3e:	0023      	movs	r3, r4
 8000f40:	0312      	lsls	r2, r2, #12
    switch ((*ptr) & 0xF000)
 8000f42:	42ba      	cmp	r2, r7
 8000f44:	d00f      	beq.n	8000f66 <BSP_LCD_GLASS_DisplayStrDeci+0x5a>
 8000f46:	42b2      	cmp	r2, r6
 8000f48:	d0eb      	beq.n	8000f22 <BSP_LCD_GLASS_DisplayStrDeci+0x16>
        WriteChar(&tmpchar, POINT_OFF, DOUBLEPOINT_OFF, index);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
    ptr++;
 8000f4e:	3502      	adds	r5, #2
        WriteChar(&tmpchar, POINT_OFF, DOUBLEPOINT_OFF, index);
 8000f50:	f7ff fc24 	bl	800079c <WriteChar.isra.0>
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f54:	882a      	ldrh	r2, [r5, #0]
    index++;
 8000f56:	3401      	adds	r4, #1
 8000f58:	b2e4      	uxtb	r4, r4
  while ((*ptr != 0) && (index <= LCD_DIGIT_POSITION_6))
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d1eb      	bne.n	8000f36 <BSP_LCD_GLASS_DisplayStrDeci+0x2a>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000f5e:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <BSP_LCD_GLASS_DisplayStrDeci+0x64>)
 8000f60:	f000 fdf4 	bl	8001b4c <HAL_LCD_UpdateDisplayRequest>
}
 8000f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WriteChar(&tmpchar, POINT_OFF, DOUBLEPOINT_ON, index);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f7ff fc17 	bl	800079c <WriteChar.isra.0>
        break;
 8000f6e:	e7dc      	b.n	8000f2a <BSP_LCD_GLASS_DisplayStrDeci+0x1e>
 8000f70:	20000110 	.word	0x20000110

08000f74 <BSP_LCD_GLASS_Clear>:
{
 8000f74:	b510      	push	{r4, lr}
  HAL_LCD_Clear(&LCDHandle);
 8000f76:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <BSP_LCD_GLASS_Clear+0xc>)
 8000f78:	f000 fd8c 	bl	8001a94 <HAL_LCD_Clear>
}
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	20000110 	.word	0x20000110

08000f84 <BSP_LCD_GLASS_ScrollSentence>:
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	46de      	mov	lr, fp
 8000f88:	4645      	mov	r5, r8
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	b5e0      	push	{r5, r6, r7, lr}
  bLCDGlass_KeyPressed = 0;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <BSP_LCD_GLASS_ScrollSentence+0x140>)
{
 8000f92:	b087      	sub	sp, #28
 8000f94:	4693      	mov	fp, r2
  bLCDGlass_KeyPressed = 0;
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2300      	movs	r3, #0
{
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	000c      	movs	r4, r1
  bLCDGlass_KeyPressed = 0;
 8000fa0:	7013      	strb	r3, [r2, #0]
  if (ptr == 0)
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	d07d      	beq.n	80010a2 <BSP_LCD_GLASS_ScrollSentence+0x11e>
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8000fa6:	7807      	ldrb	r7, [r0, #0]
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	d004      	beq.n	8000fb6 <BSP_LCD_GLASS_ScrollSentence+0x32>
 8000fac:	3001      	adds	r0, #1
 8000fae:	f7ff f8ab 	bl	8000108 <strlen>
 8000fb2:	3001      	adds	r0, #1
 8000fb4:	b2c7      	uxtb	r7, r0
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <BSP_LCD_GLASS_ScrollSentence+0x144>)
  for (repetition = 0; repetition < nScroll; repetition++)
 8000fb8:	2500      	movs	r5, #0
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000fba:	0018      	movs	r0, r3
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	f000 fdc5 	bl	8001b4c <HAL_LCD_UpdateDisplayRequest>
  HAL_Delay(ScrollSpeed);
 8000fc2:	4658      	mov	r0, fp
 8000fc4:	f000 f9fe 	bl	80013c4 <HAL_Delay>
  for (repetition = 0; repetition < nScroll; repetition++)
 8000fc8:	2c00      	cmp	r4, #0
 8000fca:	d06a      	beq.n	80010a2 <BSP_LCD_GLASS_ScrollSentence+0x11e>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8000fcc:	2f00      	cmp	r7, #0
 8000fce:	d100      	bne.n	8000fd2 <BSP_LCD_GLASS_ScrollSentence+0x4e>
 8000fd0:	e072      	b.n	80010b8 <BSP_LCD_GLASS_ScrollSentence+0x134>
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	9502      	str	r5, [sp, #8]
 8000fda:	4645      	mov	r5, r8
 8000fdc:	4698      	mov	r8, r3
 8000fde:	9403      	str	r4, [sp, #12]
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	46a9      	mov	r9, r5
 8000fe4:	469b      	mov	fp, r3
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	469c      	mov	ip, r3
 8000fea:	465e      	mov	r6, fp
 8000fec:	44e3      	add	fp, ip
 8000fee:	0039      	movs	r1, r7
 8000ff0:	4658      	mov	r0, fp
 8000ff2:	f7ff fa01 	bl	80003f8 <__aeabi_idivmod>
 8000ff6:	464b      	mov	r3, r9
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8000ff8:	1cb0      	adds	r0, r6, #2
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8000ffa:	5c5c      	ldrb	r4, [r3, r1]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8000ffc:	0039      	movs	r1, r7
 8000ffe:	f7ff f9fb 	bl	80003f8 <__aeabi_idivmod>
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001002:	464b      	mov	r3, r9
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8001004:	1cf0      	adds	r0, r6, #3
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001006:	5c5d      	ldrb	r5, [r3, r1]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8001008:	0039      	movs	r1, r7
 800100a:	f7ff f9f5 	bl	80003f8 <__aeabi_idivmod>
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 800100e:	464b      	mov	r3, r9
 8001010:	5c5b      	ldrb	r3, [r3, r1]
 8001012:	022d      	lsls	r5, r5, #8
 8001014:	041b      	lsls	r3, r3, #16
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8001016:	0039      	movs	r1, r7
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001018:	4325      	orrs	r5, r4
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 800101a:	1d30      	adds	r0, r6, #4
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 800101c:	431d      	orrs	r5, r3
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 800101e:	f7ff f9eb 	bl	80003f8 <__aeabi_idivmod>
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001022:	464b      	mov	r3, r9
 8001024:	5c5b      	ldrb	r3, [r3, r1]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 8001026:	1d70      	adds	r0, r6, #5
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	431d      	orrs	r5, r3
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 800102c:	0039      	movs	r1, r7
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 800102e:	9504      	str	r5, [sp, #16]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 8001030:	f7ff f9e2 	bl	80003f8 <__aeabi_idivmod>
 8001034:	464b      	mov	r3, r9
 8001036:	5c5b      	ldrb	r3, [r3, r1]
 8001038:	aa04      	add	r2, sp, #16
 800103a:	7113      	strb	r3, [r2, #4]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 800103c:	0039      	movs	r1, r7
 800103e:	1db0      	adds	r0, r6, #6
 8001040:	f7ff f9da 	bl	80003f8 <__aeabi_idivmod>
 8001044:	464b      	mov	r3, r9
 8001046:	5c5b      	ldrb	r3, [r3, r1]
 8001048:	aa04      	add	r2, sp, #16
  HAL_LCD_Clear(&LCDHandle);
 800104a:	4650      	mov	r0, sl
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 800104c:	7153      	strb	r3, [r2, #5]
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 800104e:	2500      	movs	r5, #0
  HAL_LCD_Clear(&LCDHandle);
 8001050:	f000 fd20 	bl	8001a94 <HAL_LCD_Clear>
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8001054:	1e20      	subs	r0, r4, #0
 8001056:	d00e      	beq.n	8001076 <BSP_LCD_GLASS_ScrollSentence+0xf2>
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8001058:	2200      	movs	r2, #0
 800105a:	b2eb      	uxtb	r3, r5
 800105c:	2100      	movs	r1, #0
 800105e:	f7ff fb9d 	bl	800079c <WriteChar.isra.0>
  while ((*ptr != 0) && (position <= LCD_DIGIT_POSITION_6))
 8001062:	aa04      	add	r2, sp, #16
 8001064:	002b      	movs	r3, r5
 8001066:	4694      	mov	ip, r2
 8001068:	4463      	add	r3, ip
 800106a:	7858      	ldrb	r0, [r3, #1]
 800106c:	2800      	cmp	r0, #0
 800106e:	d002      	beq.n	8001076 <BSP_LCD_GLASS_ScrollSentence+0xf2>
 8001070:	3501      	adds	r5, #1
 8001072:	2d06      	cmp	r5, #6
 8001074:	d1f0      	bne.n	8001058 <BSP_LCD_GLASS_ScrollSentence+0xd4>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001076:	4650      	mov	r0, sl
 8001078:	f000 fd68 	bl	8001b4c <HAL_LCD_UpdateDisplayRequest>
      if (bLCDGlass_KeyPressed)
 800107c:	4643      	mov	r3, r8
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d115      	bne.n	80010b0 <BSP_LCD_GLASS_ScrollSentence+0x12c>
      HAL_Delay(ScrollSpeed);
 8001084:	9800      	ldr	r0, [sp, #0]
 8001086:	f000 f99d 	bl	80013c4 <HAL_Delay>
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 800108a:	465b      	mov	r3, fp
 800108c:	b2db      	uxtb	r3, r3
 800108e:	429f      	cmp	r7, r3
 8001090:	d8a9      	bhi.n	8000fe6 <BSP_LCD_GLASS_ScrollSentence+0x62>
  for (repetition = 0; repetition < nScroll; repetition++)
 8001092:	9b02      	ldr	r3, [sp, #8]
 8001094:	9a03      	ldr	r2, [sp, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	464d      	mov	r5, r9
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d89e      	bhi.n	8000fe0 <BSP_LCD_GLASS_ScrollSentence+0x5c>
}
 80010a2:	b007      	add	sp, #28
 80010a4:	bcf0      	pop	{r4, r5, r6, r7}
 80010a6:	46bb      	mov	fp, r7
 80010a8:	46b2      	mov	sl, r6
 80010aa:	46a9      	mov	r9, r5
 80010ac:	46a0      	mov	r8, r4
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bLCDGlass_KeyPressed = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	9a01      	ldr	r2, [sp, #4]
 80010b4:	7013      	strb	r3, [r2, #0]
        return;
 80010b6:	e7f4      	b.n	80010a2 <BSP_LCD_GLASS_ScrollSentence+0x11e>
  for (repetition = 0; repetition < nScroll; repetition++)
 80010b8:	3501      	adds	r5, #1
 80010ba:	b2ed      	uxtb	r5, r5
 80010bc:	42a5      	cmp	r5, r4
 80010be:	d3fb      	bcc.n	80010b8 <BSP_LCD_GLASS_ScrollSentence+0x134>
 80010c0:	e7ef      	b.n	80010a2 <BSP_LCD_GLASS_ScrollSentence+0x11e>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	2000014c 	.word	0x2000014c
 80010c8:	20000110 	.word	0x20000110

080010cc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_MspInit+0x2c>)
 80010d0:	0549      	lsls	r1, r1, #21
 80010d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
{
 80010d4:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	430a      	orrs	r2, r1
 80010d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80010da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010dc:	400a      	ands	r2, r1
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2201      	movs	r2, #1
 80010e4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80010e6:	4311      	orrs	r1, r2
 80010e8:	6619      	str	r1, [r3, #96]	@ 0x60
 80010ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ec:	401a      	ands	r2, r3
 80010ee:	9201      	str	r2, [sp, #4]
 80010f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	b002      	add	sp, #8
 80010f4:	4770      	bx	lr
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80010fc:	b510      	push	{r4, lr}
 80010fe:	0004      	movs	r4, r0
 8001100:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	2214      	movs	r2, #20
 8001104:	2100      	movs	r1, #0
 8001106:	a802      	add	r0, sp, #8
 8001108:	f001 fe9a 	bl	8002e40 <memset>
  if(hcomp->Instance==COMP1)
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_COMP_MspInit+0x50>)
 800110e:	6822      	ldr	r2, [r4, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_COMP_MspInit+0x1c>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001114:	b008      	add	sp, #32
 8001116:	bd10      	pop	{r4, pc}
    __HAL_RCC_COMP_CLK_ENABLE();
 8001118:	2301      	movs	r3, #1
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_COMP_MspInit+0x54>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_COMP_CLK_ENABLE();
 800111e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_COMP_CLK_ENABLE();
 8001122:	4319      	orrs	r1, r3
 8001124:	6611      	str	r1, [r2, #96]	@ 0x60
 8001126:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8001128:	4019      	ands	r1, r3
 800112a:	9100      	str	r1, [sp, #0]
 800112c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8001130:	4319      	orrs	r1, r3
 8001132:	64d1      	str	r1, [r2, #76]	@ 0x4c
 8001134:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4013      	ands	r3, r2
 800113a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800113c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001140:	2303      	movs	r3, #3
 8001142:	9202      	str	r2, [sp, #8]
 8001144:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f000 fad1 	bl	80016ec <HAL_GPIO_Init>
}
 800114a:	e7e3      	b.n	8001114 <HAL_COMP_MspInit+0x18>
 800114c:	40010200 	.word	0x40010200
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	0004      	movs	r4, r0
 8001158:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115a:	2244      	movs	r2, #68	@ 0x44
 800115c:	2100      	movs	r1, #0
 800115e:	a801      	add	r0, sp, #4
 8001160:	f001 fe6e 	bl	8002e40 <memset>
  if(hlptim->Instance==LPTIM1)
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <HAL_LPTIM_MspInit+0x60>)
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800116c:	b012      	add	sp, #72	@ 0x48
 800116e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	9301      	str	r3, [sp, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001174:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001176:	a801      	add	r0, sp, #4
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f001 fbd6 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8001180:	2800      	cmp	r0, #0
 8001182:	d113      	bne.n	80011ac <HAL_LPTIM_MspInit+0x58>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_LPTIM_MspInit+0x64>)
 8001188:	0612      	lsls	r2, r2, #24
 800118a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800118c:	2011      	movs	r0, #17
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800118e:	430a      	orrs	r2, r1
 8001190:	659a      	str	r2, [r3, #88]	@ 0x58
 8001192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001196:	0fdb      	lsrs	r3, r3, #31
 8001198:	07db      	lsls	r3, r3, #31
 800119a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800119c:	2100      	movs	r1, #0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800119e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80011a0:	f000 fa54 	bl	800164c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80011a4:	2011      	movs	r0, #17
 80011a6:	f000 fa7b 	bl	80016a0 <HAL_NVIC_EnableIRQ>
}
 80011aa:	e7df      	b.n	800116c <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 80011ac:	f7ff faf4 	bl	8000798 <Error_Handler>
 80011b0:	e7e8      	b.n	8001184 <HAL_LPTIM_MspInit+0x30>
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	40007c00 	.word	0x40007c00
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	0004      	movs	r4, r0
 80011c0:	b092      	sub	sp, #72	@ 0x48
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c2:	2244      	movs	r2, #68	@ 0x44
 80011c4:	2100      	movs	r1, #0
 80011c6:	a801      	add	r0, sp, #4
 80011c8:	f001 fe3a 	bl	8002e40 <memset>
  if(hrtc->Instance==RTC)
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_RTC_MspInit+0x6c>)
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011d4:	b012      	add	sp, #72	@ 0x48
 80011d6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011de:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e6:	f001 fba1 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RTC_MspInit+0x64>
    __HAL_RCC_RTC_ENABLE();
 80011ee:	2190      	movs	r1, #144	@ 0x90
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_RTC_MspInit+0x70>)
 80011f4:	0212      	lsls	r2, r2, #8
 80011f6:	5858      	ldr	r0, [r3, r1]
 80011f8:	4302      	orrs	r2, r0
 80011fa:	505a      	str	r2, [r3, r1]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	430a      	orrs	r2, r1
 8001204:	659a      	str	r2, [r3, #88]	@ 0x58
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800120a:	400b      	ands	r3, r1
 800120c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800120e:	2100      	movs	r1, #0
 8001210:	2002      	movs	r0, #2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001212:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001214:	f000 fa1a 	bl	800164c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001218:	2002      	movs	r0, #2
 800121a:	f000 fa41 	bl	80016a0 <HAL_NVIC_EnableIRQ>
}
 800121e:	e7d9      	b.n	80011d4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001220:	f7ff faba 	bl	8000798 <Error_Handler>
 8001224:	e7e3      	b.n	80011ee <HAL_RTC_MspInit+0x32>
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	40002800 	.word	0x40002800
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler>
 8001232:	46c0      	nop			@ (mov r8, r8)

08001234 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <HardFault_Handler>
 8001236:	46c0      	nop			@ (mov r8, r8)

08001238 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	4770      	bx	lr
 800123a:	46c0      	nop			@ (mov r8, r8)

0800123c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800123c:	4770      	bx	lr
 800123e:	46c0      	nop			@ (mov r8, r8)

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f8ad 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bd10      	pop	{r4, pc}

08001248 <RTC_TAMP_IRQHandler>:
  return (READ_BIT(RTCx->SR, RTC_SR_WUTF) == (RTC_SR_WUTF));
 8001248:	2204      	movs	r2, #4
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <RTC_TAMP_IRQHandler+0x20>)

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800124c:	b510      	push	{r4, lr}
 800124e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  //HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  if (LL_RTC_IsActiveFlag_WUT(RTC) != 0)
 8001250:	420a      	tst	r2, r1
 8001252:	d100      	bne.n	8001256 <RTC_TAMP_IRQHandler+0xe>
              LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_28);

          WakeUp_Callback();
      }
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001254:	bd10      	pop	{r4, pc}
  WRITE_REG(RTCx->SCR, RTC_SCR_CWUTF);
 8001256:	65da      	str	r2, [r3, #92]	@ 0x5c
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <RTC_TAMP_IRQHandler+0x24>)
 800125c:	0552      	lsls	r2, r2, #21
 800125e:	60da      	str	r2, [r3, #12]
          WakeUp_Callback();
 8001260:	f7ff fa46 	bl	80006f0 <WakeUp_Callback>
}
 8001264:	e7f6      	b.n	8001254 <RTC_TAMP_IRQHandler+0xc>
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	40002800 	.word	0x40002800
 800126c:	40021800 	.word	0x40021800

08001270 <TIM6_DAC_LPTIM1_IRQHandler>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_CC1(const LPTIM_TypeDef *LPTIMx)
{
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_CC1IF) == LPTIM_ISR_CC1IF) ? 1UL : 0UL));
 8001270:	2201      	movs	r2, #1
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <TIM6_DAC_LPTIM1_IRQHandler+0x38>)

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001274:	b510      	push	{r4, lr}
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	420a      	tst	r2, r1
 800127a:	d009      	beq.n	8001290 <TIM6_DAC_LPTIM1_IRQHandler+0x20>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_CC1CF);
 800127c:	6859      	ldr	r1, [r3, #4]
 800127e:	430a      	orrs	r2, r1
 8001280:	605a      	str	r2, [r3, #4]
     {
         /* Clear the update interrupt flag*/
         LL_LPTIM_ClearFlag_CC1(LPTIM1);

         /* TIM1 capture/compare interrupt processing(function defined in main.c) */
         CaptureFalling_Callback();
 8001282:	f7ff f9fd 	bl	8000680 <CaptureFalling_Callback>
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <TIM6_DAC_LPTIM1_IRQHandler+0x3c>)
 800128a:	0452      	lsls	r2, r2, #17
 800128c:	60da      	str	r2, [r3, #12]
         CaptureRising_Callback();
      }
     /* Clear the EXTI's Flag for LPTIM1*/
     LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_24);
  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800128e:	bd10      	pop	{r4, pc}
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_CC3(const LPTIM_TypeDef *LPTIMx)
{
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_CC3IF) == LPTIM_ISR_CC3IF) ? 1UL : 0UL));
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	00d2      	lsls	r2, r2, #3
 8001296:	4211      	tst	r1, r2
 8001298:	d0f5      	beq.n	8001286 <TIM6_DAC_LPTIM1_IRQHandler+0x16>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_CC3CF);
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
         CaptureRising_Callback();
 80012a0:	f7ff fa1a 	bl	80006d8 <CaptureRising_Callback>
 80012a4:	e7ef      	b.n	8001286 <TIM6_DAC_LPTIM1_IRQHandler+0x16>
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	40007c00 	.word	0x40007c00
 80012ac:	40021800 	.word	0x40021800

080012b0 <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <SystemInit+0x30>)
 80012b4:	0512      	lsls	r2, r2, #20
 80012b6:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <SystemInit+0x34>)
 80012bc:	589a      	ldr	r2, [r3, r2]
 80012be:	03d2      	lsls	r2, r2, #15
 80012c0:	d50d      	bpl.n	80012de <SystemInit+0x2e>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 80012c2:	21ff      	movs	r1, #255	@ 0xff
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	400a      	ands	r2, r1
 80012c8:	2acc      	cmp	r2, #204	@ 0xcc
 80012ca:	d008      	beq.n	80012de <SystemInit+0x2e>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	4011      	ands	r1, r2
 80012d0:	29aa      	cmp	r1, #170	@ 0xaa
 80012d2:	d004      	beq.n	80012de <SystemInit+0x2e>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	02d2      	lsls	r2, r2, #11
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	40022000 	.word	0x40022000

080012e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e8:	480d      	ldr	r0, [pc, #52]	@ (8001320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ec:	f7ff ffe0 	bl	80012b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	@ (8001328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <LoopForever+0xe>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	@ (8001334 <LoopForever+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001316:	f001 fd9b 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131a:	f7ff f8b1 	bl	8000480 <main>

0800131e <LoopForever>:

LoopForever:
  b LoopForever
 800131e:	e7fe      	b.n	800131e <LoopForever>
  ldr   r0, =_estack
 8001320:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800132c:	080030cc 	.word	0x080030cc
  ldr r2, =_sbss
 8001330:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001334:	20000154 	.word	0x20000154

08001338 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_COMP1_2_IRQHandler>
	...

0800133c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_InitTick+0x40>)
{
 800133e:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8001340:	6819      	ldr	r1, [r3, #0]
{
 8001342:	0004      	movs	r4, r0
  if (uwTickFreq != 0U)
 8001344:	2900      	cmp	r1, #0
 8001346:	d101      	bne.n	800134c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001348:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800134c:	20fa      	movs	r0, #250	@ 0xfa
 800134e:	0080      	lsls	r0, r0, #2
 8001350:	f7fe fee2 	bl	8000118 <__udivsi3>
 8001354:	4d0a      	ldr	r5, [pc, #40]	@ (8001380 <HAL_InitTick+0x44>)
 8001356:	0001      	movs	r1, r0
 8001358:	6828      	ldr	r0, [r5, #0]
 800135a:	f7fe fedd 	bl	8000118 <__udivsi3>
 800135e:	f000 f9ab 	bl	80016b8 <HAL_SYSTICK_Config>
 8001362:	2800      	cmp	r0, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	2c03      	cmp	r4, #3
 8001368:	d8ee      	bhi.n	8001348 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136a:	3801      	subs	r0, #1
 800136c:	2200      	movs	r2, #0
 800136e:	0021      	movs	r1, r4
 8001370:	f000 f96c 	bl	800164c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_InitTick+0x48>)
 8001376:	2000      	movs	r0, #0
 8001378:	601c      	str	r4, [r3, #0]
  return status;
 800137a:	e7e6      	b.n	800134a <HAL_InitTick+0xe>
 800137c:	20000004 	.word	0x20000004
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_Init>:
{
 8001388:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	2003      	movs	r0, #3
 800138c:	f7ff ffd6 	bl	800133c <HAL_InitTick>
 8001390:	1e04      	subs	r4, r0, #0
 8001392:	d002      	beq.n	800139a <HAL_Init+0x12>
    status = HAL_ERROR;
 8001394:	2401      	movs	r4, #1
}
 8001396:	0020      	movs	r0, r4
 8001398:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800139a:	f7ff fe97 	bl	80010cc <HAL_MspInit>
 800139e:	e7fa      	b.n	8001396 <HAL_Init+0xe>

080013a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013a0:	4a03      	ldr	r2, [pc, #12]	@ (80013b0 <HAL_IncTick+0x10>)
 80013a2:	4904      	ldr	r1, [pc, #16]	@ (80013b4 <HAL_IncTick+0x14>)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	185b      	adds	r3, r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	4770      	bx	lr
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	20000150 	.word	0x20000150
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013b8:	4b01      	ldr	r3, [pc, #4]	@ (80013c0 <HAL_GetTick+0x8>)
 80013ba:	6818      	ldr	r0, [r3, #0]
}
 80013bc:	4770      	bx	lr
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	20000150 	.word	0x20000150

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff fff6 	bl	80013b8 <HAL_GetTick>
 80013cc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	1c63      	adds	r3, r4, #1
 80013d0:	d002      	beq.n	80013d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <HAL_Delay+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	1b40      	subs	r0, r0, r5
 80013de:	42a0      	cmp	r0, r4
 80013e0:	d3fa      	bcc.n	80013d8 <HAL_Delay+0x14>
  {
  }
}
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_COMP_Init>:
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80013e8:	2300      	movs	r3, #0
{
 80013ea:	b570      	push	{r4, r5, r6, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80013f0:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80013f2:	d100      	bne.n	80013f6 <HAL_COMP_Init+0xe>
 80013f4:	e08d      	b.n	8001512 <HAL_COMP_Init+0x12a>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80013f6:	6805      	ldr	r5, [r0, #0]
    status = HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <HAL_COMP_Init+0x1a>
 8001400:	e085      	b.n	800150e <HAL_COMP_Init+0x126>
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001402:	2329      	movs	r3, #41	@ 0x29
 8001404:	5ce3      	ldrb	r3, [r4, r3]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <HAL_COMP_Init+0x26>
 800140c:	e0ad      	b.n	800156a <HAL_COMP_Init+0x182>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800140e:	6920      	ldr	r0, [r4, #16]
 8001410:	6963      	ldr	r3, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001412:	6829      	ldr	r1, [r5, #0]
               | hcomp->Init.InputPlus
 8001414:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8001416:	6a20      	ldr	r0, [r4, #32]
               | hcomp->Init.Mode
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001418:	682a      	ldr	r2, [r5, #0]
               | hcomp->Init.BlankingSrce
 800141a:	4303      	orrs	r3, r0
               | hcomp->Init.Hysteresis
 800141c:	69a0      	ldr	r0, [r4, #24]
 800141e:	4303      	orrs	r3, r0
               | hcomp->Init.OutputPol
 8001420:	69e0      	ldr	r0, [r4, #28]
 8001422:	4303      	orrs	r3, r0
    tmp_csr = (hcomp->Init.InputMinus
 8001424:	68e0      	ldr	r0, [r4, #12]
 8001426:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8001428:	4867      	ldr	r0, [pc, #412]	@ (80015c8 <HAL_COMP_Init+0x1e0>)
 800142a:	4002      	ands	r2, r0
 800142c:	4313      	orrs	r3, r2
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */

#if defined(COMP2)
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800142e:	2280      	movs	r2, #128	@ 0x80
    MODIFY_REG(hcomp->Instance->CSR,
 8001430:	602b      	str	r3, [r5, #0]
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	4293      	cmp	r3, r2
 8001438:	d100      	bne.n	800143c <HAL_COMP_Init+0x54>
 800143a:	e07f      	b.n	800153c <HAL_COMP_Init+0x154>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
    }
    else if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800143c:	20c0      	movs	r0, #192	@ 0xc0
 800143e:	0140      	lsls	r0, r0, #5
 8001440:	4283      	cmp	r3, r0
 8001442:	d068      	beq.n	8001516 <HAL_COMP_Init+0x12e>
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001444:	4b61      	ldr	r3, [pc, #388]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 8001446:	4862      	ldr	r0, [pc, #392]	@ (80015d0 <HAL_COMP_Init+0x1e8>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4002      	ands	r2, r0
 800144c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4002      	ands	r2, r0
 8001452:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	68a3      	ldr	r3, [r4, #8]
 8001458:	01d2      	lsls	r2, r2, #7
 800145a:	4293      	cmp	r3, r2
 800145c:	d100      	bne.n	8001460 <HAL_COMP_Init+0x78>
 800145e:	e07b      	b.n	8001558 <HAL_COMP_Init+0x170>
 8001460:	20a0      	movs	r0, #160	@ 0xa0
 8001462:	01c0      	lsls	r0, r0, #7
 8001464:	4283      	cmp	r3, r0
 8001466:	d100      	bne.n	800146a <HAL_COMP_Init+0x82>
 8001468:	e093      	b.n	8001592 <HAL_COMP_Init+0x1aa>
 800146a:	2b01      	cmp	r3, #1
 800146c:	d100      	bne.n	8001470 <HAL_COMP_Init+0x88>
 800146e:	e088      	b.n	8001582 <HAL_COMP_Init+0x19a>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
        break;

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001470:	4b56      	ldr	r3, [pc, #344]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 8001472:	4858      	ldr	r0, [pc, #352]	@ (80015d4 <HAL_COMP_Init+0x1ec>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4002      	ands	r2, r0
 8001478:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4002      	ands	r2, r0
 800147e:	605a      	str	r2, [r3, #4]
    }


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8001480:	2330      	movs	r3, #48	@ 0x30
 8001482:	682a      	ldr	r2, [r5, #0]
 8001484:	4213      	tst	r3, r2
 8001486:	d014      	beq.n	80014b2 <HAL_COMP_Init+0xca>
 8001488:	420b      	tst	r3, r1
 800148a:	d112      	bne.n	80014b2 <HAL_COMP_Init+0xca>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800148c:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <HAL_COMP_Init+0x1f0>)
 800148e:	4953      	ldr	r1, [pc, #332]	@ (80015dc <HAL_COMP_Init+0x1f4>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f7fe fe41 	bl	8000118 <__udivsi3>
 8001496:	3001      	adds	r0, #1
 8001498:	0083      	lsls	r3, r0, #2
 800149a:	181b      	adds	r3, r3, r0
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_COMP_Init+0xca>
      {
        wait_loop_index--;
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80014ac:	9b01      	ldr	r3, [sp, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f9      	bne.n	80014a6 <HAL_COMP_Init+0xbe>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 80014b4:	429d      	cmp	r5, r3
 80014b6:	d060      	beq.n	800157a <HAL_COMP_Init+0x192>
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	4a49      	ldr	r2, [pc, #292]	@ (80015e0 <HAL_COMP_Init+0x1f8>)
 80014bc:	02c9      	lsls	r1, r1, #11

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80014be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80014c0:	0798      	lsls	r0, r3, #30
 80014c2:	d031      	beq.n	8001528 <HAL_COMP_Init+0x140>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014c4:	4d47      	ldr	r5, [pc, #284]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80014c6:	06d8      	lsls	r0, r3, #27
 80014c8:	d400      	bmi.n	80014cc <HAL_COMP_Init+0xe4>
 80014ca:	e079      	b.n	80015c0 <HAL_COMP_Init+0x1d8>
 80014cc:	6828      	ldr	r0, [r5, #0]
 80014ce:	4308      	orrs	r0, r1
 80014d0:	6028      	str	r0, [r5, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80014d2:	4d44      	ldr	r5, [pc, #272]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80014d4:	0698      	lsls	r0, r3, #26
 80014d6:	d400      	bmi.n	80014da <HAL_COMP_Init+0xf2>
 80014d8:	e06e      	b.n	80015b8 <HAL_COMP_Init+0x1d0>
 80014da:	6868      	ldr	r0, [r5, #4]
 80014dc:	4308      	orrs	r0, r1
 80014de:	6068      	str	r0, [r5, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80014e0:	4840      	ldr	r0, [pc, #256]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
  SET_BIT(EXTI->EMR1, ExtiLine);
 80014e2:	2684      	movs	r6, #132	@ 0x84
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80014e4:	60c1      	str	r1, [r0, #12]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80014e6:	6101      	str	r1, [r0, #16]
      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
      LL_EXTI_ClearFallingFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80014e8:	079d      	lsls	r5, r3, #30
 80014ea:	d561      	bpl.n	80015b0 <HAL_COMP_Init+0x1c8>
  SET_BIT(EXTI->EMR1, ExtiLine);
 80014ec:	5985      	ldr	r5, [r0, r6]
 80014ee:	430d      	orrs	r5, r1
 80014f0:	5185      	str	r5, [r0, r6]
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80014f2:	07db      	lsls	r3, r3, #31
 80014f4:	d556      	bpl.n	80015a4 <HAL_COMP_Init+0x1bc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	4a3a      	ldr	r2, [pc, #232]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
 80014fa:	58d0      	ldr	r0, [r2, r3]
 80014fc:	4301      	orrs	r1, r0
 80014fe:	50d1      	str	r1, [r2, r3]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001500:	2329      	movs	r3, #41	@ 0x29
 8001502:	5ce2      	ldrb	r2, [r4, r3]
 8001504:	2a00      	cmp	r2, #0
 8001506:	d101      	bne.n	800150c <HAL_COMP_Init+0x124>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001508:	2201      	movs	r2, #1
 800150a:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2000      	movs	r0, #0
    }
  }

  return status;
}
 800150e:	b002      	add	sp, #8
 8001510:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8001512:	2001      	movs	r0, #1
 8001514:	e7fb      	b.n	800150e <HAL_COMP_Init+0x126>
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	4302      	orrs	r2, r0
 800151c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <HAL_COMP_Init+0x1e8>)
 8001522:	4002      	ands	r2, r0
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	e795      	b.n	8001454 <HAL_COMP_Init+0x6c>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001528:	2084      	movs	r0, #132	@ 0x84
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
 800152c:	5819      	ldr	r1, [r3, r0]
 800152e:	4011      	ands	r1, r2
 8001530:	5019      	str	r1, [r3, r0]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	5858      	ldr	r0, [r3, r1]
 8001536:	4002      	ands	r2, r0
 8001538:	505a      	str	r2, [r3, r1]
}
 800153a:	e7e1      	b.n	8001500 <HAL_COMP_Init+0x118>
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800153c:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 800153e:	4e24      	ldr	r6, [pc, #144]	@ (80015d0 <HAL_COMP_Init+0x1e8>)
 8001540:	6810      	ldr	r0, [r2, #0]
 8001542:	4030      	ands	r0, r6
 8001544:	6010      	str	r0, [r2, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001546:	6850      	ldr	r0, [r2, #4]
 8001548:	4303      	orrs	r3, r0
 800154a:	6053      	str	r3, [r2, #4]
    switch (hcomp->Init.WindowOutput)
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	68a3      	ldr	r3, [r4, #8]
 8001550:	01d2      	lsls	r2, r2, #7
 8001552:	4293      	cmp	r3, r2
 8001554:	d000      	beq.n	8001558 <HAL_COMP_Init+0x170>
 8001556:	e783      	b.n	8001460 <HAL_COMP_Init+0x78>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001558:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 800155a:	6810      	ldr	r0, [r2, #0]
 800155c:	4303      	orrs	r3, r0
 800155e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001560:	6853      	ldr	r3, [r2, #4]
 8001562:	481c      	ldr	r0, [pc, #112]	@ (80015d4 <HAL_COMP_Init+0x1ec>)
 8001564:	4003      	ands	r3, r0
 8001566:	6053      	str	r3, [r2, #4]
        break;
 8001568:	e78a      	b.n	8001480 <HAL_COMP_Init+0x98>
      hcomp->Lock = HAL_UNLOCKED;
 800156a:	3328      	adds	r3, #40	@ 0x28
 800156c:	54e2      	strb	r2, [r4, r3]
      HAL_COMP_MspInit(hcomp);
 800156e:	0020      	movs	r0, r4
      COMP_CLEAR_ERRORCODE(hcomp);
 8001570:	62e2      	str	r2, [r4, #44]	@ 0x2c
      HAL_COMP_MspInit(hcomp);
 8001572:	f7ff fdc3 	bl	80010fc <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001576:	6825      	ldr	r5, [r4, #0]
 8001578:	e749      	b.n	800140e <HAL_COMP_Init+0x26>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	4a1a      	ldr	r2, [pc, #104]	@ (80015e8 <HAL_COMP_Init+0x200>)
 800157e:	0289      	lsls	r1, r1, #10
 8001580:	e79d      	b.n	80014be <HAL_COMP_Init+0xd6>
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	4310      	orrs	r0, r2
 8001588:	6018      	str	r0, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800158a:	6858      	ldr	r0, [r3, #4]
 800158c:	4302      	orrs	r2, r0
 800158e:	605a      	str	r2, [r3, #4]
        break;
 8001590:	e776      	b.n	8001480 <HAL_COMP_Init+0x98>
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_COMP_Init+0x1e4>)
 8001594:	4e0f      	ldr	r6, [pc, #60]	@ (80015d4 <HAL_COMP_Init+0x1ec>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	4030      	ands	r0, r6
 800159a:	6018      	str	r0, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800159c:	6858      	ldr	r0, [r3, #4]
 800159e:	4302      	orrs	r2, r0
 80015a0:	605a      	str	r2, [r3, #4]
        break;
 80015a2:	e76d      	b.n	8001480 <HAL_COMP_Init+0x98>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <HAL_COMP_Init+0x1fc>)
 80015a8:	5843      	ldr	r3, [r0, r1]
 80015aa:	4013      	ands	r3, r2
 80015ac:	5043      	str	r3, [r0, r1]
}
 80015ae:	e7a7      	b.n	8001500 <HAL_COMP_Init+0x118>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80015b0:	5985      	ldr	r5, [r0, r6]
 80015b2:	4015      	ands	r5, r2
 80015b4:	5185      	str	r5, [r0, r6]
}
 80015b6:	e79c      	b.n	80014f2 <HAL_COMP_Init+0x10a>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80015b8:	6868      	ldr	r0, [r5, #4]
 80015ba:	4010      	ands	r0, r2
 80015bc:	6068      	str	r0, [r5, #4]
}
 80015be:	e78f      	b.n	80014e0 <HAL_COMP_Init+0xf8>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80015c0:	6828      	ldr	r0, [r5, #0]
 80015c2:	4010      	ands	r0, r2
 80015c4:	6028      	str	r0, [r5, #0]
}
 80015c6:	e784      	b.n	80014d2 <HAL_COMP_Init+0xea>
 80015c8:	fe00700f 	.word	0xfe00700f
 80015cc:	40010200 	.word	0x40010200
 80015d0:	fffff7ff 	.word	0xfffff7ff
 80015d4:	ffffbfff 	.word	0xffffbfff
 80015d8:	20000000 	.word	0x20000000
 80015dc:	00030d40 	.word	0x00030d40
 80015e0:	fffbffff 	.word	0xfffbffff
 80015e4:	40021800 	.word	0x40021800
 80015e8:	fffdffff 	.word	0xfffdffff

080015ec <HAL_COMP_Start>:
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2200      	movs	r2, #0
{
 80015ee:	b530      	push	{r4, r5, lr}
 80015f0:	b083      	sub	sp, #12
 80015f2:	1e03      	subs	r3, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80015f4:	9201      	str	r2, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80015f6:	d00b      	beq.n	8001610 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80015f8:	6802      	ldr	r2, [r0, #0]
    status = HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80015fc:	6811      	ldr	r1, [r2, #0]
 80015fe:	2900      	cmp	r1, #0
 8001600:	db04      	blt.n	800160c <HAL_COMP_Start+0x20>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001602:	2429      	movs	r4, #41	@ 0x29
 8001604:	5d19      	ldrb	r1, [r3, r4]
 8001606:	b2cd      	uxtb	r5, r1
 8001608:	2901      	cmp	r1, #1
 800160a:	d003      	beq.n	8001614 <HAL_COMP_Start+0x28>
      status = HAL_ERROR;
    }
  }

  return status;
}
 800160c:	b003      	add	sp, #12
 800160e:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8001610:	2001      	movs	r0, #1
 8001612:	e7fb      	b.n	800160c <HAL_COMP_Start+0x20>
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001614:	6811      	ldr	r1, [r2, #0]
 8001616:	4329      	orrs	r1, r5
 8001618:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 800161a:	2202      	movs	r2, #2
 800161c:	551a      	strb	r2, [r3, r4]
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_COMP_Start+0x58>)
 8001620:	4909      	ldr	r1, [pc, #36]	@ (8001648 <HAL_COMP_Start+0x5c>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	f7fe fd78 	bl	8000118 <__udivsi3>
 8001628:	3001      	adds	r0, #1
 800162a:	00c0      	lsls	r0, r0, #3
 800162c:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_COMP_Start+0x54>
        wait_loop_index--;
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_COMP_Start+0x48>
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2000      	movs	r0, #0
 8001642:	e7e3      	b.n	800160c <HAL_COMP_Start+0x20>
 8001644:	20000000 	.word	0x20000000
 8001648:	00030d40 	.word	0x00030d40

0800164c <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164c:	22ff      	movs	r2, #255	@ 0xff
 800164e:	2303      	movs	r3, #3
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b510      	push	{r4, lr}
 8001652:	0014      	movs	r4, r2
 8001654:	4003      	ands	r3, r0
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800165a:	0189      	lsls	r1, r1, #6
 800165c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001660:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8001662:	2800      	cmp	r0, #0
 8001664:	db0b      	blt.n	800167e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <HAL_NVIC_SetPriority+0x4c>)
 8001668:	21c0      	movs	r1, #192	@ 0xc0
 800166a:	469c      	mov	ip, r3
 800166c:	0880      	lsrs	r0, r0, #2
 800166e:	0080      	lsls	r0, r0, #2
 8001670:	4460      	add	r0, ip
 8001672:	0089      	lsls	r1, r1, #2
 8001674:	5843      	ldr	r3, [r0, r1]
 8001676:	4023      	ands	r3, r4
 8001678:	4313      	orrs	r3, r2
 800167a:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800167c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167e:	230f      	movs	r3, #15
 8001680:	4906      	ldr	r1, [pc, #24]	@ (800169c <HAL_NVIC_SetPriority+0x50>)
 8001682:	4003      	ands	r3, r0
 8001684:	468c      	mov	ip, r1
 8001686:	3b08      	subs	r3, #8
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4463      	add	r3, ip
 800168e:	69d9      	ldr	r1, [r3, #28]
 8001690:	400c      	ands	r4, r1
 8001692:	4314      	orrs	r4, r2
 8001694:	61dc      	str	r4, [r3, #28]
 8001696:	e7f1      	b.n	800167c <HAL_NVIC_SetPriority+0x30>
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016a0:	2800      	cmp	r0, #0
 80016a2:	db05      	blt.n	80016b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a4:	221f      	movs	r2, #31
 80016a6:	2301      	movs	r3, #1
 80016a8:	4002      	ands	r2, r0
 80016aa:	4093      	lsls	r3, r2
 80016ac:	4a01      	ldr	r2, [pc, #4]	@ (80016b4 <HAL_NVIC_EnableIRQ+0x14>)
 80016ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016b0:	4770      	bx	lr
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	1e43      	subs	r3, r0, #1
 80016bc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d20e      	bcs.n	80016e2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016cc:	6a03      	ldr	r3, [r0, #32]
 80016ce:	0609      	lsls	r1, r1, #24
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016da:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	3307      	adds	r3, #7
 80016e0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80016e2:	4770      	bx	lr
 80016e4:	e000e010 	.word	0xe000e010
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	46de      	mov	lr, fp
 80016f0:	4657      	mov	r7, sl
 80016f2:	464e      	mov	r6, r9
 80016f4:	4645      	mov	r5, r8
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	680c      	ldr	r4, [r1, #0]
{
 80016fa:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 80016fc:	2300      	movs	r3, #0
{
 80016fe:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	2c00      	cmp	r4, #0
 8001702:	d070      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	4694      	mov	ip, r2
 800170a:	4022      	ands	r2, r4
 800170c:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 800170e:	4662      	mov	r2, ip
 8001710:	4214      	tst	r4, r2
 8001712:	d064      	beq.n	80017de <HAL_GPIO_Init+0xf2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001714:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001716:	465a      	mov	r2, fp
 8001718:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800171a:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800171c:	6855      	ldr	r5, [r2, #4]
 800171e:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001720:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001722:	402a      	ands	r2, r5
 8001724:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001726:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	2e01      	cmp	r6, #1
 800172a:	d963      	bls.n	80017f4 <HAL_GPIO_Init+0x108>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	2a03      	cmp	r2, #3
 800172e:	d000      	beq.n	8001732 <HAL_GPIO_Init+0x46>
 8001730:	e0b5      	b.n	800189e <HAL_GPIO_Init+0x1b2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001732:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001734:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001736:	9900      	ldr	r1, [sp, #0]
 8001738:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800173a:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800173c:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	22c0      	movs	r2, #192	@ 0xc0
 8001740:	0292      	lsls	r2, r2, #10
 8001742:	4215      	tst	r5, r2
 8001744:	d04b      	beq.n	80017de <HAL_GPIO_Init+0xf2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8001746:	2703      	movs	r7, #3
 8001748:	260f      	movs	r6, #15
 800174a:	4965      	ldr	r1, [pc, #404]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
 800174c:	401f      	ands	r7, r3
 800174e:	468c      	mov	ip, r1
 8001750:	00ff      	lsls	r7, r7, #3
 8001752:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8001754:	089a      	lsrs	r2, r3, #2
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4462      	add	r2, ip
 800175a:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800175c:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800175e:	26a0      	movs	r6, #160	@ 0xa0
 8001760:	05f6      	lsls	r6, r6, #23
 8001762:	42b0      	cmp	r0, r6
 8001764:	d016      	beq.n	8001794 <HAL_GPIO_Init+0xa8>
 8001766:	4e5f      	ldr	r6, [pc, #380]	@ (80018e4 <HAL_GPIO_Init+0x1f8>)
 8001768:	42b0      	cmp	r0, r6
 800176a:	d100      	bne.n	800176e <HAL_GPIO_Init+0x82>
 800176c:	e0a8      	b.n	80018c0 <HAL_GPIO_Init+0x1d4>
 800176e:	4e5e      	ldr	r6, [pc, #376]	@ (80018e8 <HAL_GPIO_Init+0x1fc>)
 8001770:	42b0      	cmp	r0, r6
 8001772:	d100      	bne.n	8001776 <HAL_GPIO_Init+0x8a>
 8001774:	e0a8      	b.n	80018c8 <HAL_GPIO_Init+0x1dc>
 8001776:	4e5d      	ldr	r6, [pc, #372]	@ (80018ec <HAL_GPIO_Init+0x200>)
 8001778:	42b0      	cmp	r0, r6
 800177a:	d100      	bne.n	800177e <HAL_GPIO_Init+0x92>
 800177c:	e09c      	b.n	80018b8 <HAL_GPIO_Init+0x1cc>
 800177e:	4e5c      	ldr	r6, [pc, #368]	@ (80018f0 <HAL_GPIO_Init+0x204>)
 8001780:	42b0      	cmp	r0, r6
 8001782:	d100      	bne.n	8001786 <HAL_GPIO_Init+0x9a>
 8001784:	e0a4      	b.n	80018d0 <HAL_GPIO_Init+0x1e4>
 8001786:	4e5b      	ldr	r6, [pc, #364]	@ (80018f4 <HAL_GPIO_Init+0x208>)
 8001788:	42b0      	cmp	r0, r6
 800178a:	d100      	bne.n	800178e <HAL_GPIO_Init+0xa2>
 800178c:	e0a4      	b.n	80018d8 <HAL_GPIO_Init+0x1ec>
 800178e:	2606      	movs	r6, #6
 8001790:	40be      	lsls	r6, r7
 8001792:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001794:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8001796:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8001798:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 800179a:	4a51      	ldr	r2, [pc, #324]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179c:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 800179e:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 80017a0:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a2:	4235      	tst	r5, r6
 80017a4:	d000      	beq.n	80017a8 <HAL_GPIO_Init+0xbc>
 80017a6:	e077      	b.n	8001898 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80017a8:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80017aa:	4e4d      	ldr	r6, [pc, #308]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
 80017ac:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80017ae:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b0:	2680      	movs	r6, #128	@ 0x80
 80017b2:	03b6      	lsls	r6, r6, #14
 80017b4:	4235      	tst	r5, r6
 80017b6:	d16c      	bne.n	8001892 <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 80017b8:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80017ba:	4e49      	ldr	r6, [pc, #292]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
 80017bc:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017be:	2284      	movs	r2, #132	@ 0x84
 80017c0:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c2:	03af      	lsls	r7, r5, #14
 80017c4:	d462      	bmi.n	800188c <HAL_GPIO_Init+0x1a0>
        temp &= ~(iocurrent);
 80017c6:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80017c8:	2784      	movs	r7, #132	@ 0x84
 80017ca:	4e45      	ldr	r6, [pc, #276]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
 80017cc:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d2:	03ed      	lsls	r5, r5, #15
 80017d4:	d456      	bmi.n	8001884 <HAL_GPIO_Init+0x198>
        temp &= ~(iocurrent);
 80017d6:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	4d41      	ldr	r5, [pc, #260]	@ (80018e0 <HAL_GPIO_Init+0x1f4>)
 80017dc:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	0022      	movs	r2, r4
      }
    }

    position++;
 80017e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	d18e      	bne.n	8001704 <HAL_GPIO_Init+0x18>
  }
}
 80017e6:	b003      	add	sp, #12
 80017e8:	bcf0      	pop	{r4, r5, r6, r7}
 80017ea:	46bb      	mov	fp, r7
 80017ec:	46b2      	mov	sl, r6
 80017ee:	46a9      	mov	r9, r5
 80017f0:	46a0      	mov	r8, r4
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80017f4:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017f6:	000e      	movs	r6, r1
 80017f8:	9900      	ldr	r1, [sp, #0]
 80017fa:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017fc:	4659      	mov	r1, fp
 80017fe:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001800:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001802:	000e      	movs	r6, r1
 8001804:	40be      	lsls	r6, r7
 8001806:	46b0      	mov	r8, r6
 8001808:	464e      	mov	r6, r9
 800180a:	4641      	mov	r1, r8
 800180c:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800180e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001810:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001812:	000e      	movs	r6, r1
 8001814:	4661      	mov	r1, ip
 8001816:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8001818:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800181c:	000e      	movs	r6, r1
 800181e:	2101      	movs	r1, #1
 8001820:	400e      	ands	r6, r1
 8001822:	409e      	lsls	r6, r3
 8001824:	46b4      	mov	ip, r6
 8001826:	4646      	mov	r6, r8
 8001828:	4661      	mov	r1, ip
 800182a:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 800182c:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800182e:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001830:	000e      	movs	r6, r1
 8001832:	9900      	ldr	r1, [sp, #0]
 8001834:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001836:	4659      	mov	r1, fp
 8001838:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800183a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800183c:	000e      	movs	r6, r1
 800183e:	40be      	lsls	r6, r7
 8001840:	46b4      	mov	ip, r6
 8001842:	4646      	mov	r6, r8
 8001844:	4661      	mov	r1, ip
 8001846:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8001848:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	2a02      	cmp	r2, #2
 800184c:	d000      	beq.n	8001850 <HAL_GPIO_Init+0x164>
 800184e:	e770      	b.n	8001732 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8001850:	08d9      	lsrs	r1, r3, #3
 8001852:	0089      	lsls	r1, r1, #2
 8001854:	468c      	mov	ip, r1
 8001856:	4484      	add	ip, r0
 8001858:	4661      	mov	r1, ip
 800185a:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800185c:	2107      	movs	r1, #7
 800185e:	4019      	ands	r1, r3
 8001860:	0089      	lsls	r1, r1, #2
 8001862:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8001864:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001866:	210f      	movs	r1, #15
 8001868:	4646      	mov	r6, r8
 800186a:	40b1      	lsls	r1, r6
 800186c:	9e01      	ldr	r6, [sp, #4]
 800186e:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001870:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001872:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001874:	4646      	mov	r6, r8
 8001876:	6909      	ldr	r1, [r1, #16]
 8001878:	40b1      	lsls	r1, r6
 800187a:	9e01      	ldr	r6, [sp, #4]
 800187c:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 800187e:	4661      	mov	r1, ip
 8001880:	620e      	str	r6, [r1, #32]
 8001882:	e756      	b.n	8001732 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8001884:	4651      	mov	r1, sl
 8001886:	4311      	orrs	r1, r2
 8001888:	000a      	movs	r2, r1
 800188a:	e7a5      	b.n	80017d8 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 800188c:	4656      	mov	r6, sl
 800188e:	4332      	orrs	r2, r6
 8001890:	e79a      	b.n	80017c8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8001892:	4656      	mov	r6, sl
 8001894:	4332      	orrs	r2, r6
 8001896:	e790      	b.n	80017ba <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8001898:	4656      	mov	r6, sl
 800189a:	4332      	orrs	r2, r6
 800189c:	e785      	b.n	80017aa <HAL_GPIO_Init+0xbe>
 800189e:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 80018a0:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80018a2:	4031      	ands	r1, r6
 80018a4:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80018a6:	4659      	mov	r1, fp
 80018a8:	6889      	ldr	r1, [r1, #8]
 80018aa:	40b9      	lsls	r1, r7
 80018ac:	468c      	mov	ip, r1
 80018ae:	4641      	mov	r1, r8
 80018b0:	4666      	mov	r6, ip
 80018b2:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 80018b4:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	e73c      	b.n	8001732 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80018b8:	2603      	movs	r6, #3
 80018ba:	40be      	lsls	r6, r7
 80018bc:	4331      	orrs	r1, r6
 80018be:	e769      	b.n	8001794 <HAL_GPIO_Init+0xa8>
 80018c0:	2601      	movs	r6, #1
 80018c2:	40be      	lsls	r6, r7
 80018c4:	4331      	orrs	r1, r6
 80018c6:	e765      	b.n	8001794 <HAL_GPIO_Init+0xa8>
 80018c8:	2602      	movs	r6, #2
 80018ca:	40be      	lsls	r6, r7
 80018cc:	4331      	orrs	r1, r6
 80018ce:	e761      	b.n	8001794 <HAL_GPIO_Init+0xa8>
 80018d0:	2604      	movs	r6, #4
 80018d2:	40be      	lsls	r6, r7
 80018d4:	4331      	orrs	r1, r6
 80018d6:	e75d      	b.n	8001794 <HAL_GPIO_Init+0xa8>
 80018d8:	2605      	movs	r6, #5
 80018da:	40be      	lsls	r6, r7
 80018dc:	4331      	orrs	r1, r6
 80018de:	e759      	b.n	8001794 <HAL_GPIO_Init+0xa8>
 80018e0:	40021800 	.word	0x40021800
 80018e4:	50000400 	.word	0x50000400
 80018e8:	50000800 	.word	0x50000800
 80018ec:	50000c00 	.word	0x50000c00
 80018f0:	50001000 	.word	0x50001000
 80018f4:	50001400 	.word	0x50001400

080018f8 <HAL_LCD_MspInit>:
  UNUSED(hlcd);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_LCD_MspInit is to be implemented in the user file
   */
}
 80018f8:	4770      	bx	lr
 80018fa:	46c0      	nop			@ (mov r8, r8)

080018fc <HAL_LCD_Init>:
{
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	1e04      	subs	r4, r0, #0
  if (hlcd == NULL)
 8001900:	d100      	bne.n	8001904 <HAL_LCD_Init+0x8>
 8001902:	e07d      	b.n	8001a00 <HAL_LCD_Init+0x104>
  if (hlcd->State == HAL_LCD_STATE_RESET)
 8001904:	2335      	movs	r3, #53	@ 0x35
 8001906:	5cc3      	ldrb	r3, [r0, r3]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <HAL_LCD_Init+0x14>
 800190e:	e06f      	b.n	80019f0 <HAL_LCD_Init+0xf4>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001910:	2335      	movs	r3, #53	@ 0x35
 8001912:	2202      	movs	r2, #2
  __HAL_LCD_DISABLE(hlcd);
 8001914:	2101      	movs	r1, #1
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001916:	54e2      	strb	r2, [r4, r3]
  __HAL_LCD_DISABLE(hlcd);
 8001918:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hlcd->Instance->FCR, \
 800191a:	68a0      	ldr	r0, [r4, #8]
  __HAL_LCD_DISABLE(hlcd);
 800191c:	6813      	ldr	r3, [r2, #0]
  tickstart = HAL_GetTick();

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800191e:	27fa      	movs	r7, #250	@ 0xfa
  __HAL_LCD_DISABLE(hlcd);
 8001920:	438b      	bics	r3, r1
 8001922:	6013      	str	r3, [r2, #0]
    hlcd->Instance->RAM[counter] = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	6153      	str	r3, [r2, #20]
 8001928:	6193      	str	r3, [r2, #24]
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001930:	6293      	str	r3, [r2, #40]	@ 0x28
 8001932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
  MODIFY_REG(hlcd->Instance->FCR, \
 8001936:	6863      	ldr	r3, [r4, #4]
 8001938:	6851      	ldr	r1, [r2, #4]
 800193a:	4303      	orrs	r3, r0
 800193c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800193e:	2620      	movs	r6, #32
  MODIFY_REG(hlcd->Instance->FCR, \
 8001940:	4303      	orrs	r3, r0
 8001942:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001944:	00bf      	lsls	r7, r7, #2
  MODIFY_REG(hlcd->Instance->FCR, \
 8001946:	4303      	orrs	r3, r0
 8001948:	69e0      	ldr	r0, [r4, #28]
 800194a:	4303      	orrs	r3, r0
 800194c:	6a20      	ldr	r0, [r4, #32]
 800194e:	4303      	orrs	r3, r0
 8001950:	69a0      	ldr	r0, [r4, #24]
 8001952:	4303      	orrs	r3, r0
 8001954:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001956:	4303      	orrs	r3, r0
 8001958:	482b      	ldr	r0, [pc, #172]	@ (8001a08 <HAL_LCD_Init+0x10c>)
 800195a:	4001      	ands	r1, r0
 800195c:	430b      	orrs	r3, r1
 800195e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001960:	f7ff fd2a 	bl	80013b8 <HAL_GetTick>
 8001964:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001966:	e004      	b.n	8001972 <HAL_LCD_Init+0x76>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001968:	f7ff fd26 	bl	80013b8 <HAL_GetTick>
 800196c:	1b40      	subs	r0, r0, r5
 800196e:	42b8      	cmp	r0, r7
 8001970:	d83a      	bhi.n	80019e8 <HAL_LCD_Init+0xec>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	4216      	tst	r6, r2
 8001978:	d0f6      	beq.n	8001968 <HAL_LCD_Init+0x6c>
  MODIFY_REG(hlcd->Instance->CR, \
 800197a:	6920      	ldr	r0, [r4, #16]
 800197c:	68e2      	ldr	r2, [r4, #12]
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	4302      	orrs	r2, r0
 8001982:	6960      	ldr	r0, [r4, #20]
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001984:	27fa      	movs	r7, #250	@ 0xfa
  MODIFY_REG(hlcd->Instance->CR, \
 8001986:	4302      	orrs	r2, r0
 8001988:	6b20      	ldr	r0, [r4, #48]	@ 0x30
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800198a:	2601      	movs	r6, #1
  MODIFY_REG(hlcd->Instance->CR, \
 800198c:	4302      	orrs	r2, r0
 800198e:	20fe      	movs	r0, #254	@ 0xfe
 8001990:	4381      	bics	r1, r0
 8001992:	430a      	orrs	r2, r1
  __HAL_LCD_ENABLE(hlcd);
 8001994:	2101      	movs	r1, #1
  MODIFY_REG(hlcd->Instance->CR, \
 8001996:	601a      	str	r2, [r3, #0]
  __HAL_LCD_ENABLE(hlcd);
 8001998:	681a      	ldr	r2, [r3, #0]
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800199a:	00bf      	lsls	r7, r7, #2
  __HAL_LCD_ENABLE(hlcd);
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019a0:	f7ff fd0a 	bl	80013b8 <HAL_GetTick>
 80019a4:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80019a6:	e004      	b.n	80019b2 <HAL_LCD_Init+0xb6>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80019a8:	f7ff fd06 	bl	80013b8 <HAL_GetTick>
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	42b8      	cmp	r0, r7
 80019b0:	d823      	bhi.n	80019fa <HAL_LCD_Init+0xfe>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	421e      	tst	r6, r3
 80019b8:	d0f6      	beq.n	80019a8 <HAL_LCD_Init+0xac>
  tickstart = HAL_GetTick();
 80019ba:	f7ff fcfd 	bl	80013b8 <HAL_GetTick>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80019be:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 80019c0:	0005      	movs	r5, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80019c2:	2610      	movs	r6, #16
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80019c4:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80019c6:	e004      	b.n	80019d2 <HAL_LCD_Init+0xd6>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80019c8:	f7ff fcf6 	bl	80013b8 <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	42b8      	cmp	r0, r7
 80019d0:	d818      	bhi.n	8001a04 <HAL_LCD_Init+0x108>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	421e      	tst	r6, r3
 80019d8:	d0f6      	beq.n	80019c8 <HAL_LCD_Init+0xcc>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80019da:	2300      	movs	r3, #0
  hlcd->State = HAL_LCD_STATE_READY;
 80019dc:	2201      	movs	r2, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80019de:	63a3      	str	r3, [r4, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80019e0:	3335      	adds	r3, #53	@ 0x35
  return status;
 80019e2:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 80019e4:	54e2      	strb	r2, [r4, r3]
  return status;
 80019e6:	e002      	b.n	80019ee <HAL_LCD_Init+0xf2>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80019e8:	2301      	movs	r3, #1
 80019ea:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
}
 80019ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlcd->Lock = HAL_UNLOCKED;
 80019f0:	3334      	adds	r3, #52	@ 0x34
 80019f2:	54c2      	strb	r2, [r0, r3]
    HAL_LCD_MspInit(hlcd);
 80019f4:	f7ff ff80 	bl	80018f8 <HAL_LCD_MspInit>
 80019f8:	e78a      	b.n	8001910 <HAL_LCD_Init+0x14>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80019fa:	2308      	movs	r3, #8
 80019fc:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 80019fe:	e7f5      	b.n	80019ec <HAL_LCD_Init+0xf0>
    return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
 8001a02:	e7f4      	b.n	80019ee <HAL_LCD_Init+0xf2>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001a04:	63a6      	str	r6, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 8001a06:	e7f1      	b.n	80019ec <HAL_LCD_Init+0xf0>
 8001a08:	fc00000e 	.word	0xfc00000e

08001a0c <HAL_LCD_Write>:
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	464f      	mov	r7, r9
 8001a10:	4646      	mov	r6, r8
 8001a12:	46d6      	mov	lr, sl
 8001a14:	0015      	movs	r5, r2
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001a16:	2235      	movs	r2, #53	@ 0x35
{
 8001a18:	b5c0      	push	{r6, r7, lr}
 8001a1a:	001f      	movs	r7, r3
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001a1c:	5c83      	ldrb	r3, [r0, r2]
{
 8001a1e:	0004      	movs	r4, r0
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001a20:	3b01      	subs	r3, #1
{
 8001a22:	000e      	movs	r6, r1
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d823      	bhi.n	8001a72 <HAL_LCD_Write+0x66>
    if (hlcd->State == HAL_LCD_STATE_READY)
 8001a2a:	5ca3      	ldrb	r3, [r4, r2]
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d124      	bne.n	8001a7c <HAL_LCD_Write+0x70>
      __HAL_LOCK(hlcd);
 8001a32:	2334      	movs	r3, #52	@ 0x34
 8001a34:	5ce0      	ldrb	r0, [r4, r3]
 8001a36:	2801      	cmp	r0, #1
 8001a38:	d029      	beq.n	8001a8e <HAL_LCD_Write+0x82>
 8001a3a:	54e1      	strb	r1, [r4, r3]
      hlcd->State = HAL_LCD_STATE_BUSY;
 8001a3c:	3b32      	subs	r3, #50	@ 0x32
 8001a3e:	54a3      	strb	r3, [r4, r2]
      tickstart = HAL_GetTick();
 8001a40:	f7ff fcba 	bl	80013b8 <HAL_GetTick>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001a44:	2304      	movs	r3, #4
 8001a46:	4699      	mov	r9, r3
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001a48:	23fa      	movs	r3, #250	@ 0xfa
 8001a4a:	009b      	lsls	r3, r3, #2
      tickstart = HAL_GetTick();
 8001a4c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001a4e:	469a      	mov	sl, r3
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001a50:	4649      	mov	r1, r9
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4211      	tst	r1, r2
 8001a58:	d011      	beq.n	8001a7e <HAL_LCD_Write+0x72>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001a5a:	f7ff fcad 	bl	80013b8 <HAL_GetTick>
 8001a5e:	4643      	mov	r3, r8
 8001a60:	1ac0      	subs	r0, r0, r3
 8001a62:	4550      	cmp	r0, sl
 8001a64:	d9f4      	bls.n	8001a50 <HAL_LCD_Write+0x44>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001a66:	2302      	movs	r3, #2
          __HAL_UNLOCK(hlcd);
 8001a68:	2200      	movs	r2, #0
          return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001a6c:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hlcd);
 8001a6e:	3332      	adds	r3, #50	@ 0x32
 8001a70:	54e2      	strb	r2, [r4, r3]
}
 8001a72:	bce0      	pop	{r5, r6, r7}
 8001a74:	46ba      	mov	sl, r7
 8001a76:	46b1      	mov	r9, r6
 8001a78:	46a8      	mov	r8, r5
 8001a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	00b6      	lsls	r6, r6, #2
 8001a80:	199b      	adds	r3, r3, r6
 8001a82:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8001a84:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001a86:	4015      	ands	r5, r2
 8001a88:	433d      	orrs	r5, r7
 8001a8a:	615d      	str	r5, [r3, #20]
    return HAL_OK;
 8001a8c:	e7f1      	b.n	8001a72 <HAL_LCD_Write+0x66>
      __HAL_LOCK(hlcd);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	e7ef      	b.n	8001a72 <HAL_LCD_Write+0x66>
 8001a92:	46c0      	nop			@ (mov r8, r8)

08001a94 <HAL_LCD_Clear>:
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001a94:	2235      	movs	r2, #53	@ 0x35
{
 8001a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001a98:	5c83      	ldrb	r3, [r0, r2]
{
 8001a9a:	0004      	movs	r4, r0
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001a9c:	3b01      	subs	r3, #1
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d900      	bls.n	8001aa6 <HAL_LCD_Clear+0x12>
}
 8001aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hlcd);
 8001aa6:	2334      	movs	r3, #52	@ 0x34
 8001aa8:	5ce1      	ldrb	r1, [r4, r3]
 8001aaa:	2901      	cmp	r1, #1
 8001aac:	d048      	beq.n	8001b40 <HAL_LCD_Clear+0xac>
 8001aae:	54e0      	strb	r0, [r4, r3]
    hlcd->State = HAL_LCD_STATE_BUSY;
 8001ab0:	3b32      	subs	r3, #50	@ 0x32
 8001ab2:	54a3      	strb	r3, [r4, r2]
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fc80 	bl	80013b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001ab8:	27fa      	movs	r7, #250	@ 0xfa
    tickstart = HAL_GetTick();
 8001aba:	0006      	movs	r6, r0
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001abc:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001abe:	00bf      	lsls	r7, r7, #2
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001ac0:	e004      	b.n	8001acc <HAL_LCD_Clear+0x38>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001ac2:	f7ff fc79 	bl	80013b8 <HAL_GetTick>
 8001ac6:	1b80      	subs	r0, r0, r6
 8001ac8:	42b8      	cmp	r0, r7
 8001aca:	d832      	bhi.n	8001b32 <HAL_LCD_Clear+0x9e>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001acc:	0029      	movs	r1, r5
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	4011      	ands	r1, r2
 8001ad4:	4215      	tst	r5, r2
 8001ad6:	d1f4      	bne.n	8001ac2 <HAL_LCD_Clear+0x2e>
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001ad8:	2208      	movs	r2, #8
      hlcd->Instance->RAM[counter] = 0;
 8001ada:	6159      	str	r1, [r3, #20]
 8001adc:	6199      	str	r1, [r3, #24]
 8001ade:	61d9      	str	r1, [r3, #28]
 8001ae0:	6219      	str	r1, [r3, #32]
 8001ae2:	6259      	str	r1, [r3, #36]	@ 0x24
 8001ae4:	6299      	str	r1, [r3, #40]	@ 0x28
 8001ae6:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001ae8:	6319      	str	r1, [r3, #48]	@ 0x30
 8001aea:	6359      	str	r1, [r3, #52]	@ 0x34
 8001aec:	6399      	str	r1, [r3, #56]	@ 0x38
 8001aee:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001af0:	6419      	str	r1, [r3, #64]	@ 0x40
 8001af2:	6459      	str	r1, [r3, #68]	@ 0x44
 8001af4:	6499      	str	r1, [r3, #72]	@ 0x48
 8001af6:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001af8:	6519      	str	r1, [r3, #80]	@ 0x50
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001afa:	60da      	str	r2, [r3, #12]
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001afc:	689a      	ldr	r2, [r3, #8]
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001afe:	27fa      	movs	r7, #250	@ 0xfa
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b00:	432a      	orrs	r2, r5
 8001b02:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8001b04:	f7ff fc58 	bl	80013b8 <HAL_GetTick>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b08:	2608      	movs	r6, #8
  tickstart = HAL_GetTick();
 8001b0a:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b0c:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b0e:	e004      	b.n	8001b1a <HAL_LCD_Clear+0x86>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b10:	f7ff fc52 	bl	80013b8 <HAL_GetTick>
 8001b14:	1b40      	subs	r0, r0, r5
 8001b16:	42b8      	cmp	r0, r7
 8001b18:	d814      	bhi.n	8001b44 <HAL_LCD_Clear+0xb0>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	421e      	tst	r6, r3
 8001b20:	d0f6      	beq.n	8001b10 <HAL_LCD_Clear+0x7c>
  hlcd->State = HAL_LCD_STATE_READY;
 8001b22:	2335      	movs	r3, #53	@ 0x35
 8001b24:	2201      	movs	r2, #1
 8001b26:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hlcd);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	3b01      	subs	r3, #1
  return HAL_OK;
 8001b2c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hlcd);
 8001b2e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001b30:	e7b8      	b.n	8001aa4 <HAL_LCD_Clear+0x10>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001b32:	2302      	movs	r3, #2
 8001b34:	63a3      	str	r3, [r4, #56]	@ 0x38
        __HAL_UNLOCK(hlcd);
 8001b36:	2334      	movs	r3, #52	@ 0x34
 8001b38:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hlcd);
 8001b3c:	54e2      	strb	r2, [r4, r3]
 8001b3e:	e7b1      	b.n	8001aa4 <HAL_LCD_Clear+0x10>
    __HAL_LOCK(hlcd);
 8001b40:	2002      	movs	r0, #2
 8001b42:	e7af      	b.n	8001aa4 <HAL_LCD_Clear+0x10>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001b44:	2304      	movs	r3, #4
 8001b46:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 8001b48:	e7f5      	b.n	8001b36 <HAL_LCD_Clear+0xa2>
 8001b4a:	46c0      	nop			@ (mov r8, r8)

08001b4c <HAL_LCD_UpdateDisplayRequest>:
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001b4c:	2208      	movs	r2, #8
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b4e:	2104      	movs	r1, #4
{
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001b52:	6803      	ldr	r3, [r0, #0]
{
 8001b54:	0004      	movs	r4, r0
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001b56:	60da      	str	r2, [r3, #12]
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b58:	689a      	ldr	r2, [r3, #8]
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b5a:	27fa      	movs	r7, #250	@ 0xfa
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8001b60:	f7ff fc2a 	bl	80013b8 <HAL_GetTick>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b64:	2608      	movs	r6, #8
  tickstart = HAL_GetTick();
 8001b66:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b68:	00bf      	lsls	r7, r7, #2
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b6a:	e004      	b.n	8001b76 <HAL_LCD_UpdateDisplayRequest+0x2a>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b6c:	f7ff fc24 	bl	80013b8 <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	42b8      	cmp	r0, r7
 8001b74:	d80b      	bhi.n	8001b8e <HAL_LCD_UpdateDisplayRequest+0x42>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	421e      	tst	r6, r3
 8001b7c:	d0f6      	beq.n	8001b6c <HAL_LCD_UpdateDisplayRequest+0x20>
  hlcd->State = HAL_LCD_STATE_READY;
 8001b7e:	2335      	movs	r3, #53	@ 0x35
 8001b80:	2201      	movs	r2, #1
  return HAL_OK;
 8001b82:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 8001b84:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hlcd);
 8001b86:	2334      	movs	r3, #52	@ 0x34
 8001b88:	2200      	movs	r2, #0
 8001b8a:	54e2      	strb	r2, [r4, r3]
}
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001b8e:	2304      	movs	r3, #4
      return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001b92:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_TIMEOUT;
 8001b94:	e7f7      	b.n	8001b86 <HAL_LCD_UpdateDisplayRequest+0x3a>
 8001b96:	46c0      	nop			@ (mov r8, r8)

08001b98 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	1e05      	subs	r5, r0, #0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001b9c:	d100      	bne.n	8001ba0 <HAL_LPTIM_Init+0x8>
 8001b9e:	e0a4      	b.n	8001cea <HAL_LPTIM_Init+0x152>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001ba0:	2352      	movs	r3, #82	@ 0x52
 8001ba2:	5cc3      	ldrb	r3, [r0, r3]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <HAL_LPTIM_Init+0x14>
 8001baa:	e099      	b.n	8001ce0 <HAL_LPTIM_Init+0x148>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001bac:	2352      	movs	r3, #82	@ 0x52
 8001bae:	2202      	movs	r2, #2

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001bb0:	2680      	movs	r6, #128	@ 0x80
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001bb2:	54ea      	strb	r2, [r5, r3]
  __HAL_LPTIM_ENABLE(hlptim);
 8001bb4:	682c      	ldr	r4, [r5, #0]
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	6923      	ldr	r3, [r4, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001bba:	0076      	lsls	r6, r6, #1
  __HAL_LPTIM_ENABLE(hlptim);
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	6123      	str	r3, [r4, #16]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001bc0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001bc2:	6066      	str	r6, [r4, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8001bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <HAL_LPTIM_Init+0x170>)
 8001bc8:	4950      	ldr	r1, [pc, #320]	@ (8001d0c <HAL_LPTIM_Init+0x174>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	f7fe faa4 	bl	8000118 <__udivsi3>
 8001bd0:	0143      	lsls	r3, r0, #5
 8001bd2:	1a1b      	subs	r3, r3, r0
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	181b      	adds	r3, r3, r0
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	001a      	movs	r2, r3
  do
  {
    count--;
 8001bdc:	3a01      	subs	r2, #1
    if (count == 0UL)
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d05c      	beq.n	8001c9c <HAL_LPTIM_Init+0x104>
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001be2:	6821      	ldr	r1, [r4, #0]
 8001be4:	4231      	tst	r1, r6
 8001be6:	d0f9      	beq.n	8001bdc <HAL_LPTIM_Init+0x44>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001be8:	2210      	movs	r2, #16
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001bea:	2110      	movs	r1, #16
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001bec:	6062      	str	r2, [r4, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8001bee:	6a2a      	ldr	r2, [r5, #32]
 8001bf0:	61a2      	str	r2, [r4, #24]
    count--;
 8001bf2:	3b01      	subs	r3, #1
    if (count == 0UL)
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d051      	beq.n	8001c9c <HAL_LPTIM_Init+0x104>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	4211      	tst	r1, r2
 8001bfc:	d0f9      	beq.n	8001bf2 <HAL_LPTIM_Init+0x5a>
  __HAL_LPTIM_DISABLE(hlptim);
 8001bfe:	4b44      	ldr	r3, [pc, #272]	@ (8001d10 <HAL_LPTIM_Init+0x178>)
 8001c00:	429c      	cmp	r4, r3
 8001c02:	d04e      	beq.n	8001ca2 <HAL_LPTIM_Init+0x10a>
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <HAL_LPTIM_Init+0x17c>)
 8001c06:	429c      	cmp	r4, r3
 8001c08:	d04b      	beq.n	8001ca2 <HAL_LPTIM_Init+0x10a>
 8001c0a:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <HAL_LPTIM_Init+0x180>)
 8001c0c:	429c      	cmp	r4, r3
 8001c0e:	d100      	bne.n	8001c12 <HAL_LPTIM_Init+0x7a>
 8001c10:	e070      	b.n	8001cf4 <HAL_LPTIM_Init+0x15c>
 8001c12:	2201      	movs	r2, #1
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	4393      	bics	r3, r2
 8001c18:	6123      	str	r3, [r4, #16]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c1a:	6868      	ldr	r0, [r5, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 8001c1c:	68e3      	ldr	r3, [r4, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c1e:	6aae      	ldr	r6, [r5, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c20:	2801      	cmp	r0, #1
 8001c22:	d055      	beq.n	8001cd0 <HAL_LPTIM_Init+0x138>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c24:	2280      	movs	r2, #128	@ 0x80
 8001c26:	0412      	lsls	r2, r2, #16
 8001c28:	4296      	cmp	r6, r2
 8001c2a:	d051      	beq.n	8001cd0 <HAL_LPTIM_Init+0x138>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c2c:	6969      	ldr	r1, [r5, #20]
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d1c <HAL_LPTIM_Init+0x184>)
 8001c30:	4291      	cmp	r1, r2
 8001c32:	d001      	beq.n	8001c38 <HAL_LPTIM_Init+0xa0>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001c34:	4a3a      	ldr	r2, [pc, #232]	@ (8001d20 <HAL_LPTIM_Init+0x188>)
 8001c36:	4013      	ands	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c38:	4a3a      	ldr	r2, [pc, #232]	@ (8001d24 <HAL_LPTIM_Init+0x18c>)
              hlptim->Init.UpdateMode      |
 8001c3a:	68af      	ldr	r7, [r5, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c3c:	401a      	ands	r2, r3
              hlptim->Init.UpdateMode      |
 8001c3e:	0003      	movs	r3, r0
 8001c40:	4333      	orrs	r3, r6
 8001c42:	433b      	orrs	r3, r7
 8001c44:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8001c46:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c48:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d139      	bne.n	8001cc2 <HAL_LPTIM_Init+0x12a>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c4e:	69ea      	ldr	r2, [r5, #28]
 8001c50:	6928      	ldr	r0, [r5, #16]
 8001c52:	4302      	orrs	r2, r0
 8001c54:	4313      	orrs	r3, r2
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	0412      	lsls	r2, r2, #16
 8001c5a:	4296      	cmp	r6, r2
 8001c5c:	d033      	beq.n	8001cc6 <HAL_LPTIM_Init+0x12e>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d1c <HAL_LPTIM_Init+0x184>)
 8001c60:	4291      	cmp	r1, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_LPTIM_Init+0xd6>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c64:	69aa      	ldr	r2, [r5, #24]
 8001c66:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8001c68:	69ea      	ldr	r2, [r5, #28]
 8001c6a:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c6c:	430b      	orrs	r3, r1
  hlptim->Instance->CFGR = tmpcfgr;
 8001c6e:	60e3      	str	r3, [r4, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_LPTIM_Init+0x178>)
 8001c72:	429c      	cmp	r4, r3
 8001c74:	d02f      	beq.n	8001cd6 <HAL_LPTIM_Init+0x13e>
 8001c76:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_LPTIM_Init+0x17c>)
 8001c78:	429c      	cmp	r4, r3
 8001c7a:	d02c      	beq.n	8001cd6 <HAL_LPTIM_Init+0x13e>
    if (hlptim->Instance == LPTIM2)
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <HAL_LPTIM_Init+0x180>)
 8001c7e:	429c      	cmp	r4, r3
 8001c80:	d035      	beq.n	8001cee <HAL_LPTIM_Init+0x156>
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8001c82:	2301      	movs	r3, #1
 8001c84:	2253      	movs	r2, #83	@ 0x53
 8001c86:	54ab      	strb	r3, [r5, r2]
 8001c88:	3201      	adds	r2, #1
 8001c8a:	54ab      	strb	r3, [r5, r2]
 8001c8c:	3201      	adds	r2, #1
 8001c8e:	54ab      	strb	r3, [r5, r2]
 8001c90:	3201      	adds	r2, #1
 8001c92:	54ab      	strb	r3, [r5, r2]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c94:	3a04      	subs	r2, #4
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c98:	54ab      	strb	r3, [r5, r2]
  return HAL_OK;
 8001c9a:	e001      	b.n	8001ca0 <HAL_LPTIM_Init+0x108>
    return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001c9e:	6823      	ldr	r3, [r4, #0]
}
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ca6:	4213      	tst	r3, r2
 8001ca8:	d1b7      	bne.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001caa:	2280      	movs	r2, #128	@ 0x80
 8001cac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001cae:	0292      	lsls	r2, r2, #10
 8001cb0:	4211      	tst	r1, r2
 8001cb2:	d1b2      	bne.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001cb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001cb6:	420b      	tst	r3, r1
 8001cb8:	d1af      	bne.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001cba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cbc:	4213      	tst	r3, r2
 8001cbe:	d1ac      	bne.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001cc0:	e7a7      	b.n	8001c12 <HAL_LPTIM_Init+0x7a>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001cc2:	2801      	cmp	r0, #1
 8001cc4:	d1c7      	bne.n	8001c56 <HAL_LPTIM_Init+0xbe>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001cc6:	68ea      	ldr	r2, [r5, #12]
 8001cc8:	6928      	ldr	r0, [r5, #16]
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	e7c6      	b.n	8001c5e <HAL_LPTIM_Init+0xc6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001cd0:	221e      	movs	r2, #30
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	e7aa      	b.n	8001c2c <HAL_LPTIM_Init+0x94>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001cd6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001cd8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8001cde:	e7d0      	b.n	8001c82 <HAL_LPTIM_Init+0xea>
    hlptim->Lock = HAL_UNLOCKED;
 8001ce0:	3351      	adds	r3, #81	@ 0x51
 8001ce2:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 8001ce4:	f7ff fa36 	bl	8001154 <HAL_LPTIM_MspInit>
 8001ce8:	e760      	b.n	8001bac <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e7d8      	b.n	8001ca0 <HAL_LPTIM_Init+0x108>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001cee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001cf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001cf2:	e7c6      	b.n	8001c82 <HAL_LPTIM_Init+0xea>
  __HAL_LPTIM_DISABLE(hlptim);
 8001cf4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cf6:	079b      	lsls	r3, r3, #30
 8001cf8:	d500      	bpl.n	8001cfc <HAL_LPTIM_Init+0x164>
 8001cfa:	e78e      	b.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001cfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cfe:	039b      	lsls	r3, r3, #14
 8001d00:	d500      	bpl.n	8001d04 <HAL_LPTIM_Init+0x16c>
 8001d02:	e78a      	b.n	8001c1a <HAL_LPTIM_Init+0x82>
 8001d04:	e785      	b.n	8001c12 <HAL_LPTIM_Init+0x7a>
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	00004e20 	.word	0x00004e20
 8001d10:	40007c00 	.word	0x40007c00
 8001d14:	40009000 	.word	0x40009000
 8001d18:	40009400 	.word	0x40009400
 8001d1c:	0000ffff 	.word	0x0000ffff
 8001d20:	ffff1f3f 	.word	0xffff1f3f
 8001d24:	ff39f1fe 	.word	0xff39f1fe

08001d28 <HAL_LPTIM_IC_Start_IT>:
{
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	0006      	movs	r6, r0
 8001d2c:	1e0d      	subs	r5, r1, #0
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8001d2e:	d134      	bne.n	8001d9a <HAL_LPTIM_IC_Start_IT+0x72>
 8001d30:	2253      	movs	r2, #83	@ 0x53
 8001d32:	5c83      	ldrb	r3, [r0, r2]
 8001d34:	b2d9      	uxtb	r1, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d148      	bne.n	8001dcc <HAL_LPTIM_IC_Start_IT+0xa4>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001d3a:	2052      	movs	r0, #82	@ 0x52
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	5433      	strb	r3, [r6, r0]
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8001d40:	54b3      	strb	r3, [r6, r2]
  __HAL_LPTIM_ENABLE(hlptim);
 8001d42:	6834      	ldr	r4, [r6, #0]
 8001d44:	6923      	ldr	r3, [r4, #16]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	6123      	str	r3, [r4, #16]
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CC1);
 8001d4a:	68a3      	ldr	r3, [r4, #8]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	60a3      	str	r3, [r4, #8]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001d50:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <HAL_LPTIM_IC_Start_IT+0x130>)
 8001d52:	4942      	ldr	r1, [pc, #264]	@ (8001e5c <HAL_LPTIM_IC_Start_IT+0x134>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f7fe f9df 	bl	8000118 <__udivsi3>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001d5a:	2180      	movs	r1, #128	@ 0x80
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001d5c:	0143      	lsls	r3, r0, #5
 8001d5e:	1a1b      	subs	r3, r3, r0
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	181b      	adds	r3, r3, r0
 8001d64:	00db      	lsls	r3, r3, #3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001d66:	0449      	lsls	r1, r1, #17
    count--;
 8001d68:	3b01      	subs	r3, #1
    if (count == 0UL)
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d030      	beq.n	8001dd0 <HAL_LPTIM_IC_Start_IT+0xa8>
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	420a      	tst	r2, r1
 8001d72:	d0f9      	beq.n	8001d68 <HAL_LPTIM_IC_Start_IT+0x40>
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001d74:	2204      	movs	r2, #4
 8001d76:	6923      	ldr	r3, [r4, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	6123      	str	r3, [r4, #16]
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001d7c:	2d02      	cmp	r5, #2
 8001d7e:	d051      	beq.n	8001e24 <HAL_LPTIM_IC_Start_IT+0xfc>
 8001d80:	d829      	bhi.n	8001dd6 <HAL_LPTIM_IC_Start_IT+0xae>
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	d045      	beq.n	8001e12 <HAL_LPTIM_IC_Start_IT+0xea>
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001d8a:	029b      	lsls	r3, r3, #10
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d90:	2352      	movs	r3, #82	@ 0x52
 8001d92:	2201      	movs	r2, #1
  return HAL_OK;
 8001d94:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001d96:	54f2      	strb	r2, [r6, r3]
  return HAL_OK;
 8001d98:	e019      	b.n	8001dce <HAL_LPTIM_IC_Start_IT+0xa6>
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8001d9a:	2901      	cmp	r1, #1
 8001d9c:	d027      	beq.n	8001dee <HAL_LPTIM_IC_Start_IT+0xc6>
 8001d9e:	2902      	cmp	r1, #2
 8001da0:	d048      	beq.n	8001e34 <HAL_LPTIM_IC_Start_IT+0x10c>
 8001da2:	2256      	movs	r2, #86	@ 0x56
 8001da4:	5c83      	ldrb	r3, [r0, r2]
 8001da6:	b2d9      	uxtb	r1, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10f      	bne.n	8001dcc <HAL_LPTIM_IC_Start_IT+0xa4>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001dac:	2052      	movs	r0, #82	@ 0x52
 8001dae:	3301      	adds	r3, #1
 8001db0:	5433      	strb	r3, [r6, r0]
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8001db2:	54b3      	strb	r3, [r6, r2]
  __HAL_LPTIM_ENABLE(hlptim);
 8001db4:	6834      	ldr	r4, [r6, #0]
 8001db6:	6923      	ldr	r3, [r4, #16]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6123      	str	r3, [r4, #16]
  switch (Channel)
 8001dbc:	2d03      	cmp	r5, #3
 8001dbe:	d1c7      	bne.n	8001d50 <HAL_LPTIM_IC_Start_IT+0x28>
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CC4);
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	68a2      	ldr	r2, [r4, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60a3      	str	r3, [r4, #8]
      break;
 8001dca:	e7c1      	b.n	8001d50 <HAL_LPTIM_IC_Start_IT+0x28>
    return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
}
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIMEOUT;
 8001dd0:	2003      	movs	r0, #3
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001dd2:	6823      	ldr	r3, [r4, #0]

  return result;
 8001dd4:	e7fb      	b.n	8001dce <HAL_LPTIM_IC_Start_IT+0xa6>
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001dd6:	2d03      	cmp	r5, #3
 8001dd8:	d1da      	bne.n	8001d90 <HAL_LPTIM_IC_Start_IT+0x68>
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4313      	orrs	r3, r2
 8001de2:	6323      	str	r3, [r4, #48]	@ 0x30
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001de4:	2201      	movs	r2, #1
 8001de6:	2352      	movs	r3, #82	@ 0x52
  return HAL_OK;
 8001de8:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001dea:	54f2      	strb	r2, [r6, r3]
  return HAL_OK;
 8001dec:	e7ef      	b.n	8001dce <HAL_LPTIM_IC_Start_IT+0xa6>
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8001dee:	2354      	movs	r3, #84	@ 0x54
 8001df0:	5cc2      	ldrb	r2, [r0, r3]
 8001df2:	2a01      	cmp	r2, #1
 8001df4:	d1ea      	bne.n	8001dcc <HAL_LPTIM_IC_Start_IT+0xa4>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001df6:	2202      	movs	r2, #2
 8001df8:	2152      	movs	r1, #82	@ 0x52
 8001dfa:	5442      	strb	r2, [r0, r1]
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8001dfc:	54c2      	strb	r2, [r0, r3]
  __HAL_LPTIM_ENABLE(hlptim);
 8001dfe:	6804      	ldr	r4, [r0, #0]
 8001e00:	6923      	ldr	r3, [r4, #16]
 8001e02:	432b      	orrs	r3, r5
 8001e04:	6123      	str	r3, [r4, #16]
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CC2);
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	68a2      	ldr	r2, [r4, #8]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60a3      	str	r3, [r4, #8]
      break;
 8001e10:	e79e      	b.n	8001d50 <HAL_LPTIM_IC_Start_IT+0x28>
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001e12:	2202      	movs	r2, #2
 8001e14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2352      	movs	r3, #82	@ 0x52
 8001e20:	54f2      	strb	r2, [r6, r3]
  return HAL_OK;
 8001e22:	e7d4      	b.n	8001dce <HAL_LPTIM_IC_Start_IT+0xa6>
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001e24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e26:	2201      	movs	r2, #1
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8001e28:	432b      	orrs	r3, r5
 8001e2a:	6323      	str	r3, [r4, #48]	@ 0x30
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e2c:	2352      	movs	r3, #82	@ 0x52
  return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e30:	54f2      	strb	r2, [r6, r3]
  return HAL_OK;
 8001e32:	e7cc      	b.n	8001dce <HAL_LPTIM_IC_Start_IT+0xa6>
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8001e34:	2355      	movs	r3, #85	@ 0x55
 8001e36:	5cc2      	ldrb	r2, [r0, r3]
 8001e38:	b2d1      	uxtb	r1, r2
 8001e3a:	2a01      	cmp	r2, #1
 8001e3c:	d1c6      	bne.n	8001dcc <HAL_LPTIM_IC_Start_IT+0xa4>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e3e:	3251      	adds	r2, #81	@ 0x51
 8001e40:	5485      	strb	r5, [r0, r2]
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 8001e42:	54c5      	strb	r5, [r0, r3]
  __HAL_LPTIM_ENABLE(hlptim);
 8001e44:	6804      	ldr	r4, [r0, #0]
 8001e46:	6923      	ldr	r3, [r4, #16]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6123      	str	r3, [r4, #16]
      __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CC3);
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	68a2      	ldr	r2, [r4, #8]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60a3      	str	r3, [r4, #8]
      break;
 8001e56:	e77b      	b.n	8001d50 <HAL_LPTIM_IC_Start_IT+0x28>
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	00004e20 	.word	0x00004e20

08001e60 <HAL_LPTIM_IC_ConfigChannel>:
{
 8001e60:	b530      	push	{r4, r5, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e62:	2352      	movs	r3, #82	@ 0x52
 8001e64:	2402      	movs	r4, #2
 8001e66:	54c4      	strb	r4, [r0, r3]
  switch (Channel)
 8001e68:	2a02      	cmp	r2, #2
 8001e6a:	d035      	beq.n	8001ed8 <HAL_LPTIM_IC_ConfigChannel+0x78>
 8001e6c:	d81c      	bhi.n	8001ea8 <HAL_LPTIM_IC_ConfigChannel+0x48>
 8001e6e:	2a00      	cmp	r2, #0
 8001e70:	d046      	beq.n	8001f00 <HAL_LPTIM_IC_ConfigChannel+0xa0>
  uint32_t tmpccmr1;
  uint32_t tmpcfgr2;

  tmpccmr1 = hlptim->Instance->CCMR1;
  tmpccmr1 &= ~(LPTIM_CCMR1_IC2PSC_Msk | LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_IC2F_Msk);
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 8001e72:	684d      	ldr	r5, [r1, #4]
  tmpccmr1 = hlptim->Instance->CCMR1;
 8001e74:	6802      	ldr	r2, [r0, #0]
              (sConfig->ICPolarity << (LPTIM_CCMR1_CC2P_Pos - LPTIM_CCMR1_CC1P_Pos)) |
 8001e76:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = hlptim->Instance->CCMR1;
 8001e78:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
              (sConfig->ICPolarity << (LPTIM_CCMR1_CC2P_Pos - LPTIM_CCMR1_CC1P_Pos)) |
 8001e7a:	432b      	orrs	r3, r5
  tmpccmr1 &= ~(LPTIM_CCMR1_IC2PSC_Msk | LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_IC2F_Msk);
 8001e7c:	4d2a      	ldr	r5, [pc, #168]	@ (8001f28 <HAL_LPTIM_IC_ConfigChannel+0xc8>)
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 8001e7e:	041b      	lsls	r3, r3, #16
  tmpccmr1 &= ~(LPTIM_CCMR1_IC2PSC_Msk | LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_IC2F_Msk);
 8001e80:	402c      	ands	r4, r5
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 8001e82:	4323      	orrs	r3, r4
              (sConfig->ICFilter << (LPTIM_CCMR1_IC2F_Pos - LPTIM_CCMR1_IC1F_Pos)) |
 8001e84:	68cc      	ldr	r4, [r1, #12]
              LPTIM_CCMR1_CC2SEL;

  tmpcfgr2 = hlptim->Instance->CFGR2;
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC2SEL_Msk);
 8001e86:	4d29      	ldr	r5, [pc, #164]	@ (8001f2c <HAL_LPTIM_IC_ConfigChannel+0xcc>)
              (sConfig->ICFilter << (LPTIM_CCMR1_IC2F_Pos - LPTIM_CCMR1_IC1F_Pos)) |
 8001e88:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	2480      	movs	r4, #128	@ 0x80
 8001e8e:	0264      	lsls	r4, r4, #9
 8001e90:	431c      	orrs	r4, r3
  tmpcfgr2 = hlptim->Instance->CFGR2;
 8001e92:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  tmpcfgr2 |= sConfig->ICInputSource;
 8001e94:	6809      	ldr	r1, [r1, #0]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC2SEL_Msk);
 8001e96:	402b      	ands	r3, r5
  tmpcfgr2 |= sConfig->ICInputSource;
 8001e98:	430b      	orrs	r3, r1

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8001e9a:	62d4      	str	r4, [r2, #44]	@ 0x2c

  /* Write to CFGR2 register */
  hlptim->Instance->CFGR2 = tmpcfgr2;
 8001e9c:	6253      	str	r3, [r2, #36]	@ 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e9e:	2352      	movs	r3, #82	@ 0x52
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	54c2      	strb	r2, [r0, r3]
}
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8001ea8:	2a03      	cmp	r2, #3
 8001eaa:	d1f8      	bne.n	8001e9e <HAL_LPTIM_IC_ConfigChannel+0x3e>
  uint32_t tmpccmr2;
  uint32_t tmpcfgr2;

  tmpccmr2 = hlptim->Instance->CCMR2;
  tmpccmr2 &= ~(LPTIM_CCMR2_IC4PSC_Msk | LPTIM_CCMR2_CC4P_Msk | LPTIM_CCMR2_IC4F_Msk);
  tmpccmr2 |= (sConfig->ICPrescaler << (LPTIM_CCMR2_IC4PSC_Pos - LPTIM_CCMR2_IC3PSC_Pos)) |
 8001eac:	684d      	ldr	r5, [r1, #4]
  tmpccmr2 = hlptim->Instance->CCMR2;
 8001eae:	6804      	ldr	r4, [r0, #0]
              (sConfig->ICPolarity << (LPTIM_CCMR2_CC4P_Pos - LPTIM_CCMR2_CC3P_Pos)) |
 8001eb0:	688b      	ldr	r3, [r1, #8]
  tmpccmr2 = hlptim->Instance->CCMR2;
 8001eb2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
              (sConfig->ICPolarity << (LPTIM_CCMR2_CC4P_Pos - LPTIM_CCMR2_CC3P_Pos)) |
 8001eb4:	432b      	orrs	r3, r5
  tmpccmr2 &= ~(LPTIM_CCMR2_IC4PSC_Msk | LPTIM_CCMR2_CC4P_Msk | LPTIM_CCMR2_IC4F_Msk);
 8001eb6:	4d1c      	ldr	r5, [pc, #112]	@ (8001f28 <HAL_LPTIM_IC_ConfigChannel+0xc8>)
  tmpccmr2 |= (sConfig->ICPrescaler << (LPTIM_CCMR2_IC4PSC_Pos - LPTIM_CCMR2_IC3PSC_Pos)) |
 8001eb8:	041b      	lsls	r3, r3, #16
  tmpccmr2 &= ~(LPTIM_CCMR2_IC4PSC_Msk | LPTIM_CCMR2_CC4P_Msk | LPTIM_CCMR2_IC4F_Msk);
 8001eba:	402a      	ands	r2, r5
  tmpccmr2 |= (sConfig->ICPrescaler << (LPTIM_CCMR2_IC4PSC_Pos - LPTIM_CCMR2_IC3PSC_Pos)) |
 8001ebc:	4313      	orrs	r3, r2
              (sConfig->ICFilter << (LPTIM_CCMR2_IC4F_Pos - LPTIM_CCMR2_IC3F_Pos)) |
 8001ebe:	68ca      	ldr	r2, [r1, #12]
              LPTIM_CCMR2_CC3SEL;

  tmpcfgr2 = hlptim->Instance->CFGR2;
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC4SEL_Msk);
 8001ec0:	4d1b      	ldr	r5, [pc, #108]	@ (8001f30 <HAL_LPTIM_IC_ConfigChannel+0xd0>)
              (sConfig->ICFilter << (LPTIM_CCMR2_IC4F_Pos - LPTIM_CCMR2_IC3F_Pos)) |
 8001ec2:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (sConfig->ICPrescaler << (LPTIM_CCMR2_IC4PSC_Pos - LPTIM_CCMR2_IC3PSC_Pos)) |
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4313      	orrs	r3, r2
  tmpcfgr2 = hlptim->Instance->CFGR2;
 8001eca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpcfgr2 |= sConfig->ICInputSource;
 8001ecc:	6809      	ldr	r1, [r1, #0]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC4SEL_Msk);
 8001ece:	402a      	ands	r2, r5
  tmpcfgr2 |= sConfig->ICInputSource;
 8001ed0:	430a      	orrs	r2, r1

  /* Write to CCMR2 register */
  hlptim->Instance->CCMR2 = tmpccmr2;
 8001ed2:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Write to CFGR2 register */
  hlptim->Instance->CFGR2 = tmpcfgr2;
 8001ed4:	6262      	str	r2, [r4, #36]	@ 0x24
}
 8001ed6:	e7e2      	b.n	8001e9e <HAL_LPTIM_IC_ConfigChannel+0x3e>
  tmpccmr2 |= sConfig->ICPrescaler |
 8001ed8:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = hlptim->Instance->CCMR1;
 8001eda:	6804      	ldr	r4, [r0, #0]
  tmpccmr2 |= sConfig->ICPrescaler |
 8001edc:	684b      	ldr	r3, [r1, #4]
  tmpccmr2 = hlptim->Instance->CCMR1;
 8001ede:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  tmpccmr2 |= sConfig->ICPrescaler |
 8001ee0:	432b      	orrs	r3, r5
  tmpccmr2 &= ~(LPTIM_CCMR2_IC3PSC_Msk | LPTIM_CCMR2_CC3P_Msk | LPTIM_CCMR2_IC3F_Msk);
 8001ee2:	4d14      	ldr	r5, [pc, #80]	@ (8001f34 <HAL_LPTIM_IC_ConfigChannel+0xd4>)
 8001ee4:	402a      	ands	r2, r5
  tmpccmr2 |= sConfig->ICPrescaler |
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	68ca      	ldr	r2, [r1, #12]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC3SEL_Msk);
 8001eea:	4d13      	ldr	r5, [pc, #76]	@ (8001f38 <HAL_LPTIM_IC_ConfigChannel+0xd8>)
  tmpccmr2 |= sConfig->ICPrescaler |
 8001eec:	4313      	orrs	r3, r2
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4313      	orrs	r3, r2
  tmpcfgr2 = hlptim->Instance->CFGR2;
 8001ef2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpcfgr2 |= sConfig->ICInputSource;
 8001ef4:	6809      	ldr	r1, [r1, #0]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC4SEL_Msk);
 8001ef6:	402a      	ands	r2, r5
  tmpcfgr2 |= sConfig->ICInputSource;
 8001ef8:	430a      	orrs	r2, r1
  hlptim->Instance->CCMR2 = tmpccmr2;
 8001efa:	6323      	str	r3, [r4, #48]	@ 0x30
  hlptim->Instance->CFGR2 = tmpcfgr2;
 8001efc:	6262      	str	r2, [r4, #36]	@ 0x24
 8001efe:	e7ce      	b.n	8001e9e <HAL_LPTIM_IC_ConfigChannel+0x3e>
  tmpccmr1 |= sConfig->ICPrescaler |
 8001f00:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = hlptim->Instance->CCMR1;
 8001f02:	6804      	ldr	r4, [r0, #0]
  tmpccmr1 |= sConfig->ICPrescaler |
 8001f04:	684b      	ldr	r3, [r1, #4]
  tmpccmr1 = hlptim->Instance->CCMR1;
 8001f06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  tmpccmr1 |= sConfig->ICPrescaler |
 8001f08:	432b      	orrs	r3, r5
  tmpccmr1 &= ~(LPTIM_CCMR1_IC1PSC_Msk | LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_IC1F_Msk);
 8001f0a:	4d0a      	ldr	r5, [pc, #40]	@ (8001f34 <HAL_LPTIM_IC_ConfigChannel+0xd4>)
 8001f0c:	402a      	ands	r2, r5
  tmpccmr1 |= sConfig->ICPrescaler |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	68ca      	ldr	r2, [r1, #12]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC1SEL_Msk);
 8001f12:	4d0a      	ldr	r5, [pc, #40]	@ (8001f3c <HAL_LPTIM_IC_ConfigChannel+0xdc>)
  tmpccmr1 |= sConfig->ICPrescaler |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	2201      	movs	r2, #1
 8001f18:	4313      	orrs	r3, r2
  tmpcfgr2 = hlptim->Instance->CFGR2;
 8001f1a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpcfgr2 |= sConfig->ICInputSource;
 8001f1c:	6809      	ldr	r1, [r1, #0]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC1SEL_Msk);
 8001f1e:	402a      	ands	r2, r5
  tmpcfgr2 |= sConfig->ICInputSource;
 8001f20:	430a      	orrs	r2, r1
  hlptim->Instance->CCMR1 = tmpccmr1;
 8001f22:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hlptim->Instance->CFGR2 = tmpcfgr2;
 8001f24:	6262      	str	r2, [r4, #36]	@ 0x24
}
 8001f26:	e7ba      	b.n	8001e9e <HAL_LPTIM_IC_ConfigChannel+0x3e>
 8001f28:	ccf3ffff 	.word	0xccf3ffff
 8001f2c:	ffcfffff 	.word	0xffcfffff
 8001f30:	cfffffff 	.word	0xcfffffff
 8001f34:	ffffccf3 	.word	0xffffccf3
 8001f38:	fcffffff 	.word	0xfcffffff
 8001f3c:	fffcffff 	.word	0xfffcffff

08001f40 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	4a03      	ldr	r2, [pc, #12]	@ (8001f50 <HAL_PWR_EnableBkUpAccess+0x10>)
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	6811      	ldr	r1, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	4770      	bx	lr
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f54:	2380      	movs	r3, #128	@ 0x80
{
 8001f56:	b510      	push	{r4, lr}
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4298      	cmp	r0, r3
 8001f5c:	d00f      	beq.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x2a>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5e:	22c0      	movs	r2, #192	@ 0xc0
 8001f60:	491a      	ldr	r1, [pc, #104]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f62:	00d2      	lsls	r2, r2, #3
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	00d2      	lsls	r2, r2, #3
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x26>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f70:	680b      	ldr	r3, [r1, #0]
 8001f72:	4817      	ldr	r0, [pc, #92]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f74:	4003      	ands	r3, r0
 8001f76:	431a      	orrs	r2, r3
 8001f78:	600a      	str	r2, [r1, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
}
 8001f7c:	bd10      	pop	{r4, pc}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	22c0      	movs	r2, #192	@ 0xc0
 8001f80:	4c12      	ldr	r4, [pc, #72]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f82:	00d2      	lsls	r2, r2, #3
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	4013      	ands	r3, r2
 8001f88:	4283      	cmp	r3, r0
 8001f8a:	d0f6      	beq.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x26>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f90:	4910      	ldr	r1, [pc, #64]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f92:	4013      	ands	r3, r2
 8001f94:	4318      	orrs	r0, r3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	6020      	str	r0, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	2332      	movs	r3, #50	@ 0x32
 8001f9e:	4358      	muls	r0, r3
 8001fa0:	f7fe f8ba 	bl	8000118 <__udivsi3>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	6963      	ldr	r3, [r4, #20]
 8001fa8:	00d2      	lsls	r2, r2, #3
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001faa:	3001      	adds	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fac:	4213      	tst	r3, r2
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x62>
 8001fb0:	e005      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x6a>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x6a>
 8001fb6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001fb8:	3801      	subs	r0, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fba:	4213      	tst	r3, r2
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fbe:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	055b      	lsls	r3, r3, #21
 8001fc4:	d5d9      	bpl.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x26>
        return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	e7d8      	b.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x28>
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	fffff9ff 	.word	0xfffff9ff
 8001fd4:	000f4240 	.word	0x000f4240
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_PWREx_GetVoltageRange>:
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8001fdc:	4b02      	ldr	r3, [pc, #8]	@ (8001fe8 <HAL_PWREx_GetVoltageRange+0xc>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	23c0      	movs	r3, #192	@ 0xc0
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4018      	ands	r0, r3
}
 8001fe6:	4770      	bx	lr
 8001fe8:	40007000 	.word	0x40007000

08001fec <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	4a03      	ldr	r2, [pc, #12]	@ (8001ffc <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 8001ff0:	01db      	lsls	r3, r3, #7
 8001ff2:	6811      	ldr	r1, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	40007000 	.word	0x40007000

08002000 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8002000:	2107      	movs	r1, #7
 8002002:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8002004:	6813      	ldr	r3, [r2, #0]
 8002006:	438b      	bics	r3, r1
 8002008:	3906      	subs	r1, #6
 800200a:	430b      	orrs	r3, r1
 800200c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8002010:	3103      	adds	r1, #3
 8002012:	6913      	ldr	r3, [r2, #16]
 8002014:	430b      	orrs	r3, r1
 8002016:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002018:	2801      	cmp	r0, #1
 800201a:	d008      	beq.n	800202e <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800201c:	bf40      	sev
    __WFE();
 800201e:	bf20      	wfe
    __WFE();
 8002020:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002022:	2104      	movs	r1, #4
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8002026:	6913      	ldr	r3, [r2, #16]
 8002028:	438b      	bics	r3, r1
 800202a:	6113      	str	r3, [r2, #16]
}
 800202c:	4770      	bx	lr
    __WFI();
 800202e:	bf30      	wfi
 8002030:	e7f7      	b.n	8002022 <HAL_PWREx_EnterSTOP1Mode+0x22>
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40007000 	.word	0x40007000
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <RCC_SetFlashLatencyFromMSIRange>:
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800203c:	2380      	movs	r3, #128	@ 0x80
{
 800203e:	b530      	push	{r4, r5, lr}
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002040:	4d1e      	ldr	r5, [pc, #120]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002042:	055b      	lsls	r3, r3, #21
 8002044:	6daa      	ldr	r2, [r5, #88]	@ 0x58
{
 8002046:	0004      	movs	r4, r0
 8002048:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800204a:	421a      	tst	r2, r3
 800204c:	d016      	beq.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x40>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800204e:	f7ff ffc5 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4298      	cmp	r0, r3
 8002058:	d021      	beq.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x62>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205a:	2102      	movs	r1, #2
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 800205c:	2c7f      	cmp	r4, #127	@ 0x7f
 800205e:	d929      	bls.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x78>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002060:	2007      	movs	r0, #7
 8002062:	4a17      	ldr	r2, [pc, #92]	@ (80020c0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002064:	6813      	ldr	r3, [r2, #0]
 8002066:	4383      	bics	r3, r0
 8002068:	430b      	orrs	r3, r1
 800206a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800206c:	6813      	ldr	r3, [r2, #0]
 800206e:	4018      	ands	r0, r3
 8002070:	1a40      	subs	r0, r0, r1
 8002072:	1e43      	subs	r3, r0, #1
 8002074:	4198      	sbcs	r0, r3
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002076:	b2c0      	uxtb	r0, r0
 8002078:	b003      	add	sp, #12
 800207a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 800207e:	431a      	orrs	r2, r3
 8002080:	65aa      	str	r2, [r5, #88]	@ 0x58
 8002082:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8002084:	4013      	ands	r3, r2
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800208a:	f7ff ffa7 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002092:	4013      	ands	r3, r2
 8002094:	65ab      	str	r3, [r5, #88]	@ 0x58
  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4298      	cmp	r0, r3
 800209c:	d1dd      	bne.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x1e>
      latency = FLASH_LATENCY_0; /* 0WS */
 800209e:	2100      	movs	r1, #0
    if (msirange > RCC_MSIRANGE_8)
 80020a0:	2c80      	cmp	r4, #128	@ 0x80
 80020a2:	d9dd      	bls.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x24>
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a4:	3102      	adds	r1, #2
      if (msirange > RCC_MSIRANGE_11)
 80020a6:	2cb0      	cmp	r4, #176	@ 0xb0
 80020a8:	d8da      	bhi.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x24>
      else if (msirange > RCC_MSIRANGE_9)
 80020aa:	318e      	adds	r1, #142	@ 0x8e
 80020ac:	42a1      	cmp	r1, r4
 80020ae:	4189      	sbcs	r1, r1
 80020b0:	4249      	negs	r1, r1
 80020b2:	e7d5      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x24>
    else if (msirange == RCC_MSIRANGE_7)
 80020b4:	3c70      	subs	r4, #112	@ 0x70
 80020b6:	4261      	negs	r1, r4
 80020b8:	4161      	adcs	r1, r4
 80020ba:	e7d1      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x24>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40022000 	.word	0x40022000
 80020c4:	efffffff 	.word	0xefffffff

080020c8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c8:	2238      	movs	r2, #56	@ 0x38
 80020ca:	0011      	movs	r1, r2
 80020cc:	482c      	ldr	r0, [pc, #176]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
{
 80020ce:	b510      	push	{r4, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d0:	6883      	ldr	r3, [r0, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d2:	68c0      	ldr	r0, [r0, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d4:	4019      	ands	r1, r3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020d6:	421a      	tst	r2, r3
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x28>
 80020da:	2918      	cmp	r1, #24
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020de:	2908      	cmp	r1, #8
 80020e0:	d13a      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSI_VALUE;
 80020e2:	4828      	ldr	r0, [pc, #160]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e4:	e030      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e6:	2303      	movs	r3, #3
 80020e8:	4003      	ands	r3, r0
  uint32_t msirange = 0U;
 80020ea:	2000      	movs	r0, #0
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d113      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0x50>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	071b      	lsls	r3, r3, #28
 80020f6:	d528      	bpl.n	800214a <HAL_RCC_GetSysClockFreq+0x82>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	0f1b      	lsrs	r3, r3, #28
      msirange = 0U;
 80020fe:	200b      	movs	r0, #11
 8002100:	2200      	movs	r2, #0
 8002102:	4298      	cmp	r0, r3
 8002104:	4152      	adcs	r2, r2
 8002106:	4252      	negs	r2, r2
 8002108:	4013      	ands	r3, r2
    msirange = MSIRangeTable[msirange];
 800210a:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <HAL_RCC_GetSysClockFreq+0xc0>)
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	5898      	ldr	r0, [r3, r2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002110:	2900      	cmp	r1, #0
 8002112:	d019      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	2918      	cmp	r1, #24
 8002116:	d130      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002118:	2303      	movs	r3, #3
 800211a:	4a19      	ldr	r2, [pc, #100]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211c:	68d1      	ldr	r1, [r2, #12]
 800211e:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	68d1      	ldr	r1, [r2, #12]
 8002122:	0649      	lsls	r1, r1, #25
 8002124:	0f49      	lsrs	r1, r1, #29
 8002126:	3101      	adds	r1, #1
    switch (pllsource)
 8002128:	2b02      	cmp	r3, #2
 800212a:	d019      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x98>
 800212c:	2b03      	cmp	r3, #3
 800212e:	d011      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x8c>
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8002130:	4a13      	ldr	r2, [pc, #76]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002132:	68d3      	ldr	r3, [r2, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002134:	68d4      	ldr	r4, [r2, #12]
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8002136:	045b      	lsls	r3, r3, #17
 8002138:	0e5b      	lsrs	r3, r3, #25
 800213a:	4358      	muls	r0, r3
 800213c:	f7fd ffec 	bl	8000118 <__udivsi3>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002140:	0f61      	lsrs	r1, r4, #29
 8002142:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002144:	f7fd ffe8 	bl	8000118 <__udivsi3>
}
 8002148:	bd10      	pop	{r4, pc}
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800214a:	2394      	movs	r3, #148	@ 0x94
 800214c:	58d3      	ldr	r3, [r2, r3]
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	0f1b      	lsrs	r3, r3, #28
 8002152:	e7d4      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x36>
    switch (pllsource)
 8002154:	480d      	ldr	r0, [pc, #52]	@ (800218c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002156:	e7eb      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x68>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002158:	2910      	cmp	r1, #16
 800215a:	d103      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x9c>
    sysclockfreq = HSE_VALUE;
 800215c:	480b      	ldr	r0, [pc, #44]	@ (800218c <HAL_RCC_GetSysClockFreq+0xc4>)
 800215e:	e7f3      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
        pllsourcefreq = HSI_VALUE;
 8002160:	4808      	ldr	r0, [pc, #32]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002162:	e7e5      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x68>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002164:	2920      	cmp	r1, #32
 8002166:	d102      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0xa6>
    sysclockfreq = LSI_VALUE;
 8002168:	20fa      	movs	r0, #250	@ 0xfa
 800216a:	01c0      	lsls	r0, r0, #7
 800216c:	e7ec      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 800216e:	3928      	subs	r1, #40	@ 0x28
 8002170:	0008      	movs	r0, r1
 8002172:	4243      	negs	r3, r0
 8002174:	4158      	adcs	r0, r3
 8002176:	03c0      	lsls	r0, r0, #15
 8002178:	e7e6      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
 800217a:	2000      	movs	r0, #0
  return sysclockfreq;
 800217c:	e7e4      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	00f42400 	.word	0x00f42400
 8002188:	08003084 	.word	0x08003084
 800218c:	003d0900 	.word	0x003d0900

08002190 <HAL_RCC_OscConfig>:
{
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002192:	4646      	mov	r6, r8
 8002194:	46d6      	mov	lr, sl
 8002196:	464f      	mov	r7, r9
 8002198:	b5c0      	push	{r6, r7, lr}
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219a:	2603      	movs	r6, #3
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219c:	2538      	movs	r5, #56	@ 0x38
 800219e:	4bcc      	ldr	r3, [pc, #816]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
{
 80021a0:	0004      	movs	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	689a      	ldr	r2, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	68db      	ldr	r3, [r3, #12]
{
 80021a6:	b082      	sub	sp, #8
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	401e      	ands	r6, r3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021aa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4015      	ands	r5, r2
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ae:	06da      	lsls	r2, r3, #27
 80021b0:	d541      	bpl.n	8002236 <HAL_RCC_OscConfig+0xa6>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d000      	beq.n	80021b8 <HAL_RCC_OscConfig+0x28>
 80021b6:	e15d      	b.n	8002474 <HAL_RCC_OscConfig+0x2e4>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b8:	4bc5      	ldr	r3, [pc, #788]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	079b      	lsls	r3, r3, #30
 80021be:	d503      	bpl.n	80021c8 <HAL_RCC_OscConfig+0x38>
 80021c0:	69e3      	ldr	r3, [r4, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d100      	bne.n	80021c8 <HAL_RCC_OscConfig+0x38>
 80021c6:	e1c0      	b.n	800254a <HAL_RCC_OscConfig+0x3ba>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c8:	4bc1      	ldr	r3, [pc, #772]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 80021ca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	0712      	lsls	r2, r2, #28
 80021d0:	d500      	bpl.n	80021d4 <HAL_RCC_OscConfig+0x44>
 80021d2:	e191      	b.n	80024f8 <HAL_RCC_OscConfig+0x368>
 80021d4:	2294      	movs	r2, #148	@ 0x94
 80021d6:	589a      	ldr	r2, [r3, r2]
 80021d8:	23f0      	movs	r3, #240	@ 0xf0
 80021da:	0912      	lsrs	r2, r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	4298      	cmp	r0, r3
 80021e0:	d900      	bls.n	80021e4 <HAL_RCC_OscConfig+0x54>
 80021e2:	e25a      	b.n	800269a <HAL_RCC_OscConfig+0x50a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	2108      	movs	r1, #8
 80021e6:	4bba      	ldr	r3, [pc, #744]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e8:	4fba      	ldr	r7, [pc, #744]	@ (80024d4 <HAL_RCC_OscConfig+0x344>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	31e8      	adds	r1, #232	@ 0xe8
 80021f4:	438a      	bics	r2, r1
 80021f6:	4302      	orrs	r2, r0
 80021f8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	6a22      	ldr	r2, [r4, #32]
 80021fe:	4039      	ands	r1, r7
 8002200:	0212      	lsls	r2, r2, #8
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002206:	2d00      	cmp	r5, #0
 8002208:	d100      	bne.n	800220c <HAL_RCC_OscConfig+0x7c>
 800220a:	e273      	b.n	80026f4 <HAL_RCC_OscConfig+0x564>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800220c:	f7ff ff5c 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002210:	4baf      	ldr	r3, [pc, #700]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 8002212:	4ab1      	ldr	r2, [pc, #708]	@ (80024d8 <HAL_RCC_OscConfig+0x348>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	49b1      	ldr	r1, [pc, #708]	@ (80024dc <HAL_RCC_OscConfig+0x34c>)
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	0f1b      	lsrs	r3, r3, #28
 800221c:	5cd2      	ldrb	r2, [r2, r3]
 800221e:	231f      	movs	r3, #31
 8002220:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002222:	40d8      	lsrs	r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002224:	4bae      	ldr	r3, [pc, #696]	@ (80024e0 <HAL_RCC_OscConfig+0x350>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002226:	6008      	str	r0, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f7ff f887 	bl	800133c <HAL_InitTick>
        if (status != HAL_OK)
 800222e:	2800      	cmp	r0, #0
 8002230:	d000      	beq.n	8002234 <HAL_RCC_OscConfig+0xa4>
 8002232:	e119      	b.n	8002468 <HAL_RCC_OscConfig+0x2d8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	07da      	lsls	r2, r3, #31
 8002238:	d52b      	bpl.n	8002292 <HAL_RCC_OscConfig+0x102>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800223a:	2d10      	cmp	r5, #16
 800223c:	d100      	bne.n	8002240 <HAL_RCC_OscConfig+0xb0>
 800223e:	e17b      	b.n	8002538 <HAL_RCC_OscConfig+0x3a8>
 8002240:	2d18      	cmp	r5, #24
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0xb6>
 8002244:	e175      	b.n	8002532 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	0252      	lsls	r2, r2, #9
 800224c:	4293      	cmp	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0xc2>
 8002250:	e195      	b.n	800257e <HAL_RCC_OscConfig+0x3ee>
 8002252:	22a0      	movs	r2, #160	@ 0xa0
 8002254:	02d2      	lsls	r2, r2, #11
 8002256:	4293      	cmp	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_RCC_OscConfig+0xcc>
 800225a:	e190      	b.n	800257e <HAL_RCC_OscConfig+0x3ee>
 800225c:	4f9c      	ldr	r7, [pc, #624]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 800225e:	49a1      	ldr	r1, [pc, #644]	@ (80024e4 <HAL_RCC_OscConfig+0x354>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	603a      	str	r2, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002266:	2b00      	cmp	r3, #0
 8002268:	d000      	beq.n	800226c <HAL_RCC_OscConfig+0xdc>
 800226a:	e18c      	b.n	8002586 <HAL_RCC_OscConfig+0x3f6>
        tickstart = HAL_GetTick();
 800226c:	f7ff f8a4 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8002274:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	4699      	mov	r9, r3
 8002278:	e006      	b.n	8002288 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800227a:	f7ff f89d 	bl	80013b8 <HAL_GetTick>
 800227e:	4643      	mov	r3, r8
 8002280:	1ac0      	subs	r0, r0, r3
 8002282:	2864      	cmp	r0, #100	@ 0x64
 8002284:	d900      	bls.n	8002288 <HAL_RCC_OscConfig+0xf8>
 8002286:	e1b5      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002288:	464a      	mov	r2, r9
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4213      	tst	r3, r2
 800228e:	d1f4      	bne.n	800227a <HAL_RCC_OscConfig+0xea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	079a      	lsls	r2, r3, #30
 8002294:	d526      	bpl.n	80022e4 <HAL_RCC_OscConfig+0x154>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002296:	2d08      	cmp	r5, #8
 8002298:	d100      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 800229a:	e18c      	b.n	80025b6 <HAL_RCC_OscConfig+0x426>
 800229c:	2d18      	cmp	r5, #24
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x112>
 80022a0:	e186      	b.n	80025b0 <HAL_RCC_OscConfig+0x420>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4d8a      	ldr	r5, [pc, #552]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d100      	bne.n	80022ac <HAL_RCC_OscConfig+0x11c>
 80022aa:	e1a5      	b.n	80025f8 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_HSI_ENABLE();
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	682a      	ldr	r2, [r5, #0]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4313      	orrs	r3, r2
 80022b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022b6:	f7ff f87f 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ba:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80022bc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	00ff      	lsls	r7, r7, #3
 80022c0:	e005      	b.n	80022ce <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022c2:	f7ff f879 	bl	80013b8 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	2802      	cmp	r0, #2
 80022ca:	d900      	bls.n	80022ce <HAL_RCC_OscConfig+0x13e>
 80022cc:	e192      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	423b      	tst	r3, r7
 80022d2:	d0f6      	beq.n	80022c2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	686a      	ldr	r2, [r5, #4]
 80022d6:	6923      	ldr	r3, [r4, #16]
 80022d8:	4983      	ldr	r1, [pc, #524]	@ (80024e8 <HAL_RCC_OscConfig+0x358>)
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	400a      	ands	r2, r1
 80022de:	4313      	orrs	r3, r2
 80022e0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	071a      	lsls	r2, r3, #28
 80022e6:	d525      	bpl.n	8002334 <HAL_RCC_OscConfig+0x1a4>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022e8:	6963      	ldr	r3, [r4, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <HAL_RCC_OscConfig+0x160>
 80022ee:	e12e      	b.n	800254e <HAL_RCC_OscConfig+0x3be>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80022f0:	69a3      	ldr	r3, [r4, #24]
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80022f2:	2294      	movs	r2, #148	@ 0x94
 80022f4:	4976      	ldr	r1, [pc, #472]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d000      	beq.n	80022fc <HAL_RCC_OscConfig+0x16c>
 80022fa:	e191      	b.n	8002620 <HAL_RCC_OscConfig+0x490>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80022fc:	2004      	movs	r0, #4
 80022fe:	588b      	ldr	r3, [r1, r2]
 8002300:	4383      	bics	r3, r0
 8002302:	508b      	str	r3, [r1, r2]
      __HAL_RCC_LSI_ENABLE();
 8002304:	2294      	movs	r2, #148	@ 0x94
 8002306:	2101      	movs	r1, #1
 8002308:	4d71      	ldr	r5, [pc, #452]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800230a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800230c:	58ab      	ldr	r3, [r5, r2]
 800230e:	430b      	orrs	r3, r1
 8002310:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 8002312:	f7ff f851 	bl	80013b8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002316:	2394      	movs	r3, #148	@ 0x94
      tickstart = HAL_GetTick();
 8002318:	0006      	movs	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800231a:	4698      	mov	r8, r3
 800231c:	e005      	b.n	800232a <HAL_RCC_OscConfig+0x19a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231e:	f7ff f84b 	bl	80013b8 <HAL_GetTick>
 8002322:	1b80      	subs	r0, r0, r6
 8002324:	2811      	cmp	r0, #17
 8002326:	d900      	bls.n	800232a <HAL_RCC_OscConfig+0x19a>
 8002328:	e164      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800232a:	4643      	mov	r3, r8
 800232c:	58eb      	ldr	r3, [r5, r3]
 800232e:	421f      	tst	r7, r3
 8002330:	d0f5      	beq.n	800231e <HAL_RCC_OscConfig+0x18e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	075a      	lsls	r2, r3, #29
 8002336:	d559      	bpl.n	80023ec <HAL_RCC_OscConfig+0x25c>
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8002338:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 800233c:	4b64      	ldr	r3, [pc, #400]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 800233e:	0552      	lsls	r2, r2, #21
 8002340:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 8002342:	4682      	mov	sl, r0
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8002344:	4211      	tst	r1, r2
 8002346:	d108      	bne.n	800235a <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800234a:	4311      	orrs	r1, r2
 800234c:	6599      	str	r1, [r3, #88]	@ 0x58
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	4013      	ands	r3, r2
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	469a      	mov	sl, r3
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	2780      	movs	r7, #128	@ 0x80
 800235c:	4e63      	ldr	r6, [pc, #396]	@ (80024ec <HAL_RCC_OscConfig+0x35c>)
 800235e:	007f      	lsls	r7, r7, #1
 8002360:	6833      	ldr	r3, [r6, #0]
 8002362:	423b      	tst	r3, r7
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x1d8>
 8002366:	e136      	b.n	80025d6 <HAL_RCC_OscConfig+0x446>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002368:	2201      	movs	r2, #1
 800236a:	68a3      	ldr	r3, [r4, #8]
 800236c:	421a      	tst	r2, r3
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x1e2>
 8002370:	e15b      	b.n	800262a <HAL_RCC_OscConfig+0x49a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002372:	2004      	movs	r0, #4
 8002374:	4218      	tst	r0, r3
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x1ea>
 8002378:	e1c3      	b.n	8002702 <HAL_RCC_OscConfig+0x572>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800237a:	2390      	movs	r3, #144	@ 0x90
 800237c:	4954      	ldr	r1, [pc, #336]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 800237e:	58ce      	ldr	r6, [r1, r3]
 8002380:	4330      	orrs	r0, r6
 8002382:	50c8      	str	r0, [r1, r3]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002384:	58c8      	ldr	r0, [r1, r3]
 8002386:	4302      	orrs	r2, r0
 8002388:	50ca      	str	r2, [r1, r3]
      tickstart = HAL_GetTick();
 800238a:	f7ff f815 	bl	80013b8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002390:	0006      	movs	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	2790      	movs	r7, #144	@ 0x90
 8002394:	4699      	mov	r9, r3
 8002396:	4d4e      	ldr	r5, [pc, #312]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 8002398:	e006      	b.n	80023a8 <HAL_RCC_OscConfig+0x218>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff f80d 	bl	80013b8 <HAL_GetTick>
 800239e:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <HAL_RCC_OscConfig+0x360>)
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	4298      	cmp	r0, r3
 80023a4:	d900      	bls.n	80023a8 <HAL_RCC_OscConfig+0x218>
 80023a6:	e125      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a8:	464a      	mov	r2, r9
 80023aa:	59eb      	ldr	r3, [r5, r7]
 80023ac:	421a      	tst	r2, r3
 80023ae:	d0f4      	beq.n	800239a <HAL_RCC_OscConfig+0x20a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	68a2      	ldr	r2, [r4, #8]
 80023b4:	421a      	tst	r2, r3
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x22a>
 80023b8:	e1f0      	b.n	800279c <HAL_RCC_OscConfig+0x60c>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023ba:	59ea      	ldr	r2, [r5, r7]
 80023bc:	4313      	orrs	r3, r2
 80023be:	51eb      	str	r3, [r5, r7]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023c0:	2780      	movs	r7, #128	@ 0x80
 80023c2:	4b43      	ldr	r3, [pc, #268]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 80023c4:	2590      	movs	r5, #144	@ 0x90
 80023c6:	4699      	mov	r9, r3
 80023c8:	013f      	lsls	r7, r7, #4
 80023ca:	e006      	b.n	80023da <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fff4 	bl	80013b8 <HAL_GetTick>
 80023d0:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_OscConfig+0x360>)
 80023d2:	1b80      	subs	r0, r0, r6
 80023d4:	4298      	cmp	r0, r3
 80023d6:	d900      	bls.n	80023da <HAL_RCC_OscConfig+0x24a>
 80023d8:	e10c      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023da:	464b      	mov	r3, r9
 80023dc:	595b      	ldr	r3, [r3, r5]
 80023de:	423b      	tst	r3, r7
 80023e0:	d0f4      	beq.n	80023cc <HAL_RCC_OscConfig+0x23c>
    if (pwrclkchanged == SET)
 80023e2:	4653      	mov	r3, sl
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d100      	bne.n	80023ea <HAL_RCC_OscConfig+0x25a>
 80023e8:	e1d1      	b.n	800278e <HAL_RCC_OscConfig+0x5fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	d51a      	bpl.n	8002426 <HAL_RCC_OscConfig+0x296>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 80023f2:	2298      	movs	r2, #152	@ 0x98
 80023f4:	4d36      	ldr	r5, [pc, #216]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d100      	bne.n	80023fc <HAL_RCC_OscConfig+0x26c>
 80023fa:	e166      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      __HAL_RCC_HSI48_ENABLE();
 80023fc:	2101      	movs	r1, #1
 80023fe:	58ab      	ldr	r3, [r5, r2]
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002400:	2702      	movs	r7, #2
      __HAL_RCC_HSI48_ENABLE();
 8002402:	430b      	orrs	r3, r1
 8002404:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 8002406:	f7fe ffd7 	bl	80013b8 <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240a:	2398      	movs	r3, #152	@ 0x98
      tickstart = HAL_GetTick();
 800240c:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	4698      	mov	r8, r3
 8002410:	e005      	b.n	800241e <HAL_RCC_OscConfig+0x28e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002412:	f7fe ffd1 	bl	80013b8 <HAL_GetTick>
 8002416:	1b80      	subs	r0, r0, r6
 8002418:	2802      	cmp	r0, #2
 800241a:	d900      	bls.n	800241e <HAL_RCC_OscConfig+0x28e>
 800241c:	e0ea      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800241e:	4643      	mov	r3, r8
 8002420:	58eb      	ldr	r3, [r5, r3]
 8002422:	421f      	tst	r7, r3
 8002424:	d0f5      	beq.n	8002412 <HAL_RCC_OscConfig+0x282>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002426:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01c      	beq.n	8002466 <HAL_RCC_OscConfig+0x2d6>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	2238      	movs	r2, #56	@ 0x38
 800242e:	4d28      	ldr	r5, [pc, #160]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
 8002430:	68a9      	ldr	r1, [r5, #8]
 8002432:	400a      	ands	r2, r1
 8002434:	2a18      	cmp	r2, #24
 8002436:	d100      	bne.n	800243a <HAL_RCC_OscConfig+0x2aa>
 8002438:	e087      	b.n	800254a <HAL_RCC_OscConfig+0x3ba>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243a:	2b02      	cmp	r3, #2
 800243c:	d100      	bne.n	8002440 <HAL_RCC_OscConfig+0x2b0>
 800243e:	e166      	b.n	800270e <HAL_RCC_OscConfig+0x57e>
        __HAL_RCC_PLL_DISABLE();
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	4a2c      	ldr	r2, [pc, #176]	@ (80024f4 <HAL_RCC_OscConfig+0x364>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002446:	4013      	ands	r3, r2
 8002448:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800244a:	f7fe ffb5 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244e:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002450:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002452:	e005      	b.n	8002460 <HAL_RCC_OscConfig+0x2d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe ffb0 	bl	80013b8 <HAL_GetTick>
 8002458:	1b00      	subs	r0, r0, r4
 800245a:	2802      	cmp	r0, #2
 800245c:	d900      	bls.n	8002460 <HAL_RCC_OscConfig+0x2d0>
 800245e:	e0c9      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	4233      	tst	r3, r6
 8002464:	d1f6      	bne.n	8002454 <HAL_RCC_OscConfig+0x2c4>
  return HAL_OK;
 8002466:	2000      	movs	r0, #0
}
 8002468:	b002      	add	sp, #8
 800246a:	bce0      	pop	{r5, r6, r7}
 800246c:	46ba      	mov	sl, r7
 800246e:	46b1      	mov	r9, r6
 8002470:	46a8      	mov	r8, r5
 8002472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002474:	2d18      	cmp	r5, #24
 8002476:	d059      	beq.n	800252c <HAL_RCC_OscConfig+0x39c>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002478:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 800247a:	4f15      	ldr	r7, [pc, #84]	@ (80024d0 <HAL_RCC_OscConfig+0x340>)
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03f      	beq.n	8002500 <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_MSI_ENABLE();
 8002480:	2201      	movs	r2, #1
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002488:	f7fe ff96 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800248e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002490:	4699      	mov	r9, r3
 8002492:	e006      	b.n	80024a2 <HAL_RCC_OscConfig+0x312>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002494:	f7fe ff90 	bl	80013b8 <HAL_GetTick>
 8002498:	4643      	mov	r3, r8
 800249a:	1ac0      	subs	r0, r0, r3
 800249c:	2802      	cmp	r0, #2
 800249e:	d900      	bls.n	80024a2 <HAL_RCC_OscConfig+0x312>
 80024a0:	e0a8      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a2:	464a      	mov	r2, r9
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	421a      	tst	r2, r3
 80024a8:	d0f4      	beq.n	8002494 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024aa:	2208      	movs	r2, #8
 80024ac:	683b      	ldr	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ae:	4909      	ldr	r1, [pc, #36]	@ (80024d4 <HAL_RCC_OscConfig+0x344>)
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b0:	4313      	orrs	r3, r2
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	32e8      	adds	r2, #232	@ 0xe8
 80024b8:	4393      	bics	r3, r2
 80024ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80024bc:	4313      	orrs	r3, r2
 80024be:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6a23      	ldr	r3, [r4, #32]
 80024c4:	400a      	ands	r2, r1
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4313      	orrs	r3, r2
 80024ca:	607b      	str	r3, [r7, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	e6b2      	b.n	8002236 <HAL_RCC_OscConfig+0xa6>
 80024d0:	40021000 	.word	0x40021000
 80024d4:	ffff00ff 	.word	0xffff00ff
 80024d8:	080030b4 	.word	0x080030b4
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000008 	.word	0x20000008
 80024e4:	fffaffff 	.word	0xfffaffff
 80024e8:	80ffffff 	.word	0x80ffffff
 80024ec:	40007000 	.word	0x40007000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	feffffff 	.word	0xfeffffff
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	23f0      	movs	r3, #240	@ 0xf0
 80024fc:	4013      	ands	r3, r2
 80024fe:	e66e      	b.n	80021de <HAL_RCC_OscConfig+0x4e>
        __HAL_RCC_MSI_DISABLE();
 8002500:	2201      	movs	r2, #1
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	4393      	bics	r3, r2
 8002506:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002508:	f7fe ff56 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800250c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800250e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002510:	4699      	mov	r9, r3
 8002512:	e005      	b.n	8002520 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8002514:	f7fe ff50 	bl	80013b8 <HAL_GetTick>
 8002518:	4643      	mov	r3, r8
 800251a:	1ac0      	subs	r0, r0, r3
 800251c:	2802      	cmp	r0, #2
 800251e:	d869      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002520:	464a      	mov	r2, r9
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	421a      	tst	r2, r3
 8002526:	d1f5      	bne.n	8002514 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	e684      	b.n	8002236 <HAL_RCC_OscConfig+0xa6>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252c:	2e01      	cmp	r6, #1
 800252e:	d1a3      	bne.n	8002478 <HAL_RCC_OscConfig+0x2e8>
 8002530:	e642      	b.n	80021b8 <HAL_RCC_OscConfig+0x28>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002532:	2e03      	cmp	r6, #3
 8002534:	d000      	beq.n	8002538 <HAL_RCC_OscConfig+0x3a8>
 8002536:	e686      	b.n	8002246 <HAL_RCC_OscConfig+0xb6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4aa3      	ldr	r2, [pc, #652]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	0392      	lsls	r2, r2, #14
 800253e:	d400      	bmi.n	8002542 <HAL_RCC_OscConfig+0x3b2>
 8002540:	e6a7      	b.n	8002292 <HAL_RCC_OscConfig+0x102>
 8002542:	6862      	ldr	r2, [r4, #4]
 8002544:	2a00      	cmp	r2, #0
 8002546:	d000      	beq.n	800254a <HAL_RCC_OscConfig+0x3ba>
 8002548:	e6a3      	b.n	8002292 <HAL_RCC_OscConfig+0x102>
        return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e78c      	b.n	8002468 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_LSI_DISABLE();
 800254e:	2294      	movs	r2, #148	@ 0x94
 8002550:	2101      	movs	r1, #1
 8002552:	4d9d      	ldr	r5, [pc, #628]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002554:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002556:	58ab      	ldr	r3, [r5, r2]
 8002558:	438b      	bics	r3, r1
 800255a:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 800255c:	f7fe ff2c 	bl	80013b8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002560:	2394      	movs	r3, #148	@ 0x94
      tickstart = HAL_GetTick();
 8002562:	0006      	movs	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002564:	4698      	mov	r8, r3
 8002566:	e004      	b.n	8002572 <HAL_RCC_OscConfig+0x3e2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe ff26 	bl	80013b8 <HAL_GetTick>
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	2811      	cmp	r0, #17
 8002570:	d840      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002572:	4643      	mov	r3, r8
 8002574:	58eb      	ldr	r3, [r5, r3]
 8002576:	421f      	tst	r7, r3
 8002578:	d1f6      	bne.n	8002568 <HAL_RCC_OscConfig+0x3d8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	e6da      	b.n	8002334 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257e:	4992      	ldr	r1, [pc, #584]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 8002580:	680a      	ldr	r2, [r1, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002586:	f7fe ff17 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258a:	4b8f      	ldr	r3, [pc, #572]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
        tickstart = HAL_GetTick();
 800258c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	4699      	mov	r9, r3
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	4698      	mov	r8, r3
 8002596:	e004      	b.n	80025a2 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002598:	f7fe ff0e 	bl	80013b8 <HAL_GetTick>
 800259c:	1bc0      	subs	r0, r0, r7
 800259e:	2864      	cmp	r0, #100	@ 0x64
 80025a0:	d828      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a2:	464b      	mov	r3, r9
 80025a4:	4642      	mov	r2, r8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4213      	tst	r3, r2
 80025aa:	d0f5      	beq.n	8002598 <HAL_RCC_OscConfig+0x408>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	e670      	b.n	8002292 <HAL_RCC_OscConfig+0x102>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b0:	2e02      	cmp	r6, #2
 80025b2:	d000      	beq.n	80025b6 <HAL_RCC_OscConfig+0x426>
 80025b4:	e675      	b.n	80022a2 <HAL_RCC_OscConfig+0x112>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b6:	4a84      	ldr	r2, [pc, #528]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	0552      	lsls	r2, r2, #21
 80025bc:	d502      	bpl.n	80025c4 <HAL_RCC_OscConfig+0x434>
 80025be:	68e2      	ldr	r2, [r4, #12]
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d0c2      	beq.n	800254a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4880      	ldr	r0, [pc, #512]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 80025c6:	6922      	ldr	r2, [r4, #16]
 80025c8:	6841      	ldr	r1, [r0, #4]
 80025ca:	4d80      	ldr	r5, [pc, #512]	@ (80027cc <HAL_RCC_OscConfig+0x63c>)
 80025cc:	0612      	lsls	r2, r2, #24
 80025ce:	4029      	ands	r1, r5
 80025d0:	430a      	orrs	r2, r1
 80025d2:	6042      	str	r2, [r0, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	e686      	b.n	80022e4 <HAL_RCC_OscConfig+0x154>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d6:	6833      	ldr	r3, [r6, #0]
 80025d8:	433b      	orrs	r3, r7
 80025da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80025dc:	f7fe feec 	bl	80013b8 <HAL_GetTick>
 80025e0:	0005      	movs	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	6833      	ldr	r3, [r6, #0]
 80025e4:	423b      	tst	r3, r7
 80025e6:	d000      	beq.n	80025ea <HAL_RCC_OscConfig+0x45a>
 80025e8:	e6be      	b.n	8002368 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fe fee5 	bl	80013b8 <HAL_GetTick>
 80025ee:	1b40      	subs	r0, r0, r5
 80025f0:	2802      	cmp	r0, #2
 80025f2:	d9f6      	bls.n	80025e2 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80025f4:	2003      	movs	r0, #3
 80025f6:	e737      	b.n	8002468 <HAL_RCC_OscConfig+0x2d8>
        __HAL_RCC_HSI_DISABLE();
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	@ (80027d0 <HAL_RCC_OscConfig+0x640>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80025fe:	4013      	ands	r3, r2
 8002600:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002602:	f7fe fed9 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002606:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8002608:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260a:	e004      	b.n	8002616 <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800260c:	f7fe fed4 	bl	80013b8 <HAL_GetTick>
 8002610:	1b80      	subs	r0, r0, r6
 8002612:	2802      	cmp	r0, #2
 8002614:	d8ee      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	423b      	tst	r3, r7
 800261a:	d1f7      	bne.n	800260c <HAL_RCC_OscConfig+0x47c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	e661      	b.n	80022e4 <HAL_RCC_OscConfig+0x154>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8002620:	2004      	movs	r0, #4
 8002622:	588b      	ldr	r3, [r1, r2]
 8002624:	4303      	orrs	r3, r0
 8002626:	508b      	str	r3, [r1, r2]
 8002628:	e66c      	b.n	8002304 <HAL_RCC_OscConfig+0x174>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800262a:	2190      	movs	r1, #144	@ 0x90
 800262c:	4e66      	ldr	r6, [pc, #408]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 800262e:	5870      	ldr	r0, [r6, r1]
 8002630:	4390      	bics	r0, r2
 8002632:	5070      	str	r0, [r6, r1]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002634:	2004      	movs	r0, #4
 8002636:	5872      	ldr	r2, [r6, r1]
 8002638:	4382      	bics	r2, r0
 800263a:	5072      	str	r2, [r6, r1]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263c:	2b00      	cmp	r3, #0
 800263e:	d000      	beq.n	8002642 <HAL_RCC_OscConfig+0x4b2>
 8002640:	e6a3      	b.n	800238a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002642:	f7fe feb9 	bl	80013b8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002646:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002648:	0007      	movs	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264a:	2590      	movs	r5, #144	@ 0x90
 800264c:	4699      	mov	r9, r3
 800264e:	e005      	b.n	800265c <HAL_RCC_OscConfig+0x4cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe feb2 	bl	80013b8 <HAL_GetTick>
 8002654:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_OscConfig+0x644>)
 8002656:	1bc0      	subs	r0, r0, r7
 8002658:	4298      	cmp	r0, r3
 800265a:	d8cb      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265c:	464a      	mov	r2, r9
 800265e:	5973      	ldr	r3, [r6, r5]
 8002660:	421a      	tst	r2, r3
 8002662:	d1f5      	bne.n	8002650 <HAL_RCC_OscConfig+0x4c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	5972      	ldr	r2, [r6, r5]
 8002668:	4213      	tst	r3, r2
 800266a:	d100      	bne.n	800266e <HAL_RCC_OscConfig+0x4de>
 800266c:	e6b9      	b.n	80023e2 <HAL_RCC_OscConfig+0x252>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800266e:	5972      	ldr	r2, [r6, r5]
 8002670:	439a      	bics	r2, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002672:	4b55      	ldr	r3, [pc, #340]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002674:	5172      	str	r2, [r6, r5]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002676:	4699      	mov	r9, r3
 8002678:	2680      	movs	r6, #128	@ 0x80
 800267a:	2390      	movs	r3, #144	@ 0x90
 800267c:	0136      	lsls	r6, r6, #4
 800267e:	4698      	mov	r8, r3
 8002680:	e005      	b.n	800268e <HAL_RCC_OscConfig+0x4fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fe99 	bl	80013b8 <HAL_GetTick>
 8002686:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_OscConfig+0x644>)
 8002688:	1bc0      	subs	r0, r0, r7
 800268a:	4298      	cmp	r0, r3
 800268c:	d8b2      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800268e:	464b      	mov	r3, r9
 8002690:	4642      	mov	r2, r8
 8002692:	589b      	ldr	r3, [r3, r2]
 8002694:	4233      	tst	r3, r6
 8002696:	d1f4      	bne.n	8002682 <HAL_RCC_OscConfig+0x4f2>
 8002698:	e6a3      	b.n	80023e2 <HAL_RCC_OscConfig+0x252>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800269a:	f7ff fccf 	bl	800203c <RCC_SetFlashLatencyFromMSIRange>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d000      	beq.n	80026a4 <HAL_RCC_OscConfig+0x514>
 80026a2:	e752      	b.n	800254a <HAL_RCC_OscConfig+0x3ba>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	2108      	movs	r1, #8
 80026a6:	4b48      	ldr	r3, [pc, #288]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a8:	484b      	ldr	r0, [pc, #300]	@ (80027d8 <HAL_RCC_OscConfig+0x648>)
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	31e8      	adds	r1, #232	@ 0xe8
 80026b4:	438a      	bics	r2, r1
 80026b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	6a22      	ldr	r2, [r4, #32]
 80026c0:	4001      	ands	r1, r0
 80026c2:	0212      	lsls	r2, r2, #8
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e5a0      	b.n	800220c <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSI48_DISABLE();
 80026ca:	2101      	movs	r1, #1
 80026cc:	58ab      	ldr	r3, [r5, r2]
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80026ce:	2702      	movs	r7, #2
      __HAL_RCC_HSI48_DISABLE();
 80026d0:	438b      	bics	r3, r1
 80026d2:	50ab      	str	r3, [r5, r2]
      tickstart = HAL_GetTick();
 80026d4:	f7fe fe70 	bl	80013b8 <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80026d8:	2398      	movs	r3, #152	@ 0x98
      tickstart = HAL_GetTick();
 80026da:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80026dc:	4698      	mov	r8, r3
 80026de:	e004      	b.n	80026ea <HAL_RCC_OscConfig+0x55a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e0:	f7fe fe6a 	bl	80013b8 <HAL_GetTick>
 80026e4:	1b80      	subs	r0, r0, r6
 80026e6:	2802      	cmp	r0, #2
 80026e8:	d884      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x464>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80026ea:	4643      	mov	r3, r8
 80026ec:	58eb      	ldr	r3, [r5, r3]
 80026ee:	421f      	tst	r7, r3
 80026f0:	d1f6      	bne.n	80026e0 <HAL_RCC_OscConfig+0x550>
 80026f2:	e698      	b.n	8002426 <HAL_RCC_OscConfig+0x296>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f4:	f7ff fca2 	bl	800203c <RCC_SetFlashLatencyFromMSIRange>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d100      	bne.n	80026fe <HAL_RCC_OscConfig+0x56e>
 80026fc:	e586      	b.n	800220c <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 80026fe:	2001      	movs	r0, #1
 8002700:	e6b2      	b.n	8002468 <HAL_RCC_OscConfig+0x2d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002702:	2190      	movs	r1, #144	@ 0x90
 8002704:	4830      	ldr	r0, [pc, #192]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 8002706:	5843      	ldr	r3, [r0, r1]
 8002708:	4313      	orrs	r3, r2
 800270a:	5043      	str	r3, [r0, r1]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270c:	e63d      	b.n	800238a <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_PLL_DISABLE();
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	4a32      	ldr	r2, [pc, #200]	@ (80027dc <HAL_RCC_OscConfig+0x64c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002712:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002714:	4013      	ands	r3, r2
 8002716:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002718:	f7fe fe4e 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800271e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	e005      	b.n	800272e <HAL_RCC_OscConfig+0x59e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe fe49 	bl	80013b8 <HAL_GetTick>
 8002726:	1b80      	subs	r0, r0, r6
 8002728:	2802      	cmp	r0, #2
 800272a:	d900      	bls.n	800272e <HAL_RCC_OscConfig+0x59e>
 800272c:	e762      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272e:	682b      	ldr	r3, [r5, #0]
 8002730:	423b      	tst	r3, r7
 8002732:	d1f6      	bne.n	8002722 <HAL_RCC_OscConfig+0x592>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002736:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002738:	68ea      	ldr	r2, [r5, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	4928      	ldr	r1, [pc, #160]	@ (80027e0 <HAL_RCC_OscConfig+0x650>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4e22      	ldr	r6, [pc, #136]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002740:	400a      	ands	r2, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002746:	4313      	orrs	r3, r2
 8002748:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800274a:	4313      	orrs	r3, r2
 800274c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800274e:	4313      	orrs	r3, r2
 8002750:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002752:	0212      	lsls	r2, r2, #8
 8002754:	4313      	orrs	r3, r2
 8002756:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	68ea      	ldr	r2, [r5, #12]
 800275c:	055b      	lsls	r3, r3, #21
 800275e:	4313      	orrs	r3, r2
 8002760:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	682a      	ldr	r2, [r5, #0]
 8002766:	045b      	lsls	r3, r3, #17
 8002768:	4313      	orrs	r3, r2
 800276a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800276c:	f7fe fe24 	bl	80013b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002770:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002772:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	04ad      	lsls	r5, r5, #18
 8002776:	e005      	b.n	8002784 <HAL_RCC_OscConfig+0x5f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fe1e 	bl	80013b8 <HAL_GetTick>
 800277c:	1b00      	subs	r0, r0, r4
 800277e:	2802      	cmp	r0, #2
 8002780:	d900      	bls.n	8002784 <HAL_RCC_OscConfig+0x5f4>
 8002782:	e737      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	6833      	ldr	r3, [r6, #0]
 8002786:	422b      	tst	r3, r5
 8002788:	d0f6      	beq.n	8002778 <HAL_RCC_OscConfig+0x5e8>
  return HAL_OK;
 800278a:	2000      	movs	r0, #0
 800278c:	e66c      	b.n	8002468 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 8002790:	4914      	ldr	r1, [pc, #80]	@ (80027e4 <HAL_RCC_OscConfig+0x654>)
 8002792:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002794:	400b      	ands	r3, r1
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	e627      	b.n	80023ec <HAL_RCC_OscConfig+0x25c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800279c:	59ea      	ldr	r2, [r5, r7]
 800279e:	439a      	bics	r2, r3
 80027a0:	51ea      	str	r2, [r5, r7]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027a2:	2780      	movs	r7, #128	@ 0x80
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_RCC_OscConfig+0x638>)
 80027a6:	2590      	movs	r5, #144	@ 0x90
 80027a8:	4699      	mov	r9, r3
 80027aa:	013f      	lsls	r7, r7, #4
 80027ac:	e006      	b.n	80027bc <HAL_RCC_OscConfig+0x62c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fe03 	bl	80013b8 <HAL_GetTick>
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_RCC_OscConfig+0x644>)
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	4298      	cmp	r0, r3
 80027b8:	d900      	bls.n	80027bc <HAL_RCC_OscConfig+0x62c>
 80027ba:	e71b      	b.n	80025f4 <HAL_RCC_OscConfig+0x464>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027bc:	464b      	mov	r3, r9
 80027be:	595b      	ldr	r3, [r3, r5]
 80027c0:	423b      	tst	r3, r7
 80027c2:	d1f4      	bne.n	80027ae <HAL_RCC_OscConfig+0x61e>
 80027c4:	e60d      	b.n	80023e2 <HAL_RCC_OscConfig+0x252>
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	80ffffff 	.word	0x80ffffff
 80027d0:	fffffeff 	.word	0xfffffeff
 80027d4:	00001388 	.word	0x00001388
 80027d8:	ffff00ff 	.word	0xffff00ff
 80027dc:	feffffff 	.word	0xfeffffff
 80027e0:	11c1808c 	.word	0x11c1808c
 80027e4:	efffffff 	.word	0xefffffff

080027e8 <HAL_RCC_ClockConfig>:
{
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	46ce      	mov	lr, r9
 80027ec:	4647      	mov	r7, r8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ee:	2307      	movs	r3, #7
{
 80027f0:	000d      	movs	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f2:	4947      	ldr	r1, [pc, #284]	@ (8002910 <HAL_RCC_ClockConfig+0x128>)
{
 80027f4:	0004      	movs	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f6:	680a      	ldr	r2, [r1, #0]
{
 80027f8:	b580      	push	{r7, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fa:	401a      	ands	r2, r3
 80027fc:	42aa      	cmp	r2, r5
 80027fe:	d20c      	bcs.n	800281a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002800:	680a      	ldr	r2, [r1, #0]
 8002802:	439a      	bics	r2, r3
 8002804:	432a      	orrs	r2, r5
 8002806:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002808:	680a      	ldr	r2, [r1, #0]
 800280a:	4013      	ands	r3, r2
 800280c:	42ab      	cmp	r3, r5
 800280e:	d004      	beq.n	800281a <HAL_RCC_ClockConfig+0x32>
      return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
}
 8002812:	bcc0      	pop	{r6, r7}
 8002814:	46b9      	mov	r9, r7
 8002816:	46b0      	mov	r8, r6
 8002818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	07da      	lsls	r2, r3, #31
 800281e:	d525      	bpl.n	800286c <HAL_RCC_ClockConfig+0x84>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d058      	beq.n	80028d8 <HAL_RCC_ClockConfig+0xf0>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	2b02      	cmp	r3, #2
 8002828:	d051      	beq.n	80028ce <HAL_RCC_ClockConfig+0xe6>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282a:	2b00      	cmp	r3, #0
 800282c:	d15b      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xfe>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282e:	4a39      	ldr	r2, [pc, #228]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	0792      	lsls	r2, r2, #30
 8002834:	d5ec      	bpl.n	8002810 <HAL_RCC_ClockConfig+0x28>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002836:	2107      	movs	r1, #7
 8002838:	4e36      	ldr	r6, [pc, #216]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 800283a:	68b2      	ldr	r2, [r6, #8]
 800283c:	438a      	bics	r2, r1
 800283e:	4313      	orrs	r3, r2
 8002840:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002842:	f7fe fdb9 	bl	80013b8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	2338      	movs	r3, #56	@ 0x38
 8002848:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284a:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_RCC_ClockConfig+0x130>)
    tickstart = HAL_GetTick();
 800284c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002850:	e004      	b.n	800285c <HAL_RCC_ClockConfig+0x74>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f7fe fdb1 	bl	80013b8 <HAL_GetTick>
 8002856:	1bc0      	subs	r0, r0, r7
 8002858:	4548      	cmp	r0, r9
 800285a:	d842      	bhi.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285c:	4643      	mov	r3, r8
 800285e:	68b2      	ldr	r2, [r6, #8]
 8002860:	401a      	ands	r2, r3
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	429a      	cmp	r2, r3
 8002868:	d1f3      	bne.n	8002852 <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	079a      	lsls	r2, r3, #30
 800286e:	d506      	bpl.n	800287e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4928      	ldr	r1, [pc, #160]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 8002872:	482a      	ldr	r0, [pc, #168]	@ (800291c <HAL_RCC_ClockConfig+0x134>)
 8002874:	688a      	ldr	r2, [r1, #8]
 8002876:	4002      	ands	r2, r0
 8002878:	68a0      	ldr	r0, [r4, #8]
 800287a:	4302      	orrs	r2, r0
 800287c:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287e:	2107      	movs	r1, #7
 8002880:	4823      	ldr	r0, [pc, #140]	@ (8002910 <HAL_RCC_ClockConfig+0x128>)
 8002882:	6802      	ldr	r2, [r0, #0]
 8002884:	400a      	ands	r2, r1
 8002886:	42aa      	cmp	r2, r5
 8002888:	d907      	bls.n	800289a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	6802      	ldr	r2, [r0, #0]
 800288c:	438a      	bics	r2, r1
 800288e:	432a      	orrs	r2, r5
 8002890:	6002      	str	r2, [r0, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	6802      	ldr	r2, [r0, #0]
 8002894:	4011      	ands	r1, r2
 8002896:	42a9      	cmp	r1, r5
 8002898:	d1ba      	bne.n	8002810 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289a:	075b      	lsls	r3, r3, #29
 800289c:	d506      	bpl.n	80028ac <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800289e:	4a1d      	ldr	r2, [pc, #116]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 80028a0:	491f      	ldr	r1, [pc, #124]	@ (8002920 <HAL_RCC_ClockConfig+0x138>)
 80028a2:	6893      	ldr	r3, [r2, #8]
 80028a4:	400b      	ands	r3, r1
 80028a6:	68e1      	ldr	r1, [r4, #12]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80028ac:	f7ff fc0c 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 80028b0:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <HAL_RCC_ClockConfig+0x13c>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	491c      	ldr	r1, [pc, #112]	@ (8002928 <HAL_RCC_ClockConfig+0x140>)
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	0f1b      	lsrs	r3, r3, #28
 80028bc:	5cd2      	ldrb	r2, [r2, r3]
 80028be:	231f      	movs	r3, #31
 80028c0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80028c2:	40d8      	lsrs	r0, r3
 80028c4:	6008      	str	r0, [r1, #0]
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2003      	movs	r0, #3
 80028c8:	f7fe fd38 	bl	800133c <HAL_InitTick>
  return halstatus;
 80028cc:	e7a1      	b.n	8002812 <HAL_RCC_ClockConfig+0x2a>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ce:	4a11      	ldr	r2, [pc, #68]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	0392      	lsls	r2, r2, #14
 80028d4:	d4af      	bmi.n	8002836 <HAL_RCC_ClockConfig+0x4e>
 80028d6:	e79b      	b.n	8002810 <HAL_RCC_ClockConfig+0x28>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	0192      	lsls	r2, r2, #6
 80028de:	d4aa      	bmi.n	8002836 <HAL_RCC_ClockConfig+0x4e>
 80028e0:	e796      	b.n	8002810 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80028e2:	2003      	movs	r0, #3
 80028e4:	e795      	b.n	8002812 <HAL_RCC_ClockConfig+0x2a>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d00c      	beq.n	8002904 <HAL_RCC_ClockConfig+0x11c>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ea:	490a      	ldr	r1, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d004      	beq.n	80028fa <HAL_RCC_ClockConfig+0x112>
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	2290      	movs	r2, #144	@ 0x90
 80028f2:	588a      	ldr	r2, [r1, r2]
 80028f4:	0792      	lsls	r2, r2, #30
 80028f6:	d49e      	bmi.n	8002836 <HAL_RCC_ClockConfig+0x4e>
 80028f8:	e78a      	b.n	8002810 <HAL_RCC_ClockConfig+0x28>
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fa:	2294      	movs	r2, #148	@ 0x94
 80028fc:	588a      	ldr	r2, [r1, r2]
 80028fe:	0792      	lsls	r2, r2, #30
 8002900:	d499      	bmi.n	8002836 <HAL_RCC_ClockConfig+0x4e>
 8002902:	e785      	b.n	8002810 <HAL_RCC_ClockConfig+0x28>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002904:	4a03      	ldr	r2, [pc, #12]	@ (8002914 <HAL_RCC_ClockConfig+0x12c>)
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	0552      	lsls	r2, r2, #21
 800290a:	d494      	bmi.n	8002836 <HAL_RCC_ClockConfig+0x4e>
 800290c:	e780      	b.n	8002810 <HAL_RCC_ClockConfig+0x28>
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	40022000 	.word	0x40022000
 8002914:	40021000 	.word	0x40021000
 8002918:	00001388 	.word	0x00001388
 800291c:	fffff0ff 	.word	0xfffff0ff
 8002920:	ffff8fff 	.word	0xffff8fff
 8002924:	080030b4 	.word	0x080030b4
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	46d6      	mov	lr, sl
 8002930:	464f      	mov	r7, r9
 8002932:	4646      	mov	r6, r8
 8002934:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002936:	6803      	ldr	r3, [r0, #0]
{
 8002938:	0004      	movs	r4, r0
 800293a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800293c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	d559      	bpl.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xca>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	4b9f      	ldr	r3, [pc, #636]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	6d99      	ldr	r1, [r3, #88]	@ 0x58
    FlagStatus       pwrclkchanged = RESET;
 800294a:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294c:	4211      	tst	r1, r2
 800294e:	d100      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002950:	e101      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002952:	2780      	movs	r7, #128	@ 0x80
 8002954:	4d9c      	ldr	r5, [pc, #624]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002956:	007f      	lsls	r7, r7, #1
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	433b      	orrs	r3, r7
 800295c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295e:	f7fe fd2b 	bl	80013b8 <HAL_GetTick>
 8002962:	0006      	movs	r6, r0

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002964:	e005      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe fd27 	bl	80013b8 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	2802      	cmp	r0, #2
 800296e:	d900      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002970:	e0fb      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x23e>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002972:	682b      	ldr	r3, [r5, #0]
 8002974:	423b      	tst	r3, r7
 8002976:	d0f6      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002978:	2390      	movs	r3, #144	@ 0x90
 800297a:	4d92      	ldr	r5, [pc, #584]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800297c:	22c0      	movs	r2, #192	@ 0xc0
 800297e:	58e9      	ldr	r1, [r5, r3]
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	000e      	movs	r6, r1

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002984:	6c20      	ldr	r0, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002986:	4016      	ands	r6, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002988:	4211      	tst	r1, r2
 800298a:	d027      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800298c:	4286      	cmp	r6, r0
 800298e:	d025      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002990:	58ea      	ldr	r2, [r5, r3]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	58ee      	ldr	r6, [r5, r3]
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002994:	498d      	ldr	r1, [pc, #564]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
        __HAL_RCC_BACKUPRESET_FORCE();
 8002996:	46b4      	mov	ip, r6
 8002998:	2680      	movs	r6, #128	@ 0x80
 800299a:	4667      	mov	r7, ip
 800299c:	0276      	lsls	r6, r6, #9
 800299e:	433e      	orrs	r6, r7
 80029a0:	50ee      	str	r6, [r5, r3]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a2:	58ee      	ldr	r6, [r5, r3]
 80029a4:	4f8a      	ldr	r7, [pc, #552]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a6:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a8:	403e      	ands	r6, r7
 80029aa:	50ee      	str	r6, [r5, r3]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ac:	50e9      	str	r1, [r5, r3]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ae:	07d2      	lsls	r2, r2, #31
 80029b0:	d514      	bpl.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd01 	bl	80013b8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	2390      	movs	r3, #144	@ 0x90
 80029b8:	4699      	mov	r9, r3
 80029ba:	3b8e      	subs	r3, #142	@ 0x8e
        tickstart = HAL_GetTick();
 80029bc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029be:	4698      	mov	r8, r3
 80029c0:	e006      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fcf9 	bl	80013b8 <HAL_GetTick>
 80029c6:	4b83      	ldr	r3, [pc, #524]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80029c8:	1b80      	subs	r0, r0, r6
 80029ca:	4298      	cmp	r0, r3
 80029cc:	d900      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x23e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d0:	464b      	mov	r3, r9
 80029d2:	4642      	mov	r2, r8
 80029d4:	58eb      	ldr	r3, [r5, r3]
 80029d6:	421a      	tst	r2, r3
 80029d8:	d0f3      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029da:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80029dc:	2290      	movs	r2, #144	@ 0x90
 80029de:	4979      	ldr	r1, [pc, #484]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80029e0:	4d7a      	ldr	r5, [pc, #488]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80029e2:	588b      	ldr	r3, [r1, r2]
 80029e4:	402b      	ands	r3, r5
 80029e6:	4303      	orrs	r3, r0
 80029e8:	508b      	str	r3, [r1, r2]
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ea:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ec:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	d100      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80029f4:	e0bf      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f6:	07da      	lsls	r2, r3, #31
 80029f8:	d507      	bpl.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	2188      	movs	r1, #136	@ 0x88
 80029fc:	2603      	movs	r6, #3
 80029fe:	4d71      	ldr	r5, [pc, #452]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a00:	586a      	ldr	r2, [r5, r1]
 8002a02:	43b2      	bics	r2, r6
 8002a04:	6866      	ldr	r6, [r4, #4]
 8002a06:	4332      	orrs	r2, r6
 8002a08:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0a:	079a      	lsls	r2, r3, #30
 8002a0c:	d507      	bpl.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0e:	2188      	movs	r1, #136	@ 0x88
 8002a10:	260c      	movs	r6, #12
 8002a12:	4d6c      	ldr	r5, [pc, #432]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a14:	586a      	ldr	r2, [r5, r1]
 8002a16:	43b2      	bics	r2, r6
 8002a18:	68a6      	ldr	r6, [r4, #8]
 8002a1a:	4332      	orrs	r2, r6
 8002a1c:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a1e:	06da      	lsls	r2, r3, #27
 8002a20:	d507      	bpl.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a22:	2188      	movs	r1, #136	@ 0x88
 8002a24:	4d67      	ldr	r5, [pc, #412]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a26:	4e6c      	ldr	r6, [pc, #432]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002a28:	586a      	ldr	r2, [r5, r1]
 8002a2a:	4032      	ands	r2, r6
 8002a2c:	6966      	ldr	r6, [r4, #20]
 8002a2e:	4332      	orrs	r2, r6
 8002a30:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002a32:	071a      	lsls	r2, r3, #28
 8002a34:	d507      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002a36:	2188      	movs	r1, #136	@ 0x88
 8002a38:	4d62      	ldr	r5, [pc, #392]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a3a:	4e64      	ldr	r6, [pc, #400]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002a3c:	586a      	ldr	r2, [r5, r1]
 8002a3e:	4032      	ands	r2, r6
 8002a40:	6926      	ldr	r6, [r4, #16]
 8002a42:	4332      	orrs	r2, r6
 8002a44:	506a      	str	r2, [r5, r1]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8002a46:	075a      	lsls	r2, r3, #29
 8002a48:	d507      	bpl.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8002a4a:	2188      	movs	r1, #136	@ 0x88
 8002a4c:	26c0      	movs	r6, #192	@ 0xc0
 8002a4e:	4d5d      	ldr	r5, [pc, #372]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a50:	586a      	ldr	r2, [r5, r1]
 8002a52:	43b2      	bics	r2, r6
 8002a54:	68e6      	ldr	r6, [r4, #12]
 8002a56:	4332      	orrs	r2, r6
 8002a58:	506a      	str	r2, [r5, r1]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5a:	069a      	lsls	r2, r3, #26
 8002a5c:	d507      	bpl.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5e:	2188      	movs	r1, #136	@ 0x88
 8002a60:	4d58      	ldr	r5, [pc, #352]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a62:	4e5e      	ldr	r6, [pc, #376]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002a64:	586a      	ldr	r2, [r5, r1]
 8002a66:	4032      	ands	r2, r6
 8002a68:	69a6      	ldr	r6, [r4, #24]
 8002a6a:	4332      	orrs	r2, r6
 8002a6c:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6e:	065a      	lsls	r2, r3, #25
 8002a70:	d507      	bpl.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a72:	2188      	movs	r1, #136	@ 0x88
 8002a74:	4d53      	ldr	r5, [pc, #332]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a76:	4e5a      	ldr	r6, [pc, #360]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002a78:	586a      	ldr	r2, [r5, r1]
 8002a7a:	4032      	ands	r2, r6
 8002a7c:	69e6      	ldr	r6, [r4, #28]
 8002a7e:	4332      	orrs	r2, r6
 8002a80:	506a      	str	r2, [r5, r1]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a82:	061a      	lsls	r2, r3, #24
 8002a84:	d507      	bpl.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a86:	2188      	movs	r1, #136	@ 0x88
 8002a88:	4d4e      	ldr	r5, [pc, #312]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a8a:	4e56      	ldr	r6, [pc, #344]	@ (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a8c:	586a      	ldr	r2, [r5, r1]
 8002a8e:	4032      	ands	r2, r6
 8002a90:	6a26      	ldr	r6, [r4, #32]
 8002a92:	4332      	orrs	r2, r6
 8002a94:	506a      	str	r2, [r5, r1]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a96:	05da      	lsls	r2, r3, #23
 8002a98:	d507      	bpl.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a9a:	2188      	movs	r1, #136	@ 0x88
 8002a9c:	4d49      	ldr	r5, [pc, #292]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002a9e:	4e52      	ldr	r6, [pc, #328]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aa0:	586a      	ldr	r2, [r5, r1]
 8002aa2:	4032      	ands	r2, r6
 8002aa4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002aa6:	4332      	orrs	r2, r6
 8002aa8:	506a      	str	r2, [r5, r1]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002aaa:	059a      	lsls	r2, r3, #22
 8002aac:	d507      	bpl.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002aae:	2188      	movs	r1, #136	@ 0x88
 8002ab0:	4d44      	ldr	r5, [pc, #272]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002ab2:	4e4e      	ldr	r6, [pc, #312]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ab4:	586a      	ldr	r2, [r5, r1]
 8002ab6:	4032      	ands	r2, r6
 8002ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002aba:	4332      	orrs	r2, r6
 8002abc:	506a      	str	r2, [r5, r1]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002abe:	045a      	lsls	r2, r3, #17
 8002ac0:	d50b      	bpl.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8002ac2:	2280      	movs	r2, #128	@ 0x80
 8002ac4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8002ac6:	0552      	lsls	r2, r2, #21
 8002ac8:	4296      	cmp	r6, r2
 8002aca:	d05a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002acc:	2188      	movs	r1, #136	@ 0x88
 8002ace:	4d3d      	ldr	r5, [pc, #244]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002ad0:	4f47      	ldr	r7, [pc, #284]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad2:	586a      	ldr	r2, [r5, r1]
 8002ad4:	403a      	ands	r2, r7
 8002ad6:	4332      	orrs	r2, r6
 8002ad8:	506a      	str	r2, [r5, r1]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ada:	04da      	lsls	r2, r3, #19
 8002adc:	d50b      	bpl.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8002ae2:	0512      	lsls	r2, r2, #20
 8002ae4:	4296      	cmp	r6, r2
 8002ae6:	d053      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae8:	2188      	movs	r1, #136	@ 0x88
 8002aea:	4d36      	ldr	r5, [pc, #216]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002aec:	4f41      	ldr	r7, [pc, #260]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002aee:	586a      	ldr	r2, [r5, r1]
 8002af0:	403a      	ands	r2, r7
 8002af2:	4332      	orrs	r2, r6
 8002af4:	506a      	str	r2, [r5, r1]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002af6:	049a      	lsls	r2, r3, #18
 8002af8:	d50b      	bpl.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8002afe:	0512      	lsls	r2, r2, #20
 8002b00:	4296      	cmp	r6, r2
 8002b02:	d04c      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b04:	2188      	movs	r1, #136	@ 0x88
 8002b06:	4d2f      	ldr	r5, [pc, #188]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b08:	4f3a      	ldr	r7, [pc, #232]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b0a:	586a      	ldr	r2, [r5, r1]
 8002b0c:	403a      	ands	r2, r7
 8002b0e:	4332      	orrs	r2, r6
 8002b10:	506a      	str	r2, [r5, r1]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b12:	055a      	lsls	r2, r3, #21
 8002b14:	d50b      	bpl.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x202>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002b16:	2280      	movs	r2, #128	@ 0x80
 8002b18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002b1a:	0452      	lsls	r2, r2, #17
 8002b1c:	4291      	cmp	r1, r2
 8002b1e:	d045      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b20:	2588      	movs	r5, #136	@ 0x88
 8002b22:	4e28      	ldr	r6, [pc, #160]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b24:	4f34      	ldr	r7, [pc, #208]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b26:	5972      	ldr	r2, [r6, r5]
 8002b28:	403a      	ands	r2, r7
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	5172      	str	r2, [r6, r5]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b2e:	051b      	lsls	r3, r3, #20
 8002b30:	d50b      	bpl.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002b36:	049b      	lsls	r3, r3, #18
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	d03c      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b3c:	2288      	movs	r2, #136	@ 0x88
 8002b3e:	4921      	ldr	r1, [pc, #132]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b40:	4d2d      	ldr	r5, [pc, #180]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b42:	588b      	ldr	r3, [r1, r2]
 8002b44:	402b      	ands	r3, r5
 8002b46:	4323      	orrs	r3, r4
 8002b48:	508b      	str	r3, [r1, r2]

  }

  return status;
}
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bce0      	pop	{r5, r6, r7}
 8002b4e:	46ba      	mov	sl, r7
 8002b50:	46b1      	mov	r9, r6
 8002b52:	46a8      	mov	r8, r5
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	6599      	str	r1, [r3, #88]	@ 0x58
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	4013      	ands	r3, r2
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	469a      	mov	sl, r3
 8002b68:	e6f3      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 8002b6a:	4652      	mov	r2, sl
        status = ret;
 8002b6c:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b6e:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8002b70:	2a01      	cmp	r2, #1
 8002b72:	d000      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002b74:	e73f      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b76:	4913      	ldr	r1, [pc, #76]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b78:	4d20      	ldr	r5, [pc, #128]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002b7a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8002b7c:	402a      	ands	r2, r5
 8002b7e:	658a      	str	r2, [r1, #88]	@ 0x58
 8002b80:	e739      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8002b82:	2280      	movs	r2, #128	@ 0x80
 8002b84:	490f      	ldr	r1, [pc, #60]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b86:	0252      	lsls	r2, r2, #9
 8002b88:	68cd      	ldr	r5, [r1, #12]
 8002b8a:	432a      	orrs	r2, r5
 8002b8c:	60ca      	str	r2, [r1, #12]
 8002b8e:	e79d      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002b94:	0452      	lsls	r2, r2, #17
 8002b96:	68cd      	ldr	r5, [r1, #12]
 8002b98:	432a      	orrs	r2, r5
 8002b9a:	60ca      	str	r2, [r1, #12]
 8002b9c:	e7a4      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002b9e:	2280      	movs	r2, #128	@ 0x80
 8002ba0:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002ba2:	0452      	lsls	r2, r2, #17
 8002ba4:	68cd      	ldr	r5, [r1, #12]
 8002ba6:	432a      	orrs	r2, r5
 8002ba8:	60ca      	str	r2, [r1, #12]
 8002baa:	e7ab      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002bac:	4d05      	ldr	r5, [pc, #20]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002bae:	68ea      	ldr	r2, [r5, #12]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60ea      	str	r2, [r5, #12]
 8002bb4:	e7b4      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	4a02      	ldr	r2, [pc, #8]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002bba:	045b      	lsls	r3, r3, #17
 8002bbc:	68d1      	ldr	r1, [r2, #12]
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	60d3      	str	r3, [r2, #12]
 8002bc2:	e7bb      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	fffffcff 	.word	0xfffffcff
 8002bd0:	fffeffff 	.word	0xfffeffff
 8002bd4:	00001388 	.word	0x00001388
 8002bd8:	fffff3ff 	.word	0xfffff3ff
 8002bdc:	ffffcfff 	.word	0xffffcfff
 8002be0:	fffcffff 	.word	0xfffcffff
 8002be4:	fff3ffff 	.word	0xfff3ffff
 8002be8:	ffcfffff 	.word	0xffcfffff
 8002bec:	ff3fffff 	.word	0xff3fffff
 8002bf0:	cfffffff 	.word	0xcfffffff
 8002bf4:	f3ffffff 	.word	0xf3ffffff
 8002bf8:	feffffff 	.word	0xfeffffff
 8002bfc:	efffffff 	.word	0xefffffff

08002c00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	46c6      	mov	lr, r8
 8002c04:	0004      	movs	r4, r0
 8002c06:	b500      	push	{lr}
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d064      	beq.n	8002cd6 <HAL_RTC_Init+0xd6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c0c:	232d      	movs	r3, #45	@ 0x2d
 8002c0e:	5cc3      	ldrb	r3, [r0, r3]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d055      	beq.n	8002cc2 <HAL_RTC_Init+0xc2>
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c16:	232d      	movs	r3, #45	@ 0x2d
 8002c18:	2202      	movs	r2, #2

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c1a:	4d3a      	ldr	r5, [pc, #232]	@ (8002d04 <HAL_RTC_Init+0x104>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c1c:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c1e:	339d      	adds	r3, #157	@ 0x9d
 8002c20:	626b      	str	r3, [r5, #36]	@ 0x24
 8002c22:	3b77      	subs	r3, #119	@ 0x77
 8002c24:	626b      	str	r3, [r5, #36]	@ 0x24
{
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002c26:	68eb      	ldr	r3, [r5, #12]
 8002c28:	065b      	lsls	r3, r3, #25
 8002c2a:	d535      	bpl.n	8002c98 <HAL_RTC_Init+0x98>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002c2c:	4d35      	ldr	r5, [pc, #212]	@ (8002d04 <HAL_RTC_Init+0x104>)
 8002c2e:	4a36      	ldr	r2, [pc, #216]	@ (8002d08 <HAL_RTC_Init+0x108>)
 8002c30:	69ab      	ldr	r3, [r5, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61ab      	str	r3, [r5, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002c36:	6921      	ldr	r1, [r4, #16]
 8002c38:	6863      	ldr	r3, [r4, #4]
 8002c3a:	69aa      	ldr	r2, [r5, #24]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	69a2      	ldr	r2, [r4, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61ab      	str	r3, [r5, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002c46:	68a3      	ldr	r3, [r4, #8]
 8002c48:	68e2      	ldr	r2, [r4, #12]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	612b      	str	r3, [r5, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002c50:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002c52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c54:	68ea      	ldr	r2, [r5, #12]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_RTC_Init+0x10c>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	4313      	orrs	r3, r2
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c5e:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002c60:	60eb      	str	r3, [r5, #12]
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c62:	68eb      	ldr	r3, [r5, #12]
 8002c64:	4393      	bics	r3, r2
 8002c66:	60eb      	str	r3, [r5, #12]
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c68:	2320      	movs	r3, #32
 8002c6a:	69aa      	ldr	r2, [r5, #24]
 8002c6c:	4213      	tst	r3, r2
 8002c6e:	d034      	beq.n	8002cda <HAL_RTC_Init+0xda>
        MODIFY_REG(RTC->CR, \
 8002c70:	4924      	ldr	r1, [pc, #144]	@ (8002d04 <HAL_RTC_Init+0x104>)
 8002c72:	69e0      	ldr	r0, [r4, #28]
 8002c74:	698a      	ldr	r2, [r1, #24]
 8002c76:	6a23      	ldr	r3, [r4, #32]
 8002c78:	00d2      	lsls	r2, r2, #3
 8002c7a:	4303      	orrs	r3, r0
 8002c7c:	08d2      	lsrs	r2, r2, #3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	6962      	ldr	r2, [r4, #20]
        hrtc->State = HAL_RTC_STATE_READY;
 8002c82:	2000      	movs	r0, #0
        MODIFY_REG(RTC->CR, \
 8002c84:	4313      	orrs	r3, r2
 8002c86:	618b      	str	r3, [r1, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c88:	23ff      	movs	r3, #255	@ 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 8002c8a:	2201      	movs	r2, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c8c:	624b      	str	r3, [r1, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8002c8e:	3bd2      	subs	r3, #210	@ 0xd2
 8002c90:	54e2      	strb	r2, [r4, r3]
}
 8002c92:	bc80      	pop	{r7}
 8002c94:	46b8      	mov	r8, r7
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c98:	68eb      	ldr	r3, [r5, #12]
 8002c9a:	327e      	adds	r2, #126	@ 0x7e
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60eb      	str	r3, [r5, #12]

    tickstart = HAL_GetTick();
 8002ca0:	f7fe fb8a 	bl	80013b8 <HAL_GetTick>
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ca4:	23fa      	movs	r3, #250	@ 0xfa
 8002ca6:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8002ca8:	0006      	movs	r6, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002caa:	2740      	movs	r7, #64	@ 0x40
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002cac:	4698      	mov	r8, r3
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002cae:	e004      	b.n	8002cba <HAL_RTC_Init+0xba>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb0:	f7fe fb82 	bl	80013b8 <HAL_GetTick>
 8002cb4:	1b80      	subs	r0, r0, r6
 8002cb6:	4540      	cmp	r0, r8
 8002cb8:	d808      	bhi.n	8002ccc <HAL_RTC_Init+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002cba:	68eb      	ldr	r3, [r5, #12]
 8002cbc:	421f      	tst	r7, r3
 8002cbe:	d0f7      	beq.n	8002cb0 <HAL_RTC_Init+0xb0>
 8002cc0:	e7b4      	b.n	8002c2c <HAL_RTC_Init+0x2c>
      hrtc->Lock = HAL_UNLOCKED;
 8002cc2:	332c      	adds	r3, #44	@ 0x2c
 8002cc4:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 8002cc6:	f7fe fa79 	bl	80011bc <HAL_RTC_MspInit>
 8002cca:	e7a4      	b.n	8002c16 <HAL_RTC_Init+0x16>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ccc:	23ff      	movs	r3, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cce:	2204      	movs	r2, #4
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd0:	626b      	str	r3, [r5, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cd2:	3bd2      	subs	r3, #210	@ 0xd2
 8002cd4:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	e7db      	b.n	8002c92 <HAL_RTC_Init+0x92>
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002cda:	68ea      	ldr	r2, [r5, #12]
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002cdc:	2720      	movs	r7, #32
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002cde:	439a      	bics	r2, r3
 8002ce0:	60ea      	str	r2, [r5, #12]
  tickstart = HAL_GetTick();
 8002ce2:	f7fe fb69 	bl	80013b8 <HAL_GetTick>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ce6:	23fa      	movs	r3, #250	@ 0xfa
 8002ce8:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8002cea:	0006      	movs	r6, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cec:	4698      	mov	r8, r3
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002cee:	e004      	b.n	8002cfa <HAL_RTC_Init+0xfa>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cf0:	f7fe fb62 	bl	80013b8 <HAL_GetTick>
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	4540      	cmp	r0, r8
 8002cf8:	d8e8      	bhi.n	8002ccc <HAL_RTC_Init+0xcc>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002cfa:	68eb      	ldr	r3, [r5, #12]
 8002cfc:	421f      	tst	r7, r3
 8002cfe:	d0f7      	beq.n	8002cf0 <HAL_RTC_Init+0xf0>
 8002d00:	e7b6      	b.n	8002c70 <HAL_RTC_Init+0x70>
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	40002800 	.word	0x40002800
 8002d08:	fb8fffbf 	.word	0xfb8fffbf
 8002d0c:	ffffe0ff 	.word	0xffffe0ff

08002d10 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	464e      	mov	r6, r9
 8002d14:	46de      	mov	lr, fp
 8002d16:	4657      	mov	r7, sl
 8002d18:	4645      	mov	r5, r8
 8002d1a:	4699      	mov	r9, r3
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d1c:	232c      	movs	r3, #44	@ 0x2c
{
 8002d1e:	b5e0      	push	{r5, r6, r7, lr}
 8002d20:	4692      	mov	sl, r2
  __HAL_LOCK(hrtc);
 8002d22:	5cc2      	ldrb	r2, [r0, r3]
{
 8002d24:	0006      	movs	r6, r0
 8002d26:	468b      	mov	fp, r1
  __HAL_LOCK(hrtc);
 8002d28:	2a01      	cmp	r2, #1
 8002d2a:	d067      	beq.n	8002dfc <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 8002d2c:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8002d2e:	4c34      	ldr	r4, [pc, #208]	@ (8002e00 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
  __HAL_LOCK(hrtc);
 8002d30:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d32:	3301      	adds	r3, #1
 8002d34:	3201      	adds	r2, #1
 8002d36:	54c2      	strb	r2, [r0, r3]
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8002d38:	69a3      	ldr	r3, [r4, #24]
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	d50f      	bpl.n	8002d5e <HAL_RTCEx_SetWakeUpTimer_IT+0x4e>
  {
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fb3b 	bl	80013b8 <HAL_GetTick>

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d42:	23fa      	movs	r3, #250	@ 0xfa
 8002d44:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8002d46:	0005      	movs	r5, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8002d48:	2704      	movs	r7, #4
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d4a:	4698      	mov	r8, r3
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8002d4c:	e004      	b.n	8002d58 <HAL_RTCEx_SetWakeUpTimer_IT+0x48>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d4e:	f7fe fb33 	bl	80013b8 <HAL_GetTick>
 8002d52:	1b40      	subs	r0, r0, r5
 8002d54:	4540      	cmp	r0, r8
 8002d56:	d84b      	bhi.n	8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	421f      	tst	r7, r3
 8002d5c:	d1f7      	bne.n	8002d4e <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002d5e:	4c28      	ldr	r4, [pc, #160]	@ (8002e00 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8002d60:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8002d62:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002d64:	2704      	movs	r7, #4
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002d66:	4013      	ands	r3, r2
 8002d68:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8002d6e:	f7fe fb23 	bl	80013b8 <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d72:	23fa      	movs	r3, #250	@ 0xfa
 8002d74:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8002d76:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d78:	4698      	mov	r8, r3
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002d7a:	e004      	b.n	8002d86 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d7c:	f7fe fb1c 	bl	80013b8 <HAL_GetTick>
 8002d80:	1b40      	subs	r0, r0, r5
 8002d82:	4540      	cmp	r0, r8
 8002d84:	d82a      	bhi.n	8002ddc <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8002d86:	68e3      	ldr	r3, [r4, #12]
 8002d88:	421f      	tst	r7, r3
 8002d8a:	d0f7      	beq.n	8002d7c <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
      return HAL_TIMEOUT;
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	465a      	mov	r2, fp
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	4313      	orrs	r3, r2

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002d94:	2207      	movs	r2, #7
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8002d96:	6163      	str	r3, [r4, #20]
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002d98:	69a3      	ldr	r3, [r4, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	4652      	mov	r2, sl
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61a3      	str	r3, [r4, #24]
  if (WakeUpAutoClr != 0U)
 8002da4:	464b      	mov	r3, r9
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002da6:	2284      	movs	r2, #132	@ 0x84
  if (WakeUpAutoClr != 0U)
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d025      	beq.n	8002df8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	5888      	ldr	r0, [r1, r2]
 8002db0:	055b      	lsls	r3, r3, #21
 8002db2:	4303      	orrs	r3, r0
 8002db4:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002db6:	2388      	movs	r3, #136	@ 0x88
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	6991      	ldr	r1, [r2, #24]
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

  return HAL_OK;
 8002dbe:	2000      	movs	r0, #0
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6193      	str	r3, [r2, #24]
  hrtc->State = HAL_RTC_STATE_READY;
 8002dc4:	232d      	movs	r3, #45	@ 0x2d
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	54f2      	strb	r2, [r6, r3]
  __HAL_UNLOCK(hrtc);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	54f2      	strb	r2, [r6, r3]
}
 8002dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd2:	46bb      	mov	fp, r7
 8002dd4:	46b2      	mov	sl, r6
 8002dd6:	46a9      	mov	r9, r5
 8002dd8:	46a0      	mov	r8, r4
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ddc:	23ff      	movs	r3, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dde:	2203      	movs	r2, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de0:	6263      	str	r3, [r4, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002de2:	3bd2      	subs	r3, #210	@ 0xd2
 8002de4:	54f2      	strb	r2, [r6, r3]
      __HAL_UNLOCK(hrtc);
 8002de6:	232c      	movs	r3, #44	@ 0x2c
 8002de8:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
      __HAL_UNLOCK(hrtc);
 8002dec:	54f2      	strb	r2, [r6, r3]
 8002dee:	e7ef      	b.n	8002dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002df0:	232d      	movs	r3, #45	@ 0x2d
 8002df2:	2203      	movs	r2, #3
 8002df4:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002df6:	e7f6      	b.n	8002de6 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	e7d7      	b.n	8002dac <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  __HAL_LOCK(hrtc);
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	e7e7      	b.n	8002dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>
 8002e00:	40002800 	.word	0x40002800
 8002e04:	fffffbff 	.word	0xfffffbff
 8002e08:	40021800 	.word	0x40021800

08002e0c <HAL_RTCEx_DeactivateWakeUpTimer>:
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e0c:	222c      	movs	r2, #44	@ 0x2c
{
 8002e0e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hrtc);
 8002e10:	5c83      	ldrb	r3, [r0, r2]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00d      	beq.n	8002e32 <HAL_RTCEx_DeactivateWakeUpTimer+0x26>

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e16:	212d      	movs	r1, #45	@ 0x2d
 8002e18:	2302      	movs	r3, #2

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8002e1a:	4c07      	ldr	r4, [pc, #28]	@ (8002e38 <HAL_RTCEx_DeactivateWakeUpTimer+0x2c>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1c:	5443      	strb	r3, [r0, r1]
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8002e1e:	69a3      	ldr	r3, [r4, #24]
 8002e20:	4d06      	ldr	r5, [pc, #24]	@ (8002e3c <HAL_RTCEx_DeactivateWakeUpTimer+0x30>)
 8002e22:	402b      	ands	r3, r5
 8002e24:	61a3      	str	r3, [r4, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e26:	2301      	movs	r3, #1
 8002e28:	5443      	strb	r3, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8002e2e:	2000      	movs	r0, #0
}
 8002e30:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hrtc);
 8002e32:	2002      	movs	r0, #2
 8002e34:	e7fc      	b.n	8002e30 <HAL_RTCEx_DeactivateWakeUpTimer+0x24>
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	40002800 	.word	0x40002800
 8002e3c:	ffffbbff 	.word	0xffffbbff

08002e40 <memset>:
 8002e40:	0003      	movs	r3, r0
 8002e42:	1882      	adds	r2, r0, r2
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	7019      	strb	r1, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	2600      	movs	r6, #0
 8002e54:	4c0c      	ldr	r4, [pc, #48]	@ (8002e88 <__libc_init_array+0x38>)
 8002e56:	4d0d      	ldr	r5, [pc, #52]	@ (8002e8c <__libc_init_array+0x3c>)
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	2600      	movs	r6, #0
 8002e62:	f000 f819 	bl	8002e98 <_init>
 8002e66:	4c0a      	ldr	r4, [pc, #40]	@ (8002e90 <__libc_init_array+0x40>)
 8002e68:	4d0a      	ldr	r5, [pc, #40]	@ (8002e94 <__libc_init_array+0x44>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	00b3      	lsls	r3, r6, #2
 8002e76:	58eb      	ldr	r3, [r5, r3]
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	00b3      	lsls	r3, r6, #2
 8002e80:	58eb      	ldr	r3, [r5, r3]
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	080030c4 	.word	0x080030c4
 8002e8c:	080030c4 	.word	0x080030c4
 8002e90:	080030c8 	.word	0x080030c8
 8002e94:	080030c4 	.word	0x080030c4

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
